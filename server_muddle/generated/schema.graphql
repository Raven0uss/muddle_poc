### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type Ad {
  active: Boolean!
  content: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  ratio: Int!
  targets(after: String, before: String, first: Int, last: Int, orderBy: AdTargetOrderByInput, skip: Int, where: AdTargetWhereInput): [AdTarget!]
  updatedAt: DateTime!
}

input AdCreateInput {
  active: Boolean
  content: String!
  id: ID
  name: String!
  ratio: Int
  targets: AdTargetCreateManyInput
}

enum AdOrderByInput {
  active_ASC
  active_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  ratio_ASC
  ratio_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AdTarget {
  birthdateMax: DateTime!
  birthdateMin: DateTime!
  createdAt: DateTime!
  gender: GenderFilter!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

input AdTargetCreateInput {
  birthdateMax: DateTime!
  birthdateMin: DateTime!
  gender: GenderFilter
  id: ID
  name: String!
}

input AdTargetCreateManyInput {
  connect: [AdTargetWhereUniqueInput!]
  create: [AdTargetCreateInput!]
}

enum AdTargetOrderByInput {
  birthdateMax_ASC
  birthdateMax_DESC
  birthdateMin_ASC
  birthdateMin_DESC
  createdAt_ASC
  createdAt_DESC
  gender_ASC
  gender_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input AdTargetScalarWhereInput {
  AND: [AdTargetScalarWhereInput!]
  birthdateMax: DateTime
  birthdateMax_gt: DateTime
  birthdateMax_gte: DateTime
  birthdateMax_in: [DateTime!]
  birthdateMax_lt: DateTime
  birthdateMax_lte: DateTime
  birthdateMax_not: DateTime
  birthdateMax_not_in: [DateTime!]
  birthdateMin: DateTime
  birthdateMin_gt: DateTime
  birthdateMin_gte: DateTime
  birthdateMin_in: [DateTime!]
  birthdateMin_lt: DateTime
  birthdateMin_lte: DateTime
  birthdateMin_not: DateTime
  birthdateMin_not_in: [DateTime!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  gender: GenderFilter
  gender_in: [GenderFilter!]
  gender_not: GenderFilter
  gender_not_in: [GenderFilter!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [AdTargetScalarWhereInput!]
  OR: [AdTargetScalarWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input AdTargetUpdateDataInput {
  birthdateMax: DateTime
  birthdateMin: DateTime
  gender: GenderFilter
  name: String
}

input AdTargetUpdateInput {
  birthdateMax: DateTime
  birthdateMin: DateTime
  gender: GenderFilter
  name: String
}

input AdTargetUpdateManyDataInput {
  birthdateMax: DateTime
  birthdateMin: DateTime
  gender: GenderFilter
  name: String
}

input AdTargetUpdateManyInput {
  connect: [AdTargetWhereUniqueInput!]
  create: [AdTargetCreateInput!]
  delete: [AdTargetWhereUniqueInput!]
  deleteMany: [AdTargetScalarWhereInput!]
  disconnect: [AdTargetWhereUniqueInput!]
  set: [AdTargetWhereUniqueInput!]
  update: [AdTargetUpdateWithWhereUniqueNestedInput!]
  updateMany: [AdTargetUpdateManyWithWhereNestedInput!]
  upsert: [AdTargetUpsertWithWhereUniqueNestedInput!]
}

input AdTargetUpdateManyWithWhereNestedInput {
  data: AdTargetUpdateManyDataInput!
  where: AdTargetScalarWhereInput!
}

input AdTargetUpdateWithWhereUniqueNestedInput {
  data: AdTargetUpdateDataInput!
  where: AdTargetWhereUniqueInput!
}

input AdTargetUpsertWithWhereUniqueNestedInput {
  create: AdTargetCreateInput!
  update: AdTargetUpdateDataInput!
  where: AdTargetWhereUniqueInput!
}

input AdTargetWhereInput {
  AND: [AdTargetWhereInput!]
  birthdateMax: DateTime
  birthdateMax_gt: DateTime
  birthdateMax_gte: DateTime
  birthdateMax_in: [DateTime!]
  birthdateMax_lt: DateTime
  birthdateMax_lte: DateTime
  birthdateMax_not: DateTime
  birthdateMax_not_in: [DateTime!]
  birthdateMin: DateTime
  birthdateMin_gt: DateTime
  birthdateMin_gte: DateTime
  birthdateMin_in: [DateTime!]
  birthdateMin_lt: DateTime
  birthdateMin_lte: DateTime
  birthdateMin_not: DateTime
  birthdateMin_not_in: [DateTime!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  gender: GenderFilter
  gender_in: [GenderFilter!]
  gender_not: GenderFilter
  gender_not_in: [GenderFilter!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input AdTargetWhereUniqueInput {
  id: ID
  name: String
}

input AdUpdateInput {
  active: Boolean
  content: String
  name: String
  ratio: Int
  targets: AdTargetUpdateManyInput
}

input AdWhereInput {
  active: Boolean
  active_not: Boolean
  AND: [AdWhereInput!]
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  ratio: Int
  ratio_gt: Int
  ratio_gte: Int
  ratio_in: [Int!]
  ratio_lt: Int
  ratio_lte: Int
  ratio_not: Int
  ratio_not_in: [Int!]
  targets_some: AdTargetWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input AdWhereUniqueInput {
  id: ID
  name: String
}

type BatchPayload {
  count: Long!
}

type Comment {
  comments(after: String, before: String, first: Int, last: Int, orderBy: CommentOrderByInput, skip: Int, where: CommentWhereInput): [Comment!]
  content: String!
  createdAt: DateTime!
  debate: Debate!
  dislikes(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  from: User!
  id: ID!
  likes(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  nested: Boolean!
  reports(after: String, before: String, first: Int, last: Int, orderBy: ReportOrderByInput, skip: Int, where: ReportWhereInput): [Report!]
  updatedAt: DateTime!
}

input CommentCreateInput {
  comments: CommentCreateManyInput
  content: String!
  debate: DebateCreateOneWithoutCommentsInput!
  dislikes: UserCreateManyInput
  from: UserCreateOneInput!
  id: ID
  likes: UserCreateManyInput
  nested: Boolean
  reports: ReportCreateManyWithoutCommentInput
}

input CommentCreateManyInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateInput!]
}

input CommentCreateManyWithoutDebateInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutDebateInput!]
}

input CommentCreateOneInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateInput
}

input CommentCreateOneWithoutReportsInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateWithoutReportsInput
}

input CommentCreateWithoutDebateInput {
  comments: CommentCreateManyInput
  content: String!
  dislikes: UserCreateManyInput
  from: UserCreateOneInput!
  id: ID
  likes: UserCreateManyInput
  nested: Boolean
  reports: ReportCreateManyWithoutCommentInput
}

input CommentCreateWithoutReportsInput {
  comments: CommentCreateManyInput
  content: String!
  debate: DebateCreateOneWithoutCommentsInput!
  dislikes: UserCreateManyInput
  from: UserCreateOneInput!
  id: ID
  likes: UserCreateManyInput
  nested: Boolean
}

enum CommentOrderByInput {
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  nested_ASC
  nested_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  nested: Boolean
  nested_not: Boolean
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

type CommentSubPayload {
  node: Comment
  updatedFields: [String!]
}

input CommentUpdateDataInput {
  comments: CommentUpdateManyInput
  content: String
  debate: DebateUpdateOneRequiredWithoutCommentsInput
  dislikes: UserUpdateManyInput
  from: UserUpdateOneRequiredInput
  likes: UserUpdateManyInput
  nested: Boolean
  reports: ReportUpdateManyWithoutCommentInput
}

input CommentUpdateInput {
  comments: CommentUpdateManyInput
  content: String
  debate: DebateUpdateOneRequiredWithoutCommentsInput
  dislikes: UserUpdateManyInput
  from: UserUpdateOneRequiredInput
  likes: UserUpdateManyInput
  nested: Boolean
  reports: ReportUpdateManyWithoutCommentInput
}

input CommentUpdateManyDataInput {
  content: String
  nested: Boolean
}

input CommentUpdateManyInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueNestedInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueNestedInput!]
}

input CommentUpdateManyWithoutDebateInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutDebateInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutDebateInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutDebateInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  data: CommentUpdateManyDataInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateOneInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateInput
  delete: Boolean
  disconnect: Boolean
  update: CommentUpdateDataInput
  upsert: CommentUpsertNestedInput
}

input CommentUpdateOneWithoutReportsInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateWithoutReportsInput
  delete: Boolean
  disconnect: Boolean
  update: CommentUpdateWithoutReportsDataInput
  upsert: CommentUpsertWithoutReportsInput
}

input CommentUpdateWithoutDebateDataInput {
  comments: CommentUpdateManyInput
  content: String
  dislikes: UserUpdateManyInput
  from: UserUpdateOneRequiredInput
  likes: UserUpdateManyInput
  nested: Boolean
  reports: ReportUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutReportsDataInput {
  comments: CommentUpdateManyInput
  content: String
  debate: DebateUpdateOneRequiredWithoutCommentsInput
  dislikes: UserUpdateManyInput
  from: UserUpdateOneRequiredInput
  likes: UserUpdateManyInput
  nested: Boolean
}

input CommentUpdateWithWhereUniqueNestedInput {
  data: CommentUpdateDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutDebateInput {
  data: CommentUpdateWithoutDebateDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertNestedInput {
  create: CommentCreateInput!
  update: CommentUpdateDataInput!
}

input CommentUpsertWithoutReportsInput {
  create: CommentCreateWithoutReportsInput!
  update: CommentUpdateWithoutReportsDataInput!
}

input CommentUpsertWithWhereUniqueNestedInput {
  create: CommentCreateInput!
  update: CommentUpdateDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutDebateInput {
  create: CommentCreateWithoutDebateInput!
  update: CommentUpdateWithoutDebateDataInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  comments_some: CommentWhereInput
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  debate: DebateWhereInput
  dislikes_some: UserWhereInput
  from: UserWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  likes_some: UserWhereInput
  nested: Boolean
  nested_not: Boolean
  reports_some: ReportWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input CommentWhereUniqueInput {
  id: ID
}

type Conversation {
  createdAt: DateTime!
  deleted: String
  id: ID!
  messages(after: String, before: String, first: Int, last: Int, orderBy: MessageOrderByInput, skip: Int, where: MessageWhereInput): [Message!]
  speakers(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  updatedAt: DateTime!
}

input ConversationCreateInput {
  deleted: String
  id: ID
  messages: MessageCreateManyWithoutConversationInput
  speakers: UserCreateManyWithoutConversationsInput
}

input ConversationCreateManyWithoutSpeakersInput {
  connect: [ConversationWhereUniqueInput!]
  create: [ConversationCreateWithoutSpeakersInput!]
}

input ConversationCreateOneWithoutMessagesInput {
  connect: ConversationWhereUniqueInput
  create: ConversationCreateWithoutMessagesInput
}

input ConversationCreateWithoutMessagesInput {
  deleted: String
  id: ID
  speakers: UserCreateManyWithoutConversationsInput
}

input ConversationCreateWithoutSpeakersInput {
  deleted: String
  id: ID
  messages: MessageCreateManyWithoutConversationInput
}

enum ConversationOrderByInput {
  createdAt_ASC
  createdAt_DESC
  deleted_ASC
  deleted_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ConversationScalarWhereInput {
  AND: [ConversationScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  deleted: String
  deleted_contains: String
  deleted_ends_with: String
  deleted_gt: String
  deleted_gte: String
  deleted_in: [String!]
  deleted_lt: String
  deleted_lte: String
  deleted_not: String
  deleted_not_contains: String
  deleted_not_ends_with: String
  deleted_not_in: [String!]
  deleted_not_starts_with: String
  deleted_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [ConversationScalarWhereInput!]
  OR: [ConversationScalarWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

type ConversationSubPayload {
  node: Conversation
  updatedFields: [String!]
}

input ConversationUpdateInput {
  deleted: String
  messages: MessageUpdateManyWithoutConversationInput
  speakers: UserUpdateManyWithoutConversationsInput
}

input ConversationUpdateManyDataInput {
  deleted: String
}

input ConversationUpdateManyWithoutSpeakersInput {
  connect: [ConversationWhereUniqueInput!]
  create: [ConversationCreateWithoutSpeakersInput!]
  delete: [ConversationWhereUniqueInput!]
  deleteMany: [ConversationScalarWhereInput!]
  disconnect: [ConversationWhereUniqueInput!]
  set: [ConversationWhereUniqueInput!]
  update: [ConversationUpdateWithWhereUniqueWithoutSpeakersInput!]
  updateMany: [ConversationUpdateManyWithWhereNestedInput!]
  upsert: [ConversationUpsertWithWhereUniqueWithoutSpeakersInput!]
}

input ConversationUpdateManyWithWhereNestedInput {
  data: ConversationUpdateManyDataInput!
  where: ConversationScalarWhereInput!
}

input ConversationUpdateOneRequiredWithoutMessagesInput {
  connect: ConversationWhereUniqueInput
  create: ConversationCreateWithoutMessagesInput
  update: ConversationUpdateWithoutMessagesDataInput
  upsert: ConversationUpsertWithoutMessagesInput
}

input ConversationUpdateWithoutMessagesDataInput {
  deleted: String
  speakers: UserUpdateManyWithoutConversationsInput
}

input ConversationUpdateWithoutSpeakersDataInput {
  deleted: String
  messages: MessageUpdateManyWithoutConversationInput
}

input ConversationUpdateWithWhereUniqueWithoutSpeakersInput {
  data: ConversationUpdateWithoutSpeakersDataInput!
  where: ConversationWhereUniqueInput!
}

input ConversationUpsertWithoutMessagesInput {
  create: ConversationCreateWithoutMessagesInput!
  update: ConversationUpdateWithoutMessagesDataInput!
}

input ConversationUpsertWithWhereUniqueWithoutSpeakersInput {
  create: ConversationCreateWithoutSpeakersInput!
  update: ConversationUpdateWithoutSpeakersDataInput!
  where: ConversationWhereUniqueInput!
}

input ConversationWhereInput {
  AND: [ConversationWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  deleted: String
  deleted_contains: String
  deleted_ends_with: String
  deleted_gt: String
  deleted_gte: String
  deleted_in: [String!]
  deleted_lt: String
  deleted_lte: String
  deleted_not: String
  deleted_not_contains: String
  deleted_not_ends_with: String
  deleted_not_in: [String!]
  deleted_not_starts_with: String
  deleted_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  messages_some: MessageWhereInput
  speakers_some: UserWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ConversationWhereUniqueInput {
  id: ID
}

"""Date custom scalar type"""
scalar DateTime

type Debate {
  answerOne: String
  answerTwo: String
  blueVotes(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  closed: Boolean!
  comments(after: String, before: String, first: Int, last: Int, orderBy: CommentOrderByInput, skip: Int, where: CommentWhereInput): [Comment!]
  content: String!
  createdAt: DateTime!
  crowned: Boolean!
  id: ID!
  image: String
  interactions(after: String, before: String, first: Int, last: Int, orderBy: InteractionOrderByInput, skip: Int, where: InteractionWhereInput): [Interaction!]
  loser: User
  negatives(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  owner: User
  ownerBlue: User
  ownerRed: User
  positives(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  published: Boolean!
  redVotes(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  reports(after: String, before: String, first: Int, last: Int, orderBy: ReportOrderByInput, skip: Int, where: ReportWhereInput): [Report!]
  timelimit: DateTime
  timelimitString: String
  topComment: Comment
  type: DebateType!
  updatedAt: DateTime!
  winner: User
}

input DebateCreateInput {
  answerOne: String
  answerTwo: String
  blueVotes: UserCreateManyInput
  closed: Boolean
  comments: CommentCreateManyWithoutDebateInput
  content: String!
  crowned: Boolean
  id: ID
  image: String
  interactions: InteractionCreateManyWithoutDebateInput
  loser: UserCreateOneInput
  negatives: UserCreateManyInput
  owner: UserCreateOneWithoutDebatesInput
  ownerBlue: UserCreateOneWithoutDebatesBlueInput
  ownerRed: UserCreateOneWithoutDebatesRedInput
  positives: UserCreateManyInput
  published: Boolean
  redVotes: UserCreateManyInput
  reports: ReportCreateManyWithoutDebateInput
  timelimit: DateTime
  timelimitString: String
  topComment: CommentCreateOneInput
  type: DebateType!
  winner: UserCreateOneInput
}

input DebateCreateManyWithoutOwnerBlueInput {
  connect: [DebateWhereUniqueInput!]
  create: [DebateCreateWithoutOwnerBlueInput!]
}

input DebateCreateManyWithoutOwnerInput {
  connect: [DebateWhereUniqueInput!]
  create: [DebateCreateWithoutOwnerInput!]
}

input DebateCreateManyWithoutOwnerRedInput {
  connect: [DebateWhereUniqueInput!]
  create: [DebateCreateWithoutOwnerRedInput!]
}

input DebateCreateOneInput {
  connect: DebateWhereUniqueInput
  create: DebateCreateInput
}

input DebateCreateOneWithoutCommentsInput {
  connect: DebateWhereUniqueInput
  create: DebateCreateWithoutCommentsInput
}

input DebateCreateOneWithoutInteractionsInput {
  connect: DebateWhereUniqueInput
  create: DebateCreateWithoutInteractionsInput
}

input DebateCreateOneWithoutReportsInput {
  connect: DebateWhereUniqueInput
  create: DebateCreateWithoutReportsInput
}

input DebateCreateWithoutCommentsInput {
  answerOne: String
  answerTwo: String
  blueVotes: UserCreateManyInput
  closed: Boolean
  content: String!
  crowned: Boolean
  id: ID
  image: String
  interactions: InteractionCreateManyWithoutDebateInput
  loser: UserCreateOneInput
  negatives: UserCreateManyInput
  owner: UserCreateOneWithoutDebatesInput
  ownerBlue: UserCreateOneWithoutDebatesBlueInput
  ownerRed: UserCreateOneWithoutDebatesRedInput
  positives: UserCreateManyInput
  published: Boolean
  redVotes: UserCreateManyInput
  reports: ReportCreateManyWithoutDebateInput
  timelimit: DateTime
  timelimitString: String
  topComment: CommentCreateOneInput
  type: DebateType!
  winner: UserCreateOneInput
}

input DebateCreateWithoutInteractionsInput {
  answerOne: String
  answerTwo: String
  blueVotes: UserCreateManyInput
  closed: Boolean
  comments: CommentCreateManyWithoutDebateInput
  content: String!
  crowned: Boolean
  id: ID
  image: String
  loser: UserCreateOneInput
  negatives: UserCreateManyInput
  owner: UserCreateOneWithoutDebatesInput
  ownerBlue: UserCreateOneWithoutDebatesBlueInput
  ownerRed: UserCreateOneWithoutDebatesRedInput
  positives: UserCreateManyInput
  published: Boolean
  redVotes: UserCreateManyInput
  reports: ReportCreateManyWithoutDebateInput
  timelimit: DateTime
  timelimitString: String
  topComment: CommentCreateOneInput
  type: DebateType!
  winner: UserCreateOneInput
}

input DebateCreateWithoutOwnerBlueInput {
  answerOne: String
  answerTwo: String
  blueVotes: UserCreateManyInput
  closed: Boolean
  comments: CommentCreateManyWithoutDebateInput
  content: String!
  crowned: Boolean
  id: ID
  image: String
  interactions: InteractionCreateManyWithoutDebateInput
  loser: UserCreateOneInput
  negatives: UserCreateManyInput
  owner: UserCreateOneWithoutDebatesInput
  ownerRed: UserCreateOneWithoutDebatesRedInput
  positives: UserCreateManyInput
  published: Boolean
  redVotes: UserCreateManyInput
  reports: ReportCreateManyWithoutDebateInput
  timelimit: DateTime
  timelimitString: String
  topComment: CommentCreateOneInput
  type: DebateType!
  winner: UserCreateOneInput
}

input DebateCreateWithoutOwnerInput {
  answerOne: String
  answerTwo: String
  blueVotes: UserCreateManyInput
  closed: Boolean
  comments: CommentCreateManyWithoutDebateInput
  content: String!
  crowned: Boolean
  id: ID
  image: String
  interactions: InteractionCreateManyWithoutDebateInput
  loser: UserCreateOneInput
  negatives: UserCreateManyInput
  ownerBlue: UserCreateOneWithoutDebatesBlueInput
  ownerRed: UserCreateOneWithoutDebatesRedInput
  positives: UserCreateManyInput
  published: Boolean
  redVotes: UserCreateManyInput
  reports: ReportCreateManyWithoutDebateInput
  timelimit: DateTime
  timelimitString: String
  topComment: CommentCreateOneInput
  type: DebateType!
  winner: UserCreateOneInput
}

input DebateCreateWithoutOwnerRedInput {
  answerOne: String
  answerTwo: String
  blueVotes: UserCreateManyInput
  closed: Boolean
  comments: CommentCreateManyWithoutDebateInput
  content: String!
  crowned: Boolean
  id: ID
  image: String
  interactions: InteractionCreateManyWithoutDebateInput
  loser: UserCreateOneInput
  negatives: UserCreateManyInput
  owner: UserCreateOneWithoutDebatesInput
  ownerBlue: UserCreateOneWithoutDebatesBlueInput
  positives: UserCreateManyInput
  published: Boolean
  redVotes: UserCreateManyInput
  reports: ReportCreateManyWithoutDebateInput
  timelimit: DateTime
  timelimitString: String
  topComment: CommentCreateOneInput
  type: DebateType!
  winner: UserCreateOneInput
}

input DebateCreateWithoutReportsInput {
  answerOne: String
  answerTwo: String
  blueVotes: UserCreateManyInput
  closed: Boolean
  comments: CommentCreateManyWithoutDebateInput
  content: String!
  crowned: Boolean
  id: ID
  image: String
  interactions: InteractionCreateManyWithoutDebateInput
  loser: UserCreateOneInput
  negatives: UserCreateManyInput
  owner: UserCreateOneWithoutDebatesInput
  ownerBlue: UserCreateOneWithoutDebatesBlueInput
  ownerRed: UserCreateOneWithoutDebatesRedInput
  positives: UserCreateManyInput
  published: Boolean
  redVotes: UserCreateManyInput
  timelimit: DateTime
  timelimitString: String
  topComment: CommentCreateOneInput
  type: DebateType!
  winner: UserCreateOneInput
}

enum DebateOrderByInput {
  answerOne_ASC
  answerOne_DESC
  answerTwo_ASC
  answerTwo_DESC
  closed_ASC
  closed_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  crowned_ASC
  crowned_DESC
  id_ASC
  id_DESC
  image_ASC
  image_DESC
  published_ASC
  published_DESC
  timelimit_ASC
  timelimit_DESC
  timelimitString_ASC
  timelimitString_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input DebateScalarWhereInput {
  AND: [DebateScalarWhereInput!]
  answerOne: String
  answerOne_contains: String
  answerOne_ends_with: String
  answerOne_gt: String
  answerOne_gte: String
  answerOne_in: [String!]
  answerOne_lt: String
  answerOne_lte: String
  answerOne_not: String
  answerOne_not_contains: String
  answerOne_not_ends_with: String
  answerOne_not_in: [String!]
  answerOne_not_starts_with: String
  answerOne_starts_with: String
  answerTwo: String
  answerTwo_contains: String
  answerTwo_ends_with: String
  answerTwo_gt: String
  answerTwo_gte: String
  answerTwo_in: [String!]
  answerTwo_lt: String
  answerTwo_lte: String
  answerTwo_not: String
  answerTwo_not_contains: String
  answerTwo_not_ends_with: String
  answerTwo_not_in: [String!]
  answerTwo_not_starts_with: String
  answerTwo_starts_with: String
  closed: Boolean
  closed_not: Boolean
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  crowned: Boolean
  crowned_not: Boolean
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  image: String
  image_contains: String
  image_ends_with: String
  image_gt: String
  image_gte: String
  image_in: [String!]
  image_lt: String
  image_lte: String
  image_not: String
  image_not_contains: String
  image_not_ends_with: String
  image_not_in: [String!]
  image_not_starts_with: String
  image_starts_with: String
  NOT: [DebateScalarWhereInput!]
  OR: [DebateScalarWhereInput!]
  published: Boolean
  published_not: Boolean
  timelimit: DateTime
  timelimit_gt: DateTime
  timelimit_gte: DateTime
  timelimit_in: [DateTime!]
  timelimit_lt: DateTime
  timelimit_lte: DateTime
  timelimit_not: DateTime
  timelimit_not_in: [DateTime!]
  timelimitString: String
  timelimitString_contains: String
  timelimitString_ends_with: String
  timelimitString_gt: String
  timelimitString_gte: String
  timelimitString_in: [String!]
  timelimitString_lt: String
  timelimitString_lte: String
  timelimitString_not: String
  timelimitString_not_contains: String
  timelimitString_not_ends_with: String
  timelimitString_not_in: [String!]
  timelimitString_not_starts_with: String
  timelimitString_starts_with: String
  type: DebateType
  type_in: [DebateType!]
  type_not: DebateType
  type_not_in: [DebateType!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

enum DebateType {
  DUO
  MUDDLE
  STANDARD
}

input DebateUpdateDataInput {
  answerOne: String
  answerTwo: String
  blueVotes: UserUpdateManyInput
  closed: Boolean
  comments: CommentUpdateManyWithoutDebateInput
  content: String
  crowned: Boolean
  image: String
  interactions: InteractionUpdateManyWithoutDebateInput
  loser: UserUpdateOneInput
  negatives: UserUpdateManyInput
  owner: UserUpdateOneWithoutDebatesInput
  ownerBlue: UserUpdateOneWithoutDebatesBlueInput
  ownerRed: UserUpdateOneWithoutDebatesRedInput
  positives: UserUpdateManyInput
  published: Boolean
  redVotes: UserUpdateManyInput
  reports: ReportUpdateManyWithoutDebateInput
  timelimit: DateTime
  timelimitString: String
  topComment: CommentUpdateOneInput
  type: DebateType
  winner: UserUpdateOneInput
}

input DebateUpdateInput {
  answerOne: String
  answerTwo: String
  blueVotes: UserUpdateManyInput
  closed: Boolean
  comments: CommentUpdateManyWithoutDebateInput
  content: String
  crowned: Boolean
  image: String
  interactions: InteractionUpdateManyWithoutDebateInput
  loser: UserUpdateOneInput
  negatives: UserUpdateManyInput
  owner: UserUpdateOneWithoutDebatesInput
  ownerBlue: UserUpdateOneWithoutDebatesBlueInput
  ownerRed: UserUpdateOneWithoutDebatesRedInput
  positives: UserUpdateManyInput
  published: Boolean
  redVotes: UserUpdateManyInput
  reports: ReportUpdateManyWithoutDebateInput
  timelimit: DateTime
  timelimitString: String
  topComment: CommentUpdateOneInput
  type: DebateType
  winner: UserUpdateOneInput
}

input DebateUpdateManyDataInput {
  answerOne: String
  answerTwo: String
  closed: Boolean
  content: String
  crowned: Boolean
  image: String
  published: Boolean
  timelimit: DateTime
  timelimitString: String
  type: DebateType
}

input DebateUpdateManyWithoutOwnerBlueInput {
  connect: [DebateWhereUniqueInput!]
  create: [DebateCreateWithoutOwnerBlueInput!]
  delete: [DebateWhereUniqueInput!]
  deleteMany: [DebateScalarWhereInput!]
  disconnect: [DebateWhereUniqueInput!]
  set: [DebateWhereUniqueInput!]
  update: [DebateUpdateWithWhereUniqueWithoutOwnerBlueInput!]
  updateMany: [DebateUpdateManyWithWhereNestedInput!]
  upsert: [DebateUpsertWithWhereUniqueWithoutOwnerBlueInput!]
}

input DebateUpdateManyWithoutOwnerInput {
  connect: [DebateWhereUniqueInput!]
  create: [DebateCreateWithoutOwnerInput!]
  delete: [DebateWhereUniqueInput!]
  deleteMany: [DebateScalarWhereInput!]
  disconnect: [DebateWhereUniqueInput!]
  set: [DebateWhereUniqueInput!]
  update: [DebateUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [DebateUpdateManyWithWhereNestedInput!]
  upsert: [DebateUpsertWithWhereUniqueWithoutOwnerInput!]
}

input DebateUpdateManyWithoutOwnerRedInput {
  connect: [DebateWhereUniqueInput!]
  create: [DebateCreateWithoutOwnerRedInput!]
  delete: [DebateWhereUniqueInput!]
  deleteMany: [DebateScalarWhereInput!]
  disconnect: [DebateWhereUniqueInput!]
  set: [DebateWhereUniqueInput!]
  update: [DebateUpdateWithWhereUniqueWithoutOwnerRedInput!]
  updateMany: [DebateUpdateManyWithWhereNestedInput!]
  upsert: [DebateUpsertWithWhereUniqueWithoutOwnerRedInput!]
}

input DebateUpdateManyWithWhereNestedInput {
  data: DebateUpdateManyDataInput!
  where: DebateScalarWhereInput!
}

input DebateUpdateOneInput {
  connect: DebateWhereUniqueInput
  create: DebateCreateInput
  delete: Boolean
  disconnect: Boolean
  update: DebateUpdateDataInput
  upsert: DebateUpsertNestedInput
}

input DebateUpdateOneRequiredWithoutCommentsInput {
  connect: DebateWhereUniqueInput
  create: DebateCreateWithoutCommentsInput
  update: DebateUpdateWithoutCommentsDataInput
  upsert: DebateUpsertWithoutCommentsInput
}

input DebateUpdateOneWithoutInteractionsInput {
  connect: DebateWhereUniqueInput
  create: DebateCreateWithoutInteractionsInput
  delete: Boolean
  disconnect: Boolean
  update: DebateUpdateWithoutInteractionsDataInput
  upsert: DebateUpsertWithoutInteractionsInput
}

input DebateUpdateOneWithoutReportsInput {
  connect: DebateWhereUniqueInput
  create: DebateCreateWithoutReportsInput
  delete: Boolean
  disconnect: Boolean
  update: DebateUpdateWithoutReportsDataInput
  upsert: DebateUpsertWithoutReportsInput
}

input DebateUpdateWithoutCommentsDataInput {
  answerOne: String
  answerTwo: String
  blueVotes: UserUpdateManyInput
  closed: Boolean
  content: String
  crowned: Boolean
  image: String
  interactions: InteractionUpdateManyWithoutDebateInput
  loser: UserUpdateOneInput
  negatives: UserUpdateManyInput
  owner: UserUpdateOneWithoutDebatesInput
  ownerBlue: UserUpdateOneWithoutDebatesBlueInput
  ownerRed: UserUpdateOneWithoutDebatesRedInput
  positives: UserUpdateManyInput
  published: Boolean
  redVotes: UserUpdateManyInput
  reports: ReportUpdateManyWithoutDebateInput
  timelimit: DateTime
  timelimitString: String
  topComment: CommentUpdateOneInput
  type: DebateType
  winner: UserUpdateOneInput
}

input DebateUpdateWithoutInteractionsDataInput {
  answerOne: String
  answerTwo: String
  blueVotes: UserUpdateManyInput
  closed: Boolean
  comments: CommentUpdateManyWithoutDebateInput
  content: String
  crowned: Boolean
  image: String
  loser: UserUpdateOneInput
  negatives: UserUpdateManyInput
  owner: UserUpdateOneWithoutDebatesInput
  ownerBlue: UserUpdateOneWithoutDebatesBlueInput
  ownerRed: UserUpdateOneWithoutDebatesRedInput
  positives: UserUpdateManyInput
  published: Boolean
  redVotes: UserUpdateManyInput
  reports: ReportUpdateManyWithoutDebateInput
  timelimit: DateTime
  timelimitString: String
  topComment: CommentUpdateOneInput
  type: DebateType
  winner: UserUpdateOneInput
}

input DebateUpdateWithoutOwnerBlueDataInput {
  answerOne: String
  answerTwo: String
  blueVotes: UserUpdateManyInput
  closed: Boolean
  comments: CommentUpdateManyWithoutDebateInput
  content: String
  crowned: Boolean
  image: String
  interactions: InteractionUpdateManyWithoutDebateInput
  loser: UserUpdateOneInput
  negatives: UserUpdateManyInput
  owner: UserUpdateOneWithoutDebatesInput
  ownerRed: UserUpdateOneWithoutDebatesRedInput
  positives: UserUpdateManyInput
  published: Boolean
  redVotes: UserUpdateManyInput
  reports: ReportUpdateManyWithoutDebateInput
  timelimit: DateTime
  timelimitString: String
  topComment: CommentUpdateOneInput
  type: DebateType
  winner: UserUpdateOneInput
}

input DebateUpdateWithoutOwnerDataInput {
  answerOne: String
  answerTwo: String
  blueVotes: UserUpdateManyInput
  closed: Boolean
  comments: CommentUpdateManyWithoutDebateInput
  content: String
  crowned: Boolean
  image: String
  interactions: InteractionUpdateManyWithoutDebateInput
  loser: UserUpdateOneInput
  negatives: UserUpdateManyInput
  ownerBlue: UserUpdateOneWithoutDebatesBlueInput
  ownerRed: UserUpdateOneWithoutDebatesRedInput
  positives: UserUpdateManyInput
  published: Boolean
  redVotes: UserUpdateManyInput
  reports: ReportUpdateManyWithoutDebateInput
  timelimit: DateTime
  timelimitString: String
  topComment: CommentUpdateOneInput
  type: DebateType
  winner: UserUpdateOneInput
}

input DebateUpdateWithoutOwnerRedDataInput {
  answerOne: String
  answerTwo: String
  blueVotes: UserUpdateManyInput
  closed: Boolean
  comments: CommentUpdateManyWithoutDebateInput
  content: String
  crowned: Boolean
  image: String
  interactions: InteractionUpdateManyWithoutDebateInput
  loser: UserUpdateOneInput
  negatives: UserUpdateManyInput
  owner: UserUpdateOneWithoutDebatesInput
  ownerBlue: UserUpdateOneWithoutDebatesBlueInput
  positives: UserUpdateManyInput
  published: Boolean
  redVotes: UserUpdateManyInput
  reports: ReportUpdateManyWithoutDebateInput
  timelimit: DateTime
  timelimitString: String
  topComment: CommentUpdateOneInput
  type: DebateType
  winner: UserUpdateOneInput
}

input DebateUpdateWithoutReportsDataInput {
  answerOne: String
  answerTwo: String
  blueVotes: UserUpdateManyInput
  closed: Boolean
  comments: CommentUpdateManyWithoutDebateInput
  content: String
  crowned: Boolean
  image: String
  interactions: InteractionUpdateManyWithoutDebateInput
  loser: UserUpdateOneInput
  negatives: UserUpdateManyInput
  owner: UserUpdateOneWithoutDebatesInput
  ownerBlue: UserUpdateOneWithoutDebatesBlueInput
  ownerRed: UserUpdateOneWithoutDebatesRedInput
  positives: UserUpdateManyInput
  published: Boolean
  redVotes: UserUpdateManyInput
  timelimit: DateTime
  timelimitString: String
  topComment: CommentUpdateOneInput
  type: DebateType
  winner: UserUpdateOneInput
}

input DebateUpdateWithWhereUniqueWithoutOwnerBlueInput {
  data: DebateUpdateWithoutOwnerBlueDataInput!
  where: DebateWhereUniqueInput!
}

input DebateUpdateWithWhereUniqueWithoutOwnerInput {
  data: DebateUpdateWithoutOwnerDataInput!
  where: DebateWhereUniqueInput!
}

input DebateUpdateWithWhereUniqueWithoutOwnerRedInput {
  data: DebateUpdateWithoutOwnerRedDataInput!
  where: DebateWhereUniqueInput!
}

input DebateUpsertNestedInput {
  create: DebateCreateInput!
  update: DebateUpdateDataInput!
}

input DebateUpsertWithoutCommentsInput {
  create: DebateCreateWithoutCommentsInput!
  update: DebateUpdateWithoutCommentsDataInput!
}

input DebateUpsertWithoutInteractionsInput {
  create: DebateCreateWithoutInteractionsInput!
  update: DebateUpdateWithoutInteractionsDataInput!
}

input DebateUpsertWithoutReportsInput {
  create: DebateCreateWithoutReportsInput!
  update: DebateUpdateWithoutReportsDataInput!
}

input DebateUpsertWithWhereUniqueWithoutOwnerBlueInput {
  create: DebateCreateWithoutOwnerBlueInput!
  update: DebateUpdateWithoutOwnerBlueDataInput!
  where: DebateWhereUniqueInput!
}

input DebateUpsertWithWhereUniqueWithoutOwnerInput {
  create: DebateCreateWithoutOwnerInput!
  update: DebateUpdateWithoutOwnerDataInput!
  where: DebateWhereUniqueInput!
}

input DebateUpsertWithWhereUniqueWithoutOwnerRedInput {
  create: DebateCreateWithoutOwnerRedInput!
  update: DebateUpdateWithoutOwnerRedDataInput!
  where: DebateWhereUniqueInput!
}

input DebateWhereInput {
  AND: [DebateWhereInput!]
  answerOne: String
  answerOne_contains: String
  answerOne_ends_with: String
  answerOne_gt: String
  answerOne_gte: String
  answerOne_in: [String!]
  answerOne_lt: String
  answerOne_lte: String
  answerOne_not: String
  answerOne_not_contains: String
  answerOne_not_ends_with: String
  answerOne_not_in: [String!]
  answerOne_not_starts_with: String
  answerOne_starts_with: String
  answerTwo: String
  answerTwo_contains: String
  answerTwo_ends_with: String
  answerTwo_gt: String
  answerTwo_gte: String
  answerTwo_in: [String!]
  answerTwo_lt: String
  answerTwo_lte: String
  answerTwo_not: String
  answerTwo_not_contains: String
  answerTwo_not_ends_with: String
  answerTwo_not_in: [String!]
  answerTwo_not_starts_with: String
  answerTwo_starts_with: String
  blueVotes_some: UserWhereInput
  closed: Boolean
  closed_not: Boolean
  comments_some: CommentWhereInput
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  crowned: Boolean
  crowned_not: Boolean
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  image: String
  image_contains: String
  image_ends_with: String
  image_gt: String
  image_gte: String
  image_in: [String!]
  image_lt: String
  image_lte: String
  image_not: String
  image_not_contains: String
  image_not_ends_with: String
  image_not_in: [String!]
  image_not_starts_with: String
  image_starts_with: String
  interactions_some: InteractionWhereInput
  loser: UserWhereInput
  negatives_some: UserWhereInput
  owner: UserWhereInput
  ownerBlue: UserWhereInput
  ownerRed: UserWhereInput
  positives_some: UserWhereInput
  published: Boolean
  published_not: Boolean
  redVotes_some: UserWhereInput
  reports_some: ReportWhereInput
  timelimit: DateTime
  timelimit_gt: DateTime
  timelimit_gte: DateTime
  timelimit_in: [DateTime!]
  timelimit_lt: DateTime
  timelimit_lte: DateTime
  timelimit_not: DateTime
  timelimit_not_in: [DateTime!]
  timelimitString: String
  timelimitString_contains: String
  timelimitString_ends_with: String
  timelimitString_gt: String
  timelimitString_gte: String
  timelimitString_in: [String!]
  timelimitString_lt: String
  timelimitString_lte: String
  timelimitString_not: String
  timelimitString_not_contains: String
  timelimitString_not_ends_with: String
  timelimitString_not_in: [String!]
  timelimitString_not_starts_with: String
  timelimitString_starts_with: String
  topComment: CommentWhereInput
  type: DebateType
  type_in: [DebateType!]
  type_not: DebateType
  type_not_in: [DebateType!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  winner: UserWhereInput
}

input DebateWhereUniqueInput {
  id: ID
}

enum Gender {
  FEMALE
  MALE
  NO_INDICATION
}

enum GenderFilter {
  ALL
  FEMALE
  MALE
}

type Interaction {
  comment: Comment
  createdAt: DateTime!
  debate: Debate
  id: ID!
  type: InteractionType!
  updatedAt: DateTime!
  who: User!
}

input InteractionCreateInput {
  comment: CommentCreateOneInput
  debate: DebateCreateOneWithoutInteractionsInput
  id: ID
  type: InteractionType!
  who: UserCreateOneWithoutInteractionsInput!
}

input InteractionCreateManyWithoutDebateInput {
  connect: [InteractionWhereUniqueInput!]
  create: [InteractionCreateWithoutDebateInput!]
}

input InteractionCreateManyWithoutWhoInput {
  connect: [InteractionWhereUniqueInput!]
  create: [InteractionCreateWithoutWhoInput!]
}

input InteractionCreateWithoutDebateInput {
  comment: CommentCreateOneInput
  id: ID
  type: InteractionType!
  who: UserCreateOneWithoutInteractionsInput!
}

input InteractionCreateWithoutWhoInput {
  comment: CommentCreateOneInput
  debate: DebateCreateOneWithoutInteractionsInput
  id: ID
  type: InteractionType!
}

enum InteractionOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input InteractionScalarWhereInput {
  AND: [InteractionScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [InteractionScalarWhereInput!]
  OR: [InteractionScalarWhereInput!]
  type: InteractionType
  type_in: [InteractionType!]
  type_not: InteractionType
  type_not_in: [InteractionType!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

enum InteractionType {
  BLUE_VOTE
  COMMENT
  DISLIKE
  LIKE
  NEGATIVE_VOTE
  POSITIVE_VOTE
  RED_VOTE
}

input InteractionUpdateInput {
  comment: CommentUpdateOneInput
  debate: DebateUpdateOneWithoutInteractionsInput
  type: InteractionType
  who: UserUpdateOneRequiredWithoutInteractionsInput
}

input InteractionUpdateManyDataInput {
  type: InteractionType
}

input InteractionUpdateManyWithoutDebateInput {
  connect: [InteractionWhereUniqueInput!]
  create: [InteractionCreateWithoutDebateInput!]
  delete: [InteractionWhereUniqueInput!]
  deleteMany: [InteractionScalarWhereInput!]
  disconnect: [InteractionWhereUniqueInput!]
  set: [InteractionWhereUniqueInput!]
  update: [InteractionUpdateWithWhereUniqueWithoutDebateInput!]
  updateMany: [InteractionUpdateManyWithWhereNestedInput!]
  upsert: [InteractionUpsertWithWhereUniqueWithoutDebateInput!]
}

input InteractionUpdateManyWithoutWhoInput {
  connect: [InteractionWhereUniqueInput!]
  create: [InteractionCreateWithoutWhoInput!]
  delete: [InteractionWhereUniqueInput!]
  deleteMany: [InteractionScalarWhereInput!]
  disconnect: [InteractionWhereUniqueInput!]
  set: [InteractionWhereUniqueInput!]
  update: [InteractionUpdateWithWhereUniqueWithoutWhoInput!]
  updateMany: [InteractionUpdateManyWithWhereNestedInput!]
  upsert: [InteractionUpsertWithWhereUniqueWithoutWhoInput!]
}

input InteractionUpdateManyWithWhereNestedInput {
  data: InteractionUpdateManyDataInput!
  where: InteractionScalarWhereInput!
}

input InteractionUpdateWithoutDebateDataInput {
  comment: CommentUpdateOneInput
  type: InteractionType
  who: UserUpdateOneRequiredWithoutInteractionsInput
}

input InteractionUpdateWithoutWhoDataInput {
  comment: CommentUpdateOneInput
  debate: DebateUpdateOneWithoutInteractionsInput
  type: InteractionType
}

input InteractionUpdateWithWhereUniqueWithoutDebateInput {
  data: InteractionUpdateWithoutDebateDataInput!
  where: InteractionWhereUniqueInput!
}

input InteractionUpdateWithWhereUniqueWithoutWhoInput {
  data: InteractionUpdateWithoutWhoDataInput!
  where: InteractionWhereUniqueInput!
}

input InteractionUpsertWithWhereUniqueWithoutDebateInput {
  create: InteractionCreateWithoutDebateInput!
  update: InteractionUpdateWithoutDebateDataInput!
  where: InteractionWhereUniqueInput!
}

input InteractionUpsertWithWhereUniqueWithoutWhoInput {
  create: InteractionCreateWithoutWhoInput!
  update: InteractionUpdateWithoutWhoDataInput!
  where: InteractionWhereUniqueInput!
}

input InteractionWhereInput {
  AND: [InteractionWhereInput!]
  comment: CommentWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  debate: DebateWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  type: InteractionType
  type_in: [InteractionType!]
  type_not: InteractionType
  type_not_in: [InteractionType!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  who: UserWhereInput
}

input InteractionWhereUniqueInput {
  id: ID
}

enum Language {
  EN
  FR
}

scalar Long

type Message {
  content: String!
  conversation: Conversation!
  createdAt: DateTime!
  deleted: String
  from: User!
  id: ID!
  read: Boolean!
  to: User!
  updatedAt: DateTime!
}

input MessageCreateInput {
  content: String!
  conversation: ConversationCreateOneWithoutMessagesInput!
  deleted: String
  from: UserCreateOneInput!
  id: ID
  read: Boolean!
  to: UserCreateOneInput!
}

input MessageCreateManyWithoutConversationInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutConversationInput!]
}

input MessageCreateWithoutConversationInput {
  content: String!
  deleted: String
  from: UserCreateOneInput!
  id: ID
  read: Boolean!
  to: UserCreateOneInput!
}

enum MessageOrderByInput {
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  deleted_ASC
  deleted_DESC
  id_ASC
  id_DESC
  read_ASC
  read_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input MessageScalarWhereInput {
  AND: [MessageScalarWhereInput!]
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  deleted: String
  deleted_contains: String
  deleted_ends_with: String
  deleted_gt: String
  deleted_gte: String
  deleted_in: [String!]
  deleted_lt: String
  deleted_lte: String
  deleted_not: String
  deleted_not_contains: String
  deleted_not_ends_with: String
  deleted_not_in: [String!]
  deleted_not_starts_with: String
  deleted_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  read: Boolean
  read_not: Boolean
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

type MessageSubPayload {
  node: Message
  updatedFields: [String!]
}

input MessageUpdateInput {
  content: String
  conversation: ConversationUpdateOneRequiredWithoutMessagesInput
  deleted: String
  from: UserUpdateOneRequiredInput
  read: Boolean
  to: UserUpdateOneRequiredInput
}

input MessageUpdateManyDataInput {
  content: String
  deleted: String
  read: Boolean
}

input MessageUpdateManyMutationInput {
  content: String
  deleted: String
  read: Boolean
}

input MessageUpdateManyWithoutConversationInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutConversationInput!]
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutConversationInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutConversationInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  data: MessageUpdateManyDataInput!
  where: MessageScalarWhereInput!
}

input MessageUpdateWithoutConversationDataInput {
  content: String
  deleted: String
  from: UserUpdateOneRequiredInput
  read: Boolean
  to: UserUpdateOneRequiredInput
}

input MessageUpdateWithWhereUniqueWithoutConversationInput {
  data: MessageUpdateWithoutConversationDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithWhereUniqueWithoutConversationInput {
  create: MessageCreateWithoutConversationInput!
  update: MessageUpdateWithoutConversationDataInput!
  where: MessageWhereUniqueInput!
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  conversation: ConversationWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  deleted: String
  deleted_contains: String
  deleted_ends_with: String
  deleted_gt: String
  deleted_gte: String
  deleted_in: [String!]
  deleted_lt: String
  deleted_lte: String
  deleted_not: String
  deleted_not_contains: String
  deleted_not_ends_with: String
  deleted_not_in: [String!]
  deleted_not_starts_with: String
  deleted_starts_with: String
  from: UserWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  read: Boolean
  read_not: Boolean
  to: UserWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  askCloseDebate(debateId: ID, userId: String): Debate!
  askDeleteDebate(debateId: ID, userId: String): Debate!
  closeMyDebate(debateId: ID): Debate!
  createAd(data: AdCreateInput!): Ad!
  createAdTarget(data: AdTargetCreateInput!): AdTarget!
  createComment(data: CommentCreateInput!): Comment!
  createConversation(data: ConversationCreateInput!): Conversation!
  createDebate(data: DebateCreateInput!): Debate!
  createInteraction(data: InteractionCreateInput!): Interaction!
  createInvitationDuoDebate(answerOne: String, content: String, image: String, timelimit: String, user: ID): Debate!
  createMessage(data: MessageCreateInput!): Message!
  createNotification(data: NotificationCreateInput!): Notification!
  createPublicDebate(answerOne: String, answerTwo: String, content: String, image: String, timelimit: String): Debate!
  createReport(data: ReportCreateInput!): Report!
  createTrophy(data: TrophyCreateInput!): Trophy!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteDebate(where: DebateWhereUniqueInput!): Debate
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
  deleteMessages(messagesIdPayload: String): NoValue!
  deleteMyComment(commentId: ID): Comment!
  deleteMyDebate(debateId: ID): Debate!
  deleteThisConversation(conversationId: ID): NoValue!
  dislikeComment(commentId: ID, userId: ID): Comment!
  likeComment(commentId: ID, userId: ID): Comment!
  notifyComment(debateId: ID): NoValue!
  notifySubComment(commentId: ID, debateId: ID): NoValue!
  publishDuoDebate(answerTwo: String, debateId: ID, timelimit: String): Debate!
  sendVote(debateId: ID, type: String, userId: ID): Debate!
  signUp(birthdate: DateTime, email: String, firstname: String, lastname: String, password: String): Token!
  updateAd(data: AdUpdateInput!, where: AdWhereUniqueInput!): Ad
  updateAdTarget(data: AdTargetUpdateInput!, where: AdTargetWhereUniqueInput!): AdTarget
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateConversation(data: ConversationUpdateInput!, where: ConversationWhereUniqueInput!): Conversation
  updateDebate(data: DebateUpdateInput!, where: DebateWhereUniqueInput!): Debate
  updateInteraction(data: InteractionUpdateInput!, where: InteractionWhereUniqueInput!): Interaction
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  updateManyNotifications(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): BatchPayload!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateReport(data: ReportUpdateInput!, where: ReportWhereUniqueInput!): Report
  updateTrophy(data: TrophyUpdateInput!, where: TrophyWhereUniqueInput!): Trophy
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

type NewNotifications {
  messages: Int!
  notifications: Int!
}

type Notification {
  comment: Comment
  createdAt: DateTime!
  debate: Debate
  id: ID!
  new: Boolean!
  status: NotificationStatus!
  type: NotificationType!
  updatedAt: DateTime!
  userId: String!
  who(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
}

input NotificationCreateInput {
  comment: CommentCreateOneInput
  debate: DebateCreateOneInput
  id: ID
  new: Boolean!
  status: NotificationStatus!
  type: NotificationType!
  userId: String!
  who: UserCreateManyWithoutNotificationsInput
}

input NotificationCreateManyWithoutWhoInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutWhoInput!]
}

input NotificationCreateWithoutWhoInput {
  comment: CommentCreateOneInput
  debate: DebateCreateOneInput
  id: ID
  new: Boolean!
  status: NotificationStatus!
  type: NotificationType!
  userId: String!
}

enum NotificationOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  new_ASC
  new_DESC
  status_ASC
  status_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
}

input NotificationScalarWhereInput {
  AND: [NotificationScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  new: Boolean
  new_not: Boolean
  NOT: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  status: NotificationStatus
  status_in: [NotificationStatus!]
  status_not: NotificationStatus
  status_not_in: [NotificationStatus!]
  type: NotificationType
  type_in: [NotificationType!]
  type_not: NotificationType
  type_not_in: [NotificationType!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  userId: String
  userId_contains: String
  userId_ends_with: String
  userId_gt: String
  userId_gte: String
  userId_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_not: String
  userId_not_contains: String
  userId_not_ends_with: String
  userId_not_in: [String!]
  userId_not_starts_with: String
  userId_starts_with: String
}

enum NotificationStatus {
  ACCEPTED
  DECLINED
  INFORMATION
  PENDING
}

type NotificationSubPayload {
  node: Notification
  updatedFields: [String!]
}

enum NotificationType {
  ACCEPT_CLOSE_DEBATE
  ACCEPT_DELETE_DEBATE
  ACCEPT_DUO
  CLOSE_DEBATE
  COMMENT
  DELETE_DEBATE
  DISLIKE
  INVITATION_DUO
  LIKE
  REJECT_CLOSE_DEBATE
  REJECT_DELETE_DEBATE
  REJECT_DUO
  SUBCOMMENT
  VOTE
}

input NotificationUpdateInput {
  comment: CommentUpdateOneInput
  debate: DebateUpdateOneInput
  new: Boolean
  status: NotificationStatus
  type: NotificationType
  userId: String
  who: UserUpdateManyWithoutNotificationsInput
}

input NotificationUpdateManyDataInput {
  new: Boolean
  status: NotificationStatus
  type: NotificationType
  userId: String
}

input NotificationUpdateManyMutationInput {
  new: Boolean
  status: NotificationStatus
  type: NotificationType
  userId: String
}

input NotificationUpdateManyWithoutWhoInput {
  connect: [NotificationWhereUniqueInput!]
  create: [NotificationCreateWithoutWhoInput!]
  delete: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutWhoInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutWhoInput!]
}

input NotificationUpdateManyWithWhereNestedInput {
  data: NotificationUpdateManyDataInput!
  where: NotificationScalarWhereInput!
}

input NotificationUpdateWithoutWhoDataInput {
  comment: CommentUpdateOneInput
  debate: DebateUpdateOneInput
  new: Boolean
  status: NotificationStatus
  type: NotificationType
  userId: String
}

input NotificationUpdateWithWhereUniqueWithoutWhoInput {
  data: NotificationUpdateWithoutWhoDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpsertWithWhereUniqueWithoutWhoInput {
  create: NotificationCreateWithoutWhoInput!
  update: NotificationUpdateWithoutWhoDataInput!
  where: NotificationWhereUniqueInput!
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  comment: CommentWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  debate: DebateWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  new: Boolean
  new_not: Boolean
  status: NotificationStatus
  status_in: [NotificationStatus!]
  status_not: NotificationStatus
  status_not_in: [NotificationStatus!]
  type: NotificationType
  type_in: [NotificationType!]
  type_not: NotificationType
  type_not_in: [NotificationType!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  userId: String
  userId_contains: String
  userId_ends_with: String
  userId_gt: String
  userId_gte: String
  userId_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_not: String
  userId_not_contains: String
  userId_not_ends_with: String
  userId_not_in: [String!]
  userId_not_starts_with: String
  userId_starts_with: String
  who_some: UserWhereInput
}

input NotificationWhereUniqueInput {
  id: ID
}

type NoValue {
  value: Int!
}

type Query {
  ad(where: AdWhereUniqueInput!): Ad
  ads(after: String, before: String, first: Int, last: Int, orderBy: AdOrderByInput, skip: Int, where: AdWhereInput): [Ad!]!
  adTarget(where: AdTargetWhereUniqueInput!): AdTarget
  adTargets(after: String, before: String, first: Int, last: Int, orderBy: AdTargetOrderByInput, skip: Int, where: AdTargetWhereInput): [AdTarget!]!
  bestDebates(first: Int, skip: Int): [Debate!]!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(after: String, before: String, first: Int, last: Int, orderBy: CommentOrderByInput, skip: Int, where: CommentWhereInput): [Comment!]!
  conversation(where: ConversationWhereUniqueInput!): Conversation
  conversations(after: String, before: String, first: Int, last: Int, orderBy: ConversationOrderByInput, skip: Int, where: ConversationWhereInput): [Conversation!]!
  currentUser: User!
  debate(where: DebateWhereUniqueInput!): Debate
  debates(after: String, before: String, first: Int, last: Int, orderBy: DebateOrderByInput, skip: Int, where: DebateWhereInput): [Debate!]!
  homeDebates(first: Int, skip: Int): [Debate!]!
  interaction(where: InteractionWhereUniqueInput!): Interaction
  interactions(after: String, before: String, first: Int, last: Int, orderBy: InteractionOrderByInput, skip: Int, where: InteractionWhereInput): [Interaction!]!
  message(where: MessageWhereUniqueInput!): Message
  messages(after: String, before: String, first: Int, last: Int, orderBy: MessageOrderByInput, skip: Int, where: MessageWhereInput): [Message!]!
  myDebates(first: Int, skip: Int): [Debate!]!
  newNotifications: NewNotifications!
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(after: String, before: String, first: Int, last: Int, orderBy: NotificationOrderByInput, skip: Int, where: NotificationWhereInput): [Notification!]!
  ownerDebates(first: Int, skip: Int, userId: ID): [Debate!]!
  report(where: ReportWhereUniqueInput!): Report
  reports(after: String, before: String, first: Int, last: Int, orderBy: ReportOrderByInput, skip: Int, where: ReportWhereInput): [Report!]!
  signIn(email: String, password: String): Token!
  trophies(after: String, before: String, first: Int, last: Int, orderBy: TrophyOrderByInput, skip: Int, where: TrophyWhereInput): [Trophy!]!
  trophy(where: TrophyWhereUniqueInput!): Trophy
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
}

type Report {
  comment: Comment
  createdAt: DateTime!
  debate: Debate
  from: User
  id: ID!
  reason: ReportReason!
  reasonText: String
  to: User
  treated: Boolean!
  type: ReportType!
  updatedAt: DateTime!
}

input ReportCreateInput {
  comment: CommentCreateOneWithoutReportsInput
  debate: DebateCreateOneWithoutReportsInput
  from: UserCreateOneInput
  id: ID
  reason: ReportReason!
  reasonText: String
  to: UserCreateOneInput
  treated: Boolean
  type: ReportType!
}

input ReportCreateManyWithoutCommentInput {
  connect: [ReportWhereUniqueInput!]
  create: [ReportCreateWithoutCommentInput!]
}

input ReportCreateManyWithoutDebateInput {
  connect: [ReportWhereUniqueInput!]
  create: [ReportCreateWithoutDebateInput!]
}

input ReportCreateWithoutCommentInput {
  debate: DebateCreateOneWithoutReportsInput
  from: UserCreateOneInput
  id: ID
  reason: ReportReason!
  reasonText: String
  to: UserCreateOneInput
  treated: Boolean
  type: ReportType!
}

input ReportCreateWithoutDebateInput {
  comment: CommentCreateOneWithoutReportsInput
  from: UserCreateOneInput
  id: ID
  reason: ReportReason!
  reasonText: String
  to: UserCreateOneInput
  treated: Boolean
  type: ReportType!
}

enum ReportOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  reason_ASC
  reason_DESC
  reasonText_ASC
  reasonText_DESC
  treated_ASC
  treated_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum ReportReason {
  INSULT
  PORNOGRAPHY
  RACISM
  SEXISM
  VIOLENCE
}

input ReportScalarWhereInput {
  AND: [ReportScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [ReportScalarWhereInput!]
  OR: [ReportScalarWhereInput!]
  reason: ReportReason
  reason_in: [ReportReason!]
  reason_not: ReportReason
  reason_not_in: [ReportReason!]
  reasonText: String
  reasonText_contains: String
  reasonText_ends_with: String
  reasonText_gt: String
  reasonText_gte: String
  reasonText_in: [String!]
  reasonText_lt: String
  reasonText_lte: String
  reasonText_not: String
  reasonText_not_contains: String
  reasonText_not_ends_with: String
  reasonText_not_in: [String!]
  reasonText_not_starts_with: String
  reasonText_starts_with: String
  treated: Boolean
  treated_not: Boolean
  type: ReportType
  type_in: [ReportType!]
  type_not: ReportType
  type_not_in: [ReportType!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

enum ReportType {
  COMMENT
  DEBATE
}

input ReportUpdateInput {
  comment: CommentUpdateOneWithoutReportsInput
  debate: DebateUpdateOneWithoutReportsInput
  from: UserUpdateOneInput
  reason: ReportReason
  reasonText: String
  to: UserUpdateOneInput
  treated: Boolean
  type: ReportType
}

input ReportUpdateManyDataInput {
  reason: ReportReason
  reasonText: String
  treated: Boolean
  type: ReportType
}

input ReportUpdateManyWithoutCommentInput {
  connect: [ReportWhereUniqueInput!]
  create: [ReportCreateWithoutCommentInput!]
  delete: [ReportWhereUniqueInput!]
  deleteMany: [ReportScalarWhereInput!]
  disconnect: [ReportWhereUniqueInput!]
  set: [ReportWhereUniqueInput!]
  update: [ReportUpdateWithWhereUniqueWithoutCommentInput!]
  updateMany: [ReportUpdateManyWithWhereNestedInput!]
  upsert: [ReportUpsertWithWhereUniqueWithoutCommentInput!]
}

input ReportUpdateManyWithoutDebateInput {
  connect: [ReportWhereUniqueInput!]
  create: [ReportCreateWithoutDebateInput!]
  delete: [ReportWhereUniqueInput!]
  deleteMany: [ReportScalarWhereInput!]
  disconnect: [ReportWhereUniqueInput!]
  set: [ReportWhereUniqueInput!]
  update: [ReportUpdateWithWhereUniqueWithoutDebateInput!]
  updateMany: [ReportUpdateManyWithWhereNestedInput!]
  upsert: [ReportUpsertWithWhereUniqueWithoutDebateInput!]
}

input ReportUpdateManyWithWhereNestedInput {
  data: ReportUpdateManyDataInput!
  where: ReportScalarWhereInput!
}

input ReportUpdateWithoutCommentDataInput {
  debate: DebateUpdateOneWithoutReportsInput
  from: UserUpdateOneInput
  reason: ReportReason
  reasonText: String
  to: UserUpdateOneInput
  treated: Boolean
  type: ReportType
}

input ReportUpdateWithoutDebateDataInput {
  comment: CommentUpdateOneWithoutReportsInput
  from: UserUpdateOneInput
  reason: ReportReason
  reasonText: String
  to: UserUpdateOneInput
  treated: Boolean
  type: ReportType
}

input ReportUpdateWithWhereUniqueWithoutCommentInput {
  data: ReportUpdateWithoutCommentDataInput!
  where: ReportWhereUniqueInput!
}

input ReportUpdateWithWhereUniqueWithoutDebateInput {
  data: ReportUpdateWithoutDebateDataInput!
  where: ReportWhereUniqueInput!
}

input ReportUpsertWithWhereUniqueWithoutCommentInput {
  create: ReportCreateWithoutCommentInput!
  update: ReportUpdateWithoutCommentDataInput!
  where: ReportWhereUniqueInput!
}

input ReportUpsertWithWhereUniqueWithoutDebateInput {
  create: ReportCreateWithoutDebateInput!
  update: ReportUpdateWithoutDebateDataInput!
  where: ReportWhereUniqueInput!
}

input ReportWhereInput {
  AND: [ReportWhereInput!]
  comment: CommentWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  debate: DebateWhereInput
  from: UserWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  reason: ReportReason
  reason_in: [ReportReason!]
  reason_not: ReportReason
  reason_not_in: [ReportReason!]
  reasonText: String
  reasonText_contains: String
  reasonText_ends_with: String
  reasonText_gt: String
  reasonText_gte: String
  reasonText_in: [String!]
  reasonText_lt: String
  reasonText_lte: String
  reasonText_not: String
  reasonText_not_contains: String
  reasonText_not_ends_with: String
  reasonText_not_in: [String!]
  reasonText_not_starts_with: String
  reasonText_starts_with: String
  to: UserWhereInput
  treated: Boolean
  treated_not: Boolean
  type: ReportType
  type_in: [ReportType!]
  type_not: ReportType
  type_not_in: [ReportType!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input ReportWhereUniqueInput {
  id: ID
}

enum Role {
  ADMIN
  MODERATOR
  MUDDLE
  STANDARD
}

type Subscription {
  comment(debateId: String): CommentSubPayload!
  conversation(userId: String): ConversationSubPayload!
  message(conversationId: String, userId: String): MessageSubPayload!
  notification(userId: String): NotificationSubPayload!
}

enum Theme {
  DARK
  LIGHT
}

type Token {
  token: String!
}

type Trophy {
  comment: Comment
  createdAt: DateTime!
  debate: Debate
  id: ID!
  type: TrophyType
  updatedAt: DateTime!
  user: User!
  won: Boolean!
}

input TrophyCreateInput {
  comment: CommentCreateOneInput
  debate: DebateCreateOneInput
  id: ID
  type: TrophyType
  user: UserCreateOneWithoutTrophiesInput!
  won: Boolean!
}

input TrophyCreateManyWithoutUserInput {
  connect: [TrophyWhereUniqueInput!]
  create: [TrophyCreateWithoutUserInput!]
}

input TrophyCreateWithoutUserInput {
  comment: CommentCreateOneInput
  debate: DebateCreateOneInput
  id: ID
  type: TrophyType
  won: Boolean!
}

enum TrophyOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  won_ASC
  won_DESC
}

input TrophyScalarWhereInput {
  AND: [TrophyScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [TrophyScalarWhereInput!]
  OR: [TrophyScalarWhereInput!]
  type: TrophyType
  type_in: [TrophyType!]
  type_not: TrophyType
  type_not_in: [TrophyType!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  won: Boolean
  won_not: Boolean
}

enum TrophyType {
  DUO
  TOP_COMMENT
}

input TrophyUpdateInput {
  comment: CommentUpdateOneInput
  debate: DebateUpdateOneInput
  type: TrophyType
  user: UserUpdateOneRequiredWithoutTrophiesInput
  won: Boolean
}

input TrophyUpdateManyDataInput {
  type: TrophyType
  won: Boolean
}

input TrophyUpdateManyWithoutUserInput {
  connect: [TrophyWhereUniqueInput!]
  create: [TrophyCreateWithoutUserInput!]
  delete: [TrophyWhereUniqueInput!]
  deleteMany: [TrophyScalarWhereInput!]
  disconnect: [TrophyWhereUniqueInput!]
  set: [TrophyWhereUniqueInput!]
  update: [TrophyUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TrophyUpdateManyWithWhereNestedInput!]
  upsert: [TrophyUpsertWithWhereUniqueWithoutUserInput!]
}

input TrophyUpdateManyWithWhereNestedInput {
  data: TrophyUpdateManyDataInput!
  where: TrophyScalarWhereInput!
}

input TrophyUpdateWithoutUserDataInput {
  comment: CommentUpdateOneInput
  debate: DebateUpdateOneInput
  type: TrophyType
  won: Boolean
}

input TrophyUpdateWithWhereUniqueWithoutUserInput {
  data: TrophyUpdateWithoutUserDataInput!
  where: TrophyWhereUniqueInput!
}

input TrophyUpsertWithWhereUniqueWithoutUserInput {
  create: TrophyCreateWithoutUserInput!
  update: TrophyUpdateWithoutUserDataInput!
  where: TrophyWhereUniqueInput!
}

input TrophyWhereInput {
  AND: [TrophyWhereInput!]
  comment: CommentWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  debate: DebateWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  type: TrophyType
  type_in: [TrophyType!]
  type_not: TrophyType
  type_not_in: [TrophyType!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  user: UserWhereInput
  won: Boolean
  won_not: Boolean
}

input TrophyWhereUniqueInput {
  id: ID
}

type User {
  bio: String
  birthdate: DateTime!
  blocked(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  blocking(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  certified: Boolean!
  conversations(after: String, before: String, first: Int, last: Int, orderBy: ConversationOrderByInput, skip: Int, where: ConversationWhereInput): [Conversation!]
  coverPicture: String
  createdAt: DateTime!
  crowned: Boolean!
  debates(after: String, before: String, first: Int, last: Int, orderBy: DebateOrderByInput, skip: Int, where: DebateWhereInput): [Debate!]
  debatesBlue(after: String, before: String, first: Int, last: Int, orderBy: DebateOrderByInput, skip: Int, where: DebateWhereInput): [Debate!]
  debatesRed(after: String, before: String, first: Int, last: Int, orderBy: DebateOrderByInput, skip: Int, where: DebateWhereInput): [Debate!]
  email: String!
  firstname: String!
  followers(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  following(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  gender: Gender!
  id: ID!
  interactions(after: String, before: String, first: Int, last: Int, orderBy: InteractionOrderByInput, skip: Int, where: InteractionWhereInput): [Interaction!]
  language: Language!
  lastConnected: DateTime
  lastname: String!
  notifications(after: String, before: String, first: Int, last: Int, orderBy: NotificationOrderByInput, skip: Int, where: NotificationWhereInput): [Notification!]
  password: String!
  private: Boolean!
  profilePicture: String
  role: Role!
  theme: Theme!
  trophies(after: String, before: String, first: Int, last: Int, orderBy: TrophyOrderByInput, skip: Int, where: TrophyWhereInput): [Trophy!]
  updatedAt: DateTime!
}

input UserCreateInput {
  bio: String
  birthdate: DateTime!
  blocked: UserCreateManyWithoutBlockingInput
  blocking: UserCreateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationCreateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateCreateManyWithoutOwnerInput
  debatesBlue: DebateCreateManyWithoutOwnerBlueInput
  debatesRed: DebateCreateManyWithoutOwnerRedInput
  email: String!
  firstname: String!
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  gender: Gender
  id: ID
  interactions: InteractionCreateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String!
  notifications: NotificationCreateManyWithoutWhoInput
  password: String!
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyCreateManyWithoutUserInput
}

input UserCreateManyInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
}

input UserCreateManyWithoutBlockedInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutBlockedInput!]
}

input UserCreateManyWithoutBlockingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutBlockingInput!]
}

input UserCreateManyWithoutConversationsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutConversationsInput!]
}

input UserCreateManyWithoutFollowersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowersInput!]
}

input UserCreateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowingInput!]
}

input UserCreateManyWithoutNotificationsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutNotificationsInput!]
}

input UserCreateOneInput {
  connect: UserWhereUniqueInput
  create: UserCreateInput
}

input UserCreateOneWithoutDebatesBlueInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDebatesBlueInput
}

input UserCreateOneWithoutDebatesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDebatesInput
}

input UserCreateOneWithoutDebatesRedInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDebatesRedInput
}

input UserCreateOneWithoutInteractionsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutInteractionsInput
}

input UserCreateOneWithoutTrophiesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTrophiesInput
}

input UserCreateWithoutBlockedInput {
  bio: String
  birthdate: DateTime!
  blocking: UserCreateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationCreateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateCreateManyWithoutOwnerInput
  debatesBlue: DebateCreateManyWithoutOwnerBlueInput
  debatesRed: DebateCreateManyWithoutOwnerRedInput
  email: String!
  firstname: String!
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  gender: Gender
  id: ID
  interactions: InteractionCreateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String!
  notifications: NotificationCreateManyWithoutWhoInput
  password: String!
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyCreateManyWithoutUserInput
}

input UserCreateWithoutBlockingInput {
  bio: String
  birthdate: DateTime!
  blocked: UserCreateManyWithoutBlockingInput
  certified: Boolean
  conversations: ConversationCreateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateCreateManyWithoutOwnerInput
  debatesBlue: DebateCreateManyWithoutOwnerBlueInput
  debatesRed: DebateCreateManyWithoutOwnerRedInput
  email: String!
  firstname: String!
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  gender: Gender
  id: ID
  interactions: InteractionCreateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String!
  notifications: NotificationCreateManyWithoutWhoInput
  password: String!
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyCreateManyWithoutUserInput
}

input UserCreateWithoutConversationsInput {
  bio: String
  birthdate: DateTime!
  blocked: UserCreateManyWithoutBlockingInput
  blocking: UserCreateManyWithoutBlockedInput
  certified: Boolean
  coverPicture: String
  crowned: Boolean
  debates: DebateCreateManyWithoutOwnerInput
  debatesBlue: DebateCreateManyWithoutOwnerBlueInput
  debatesRed: DebateCreateManyWithoutOwnerRedInput
  email: String!
  firstname: String!
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  gender: Gender
  id: ID
  interactions: InteractionCreateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String!
  notifications: NotificationCreateManyWithoutWhoInput
  password: String!
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyCreateManyWithoutUserInput
}

input UserCreateWithoutDebatesBlueInput {
  bio: String
  birthdate: DateTime!
  blocked: UserCreateManyWithoutBlockingInput
  blocking: UserCreateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationCreateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateCreateManyWithoutOwnerInput
  debatesRed: DebateCreateManyWithoutOwnerRedInput
  email: String!
  firstname: String!
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  gender: Gender
  id: ID
  interactions: InteractionCreateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String!
  notifications: NotificationCreateManyWithoutWhoInput
  password: String!
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyCreateManyWithoutUserInput
}

input UserCreateWithoutDebatesInput {
  bio: String
  birthdate: DateTime!
  blocked: UserCreateManyWithoutBlockingInput
  blocking: UserCreateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationCreateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debatesBlue: DebateCreateManyWithoutOwnerBlueInput
  debatesRed: DebateCreateManyWithoutOwnerRedInput
  email: String!
  firstname: String!
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  gender: Gender
  id: ID
  interactions: InteractionCreateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String!
  notifications: NotificationCreateManyWithoutWhoInput
  password: String!
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyCreateManyWithoutUserInput
}

input UserCreateWithoutDebatesRedInput {
  bio: String
  birthdate: DateTime!
  blocked: UserCreateManyWithoutBlockingInput
  blocking: UserCreateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationCreateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateCreateManyWithoutOwnerInput
  debatesBlue: DebateCreateManyWithoutOwnerBlueInput
  email: String!
  firstname: String!
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  gender: Gender
  id: ID
  interactions: InteractionCreateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String!
  notifications: NotificationCreateManyWithoutWhoInput
  password: String!
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyCreateManyWithoutUserInput
}

input UserCreateWithoutFollowersInput {
  bio: String
  birthdate: DateTime!
  blocked: UserCreateManyWithoutBlockingInput
  blocking: UserCreateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationCreateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateCreateManyWithoutOwnerInput
  debatesBlue: DebateCreateManyWithoutOwnerBlueInput
  debatesRed: DebateCreateManyWithoutOwnerRedInput
  email: String!
  firstname: String!
  following: UserCreateManyWithoutFollowersInput
  gender: Gender
  id: ID
  interactions: InteractionCreateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String!
  notifications: NotificationCreateManyWithoutWhoInput
  password: String!
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyCreateManyWithoutUserInput
}

input UserCreateWithoutFollowingInput {
  bio: String
  birthdate: DateTime!
  blocked: UserCreateManyWithoutBlockingInput
  blocking: UserCreateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationCreateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateCreateManyWithoutOwnerInput
  debatesBlue: DebateCreateManyWithoutOwnerBlueInput
  debatesRed: DebateCreateManyWithoutOwnerRedInput
  email: String!
  firstname: String!
  followers: UserCreateManyWithoutFollowingInput
  gender: Gender
  id: ID
  interactions: InteractionCreateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String!
  notifications: NotificationCreateManyWithoutWhoInput
  password: String!
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyCreateManyWithoutUserInput
}

input UserCreateWithoutInteractionsInput {
  bio: String
  birthdate: DateTime!
  blocked: UserCreateManyWithoutBlockingInput
  blocking: UserCreateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationCreateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateCreateManyWithoutOwnerInput
  debatesBlue: DebateCreateManyWithoutOwnerBlueInput
  debatesRed: DebateCreateManyWithoutOwnerRedInput
  email: String!
  firstname: String!
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  gender: Gender
  id: ID
  language: Language
  lastConnected: DateTime
  lastname: String!
  notifications: NotificationCreateManyWithoutWhoInput
  password: String!
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyCreateManyWithoutUserInput
}

input UserCreateWithoutNotificationsInput {
  bio: String
  birthdate: DateTime!
  blocked: UserCreateManyWithoutBlockingInput
  blocking: UserCreateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationCreateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateCreateManyWithoutOwnerInput
  debatesBlue: DebateCreateManyWithoutOwnerBlueInput
  debatesRed: DebateCreateManyWithoutOwnerRedInput
  email: String!
  firstname: String!
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  gender: Gender
  id: ID
  interactions: InteractionCreateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String!
  password: String!
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyCreateManyWithoutUserInput
}

input UserCreateWithoutTrophiesInput {
  bio: String
  birthdate: DateTime!
  blocked: UserCreateManyWithoutBlockingInput
  blocking: UserCreateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationCreateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateCreateManyWithoutOwnerInput
  debatesBlue: DebateCreateManyWithoutOwnerBlueInput
  debatesRed: DebateCreateManyWithoutOwnerRedInput
  email: String!
  firstname: String!
  followers: UserCreateManyWithoutFollowingInput
  following: UserCreateManyWithoutFollowersInput
  gender: Gender
  id: ID
  interactions: InteractionCreateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String!
  notifications: NotificationCreateManyWithoutWhoInput
  password: String!
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
}

enum UserOrderByInput {
  bio_ASC
  bio_DESC
  birthdate_ASC
  birthdate_DESC
  certified_ASC
  certified_DESC
  coverPicture_ASC
  coverPicture_DESC
  createdAt_ASC
  createdAt_DESC
  crowned_ASC
  crowned_DESC
  email_ASC
  email_DESC
  firstname_ASC
  firstname_DESC
  gender_ASC
  gender_DESC
  id_ASC
  id_DESC
  language_ASC
  language_DESC
  lastConnected_ASC
  lastConnected_DESC
  lastname_ASC
  lastname_DESC
  password_ASC
  password_DESC
  private_ASC
  private_DESC
  profilePicture_ASC
  profilePicture_DESC
  role_ASC
  role_DESC
  theme_ASC
  theme_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  bio: String
  bio_contains: String
  bio_ends_with: String
  bio_gt: String
  bio_gte: String
  bio_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_not: String
  bio_not_contains: String
  bio_not_ends_with: String
  bio_not_in: [String!]
  bio_not_starts_with: String
  bio_starts_with: String
  birthdate: DateTime
  birthdate_gt: DateTime
  birthdate_gte: DateTime
  birthdate_in: [DateTime!]
  birthdate_lt: DateTime
  birthdate_lte: DateTime
  birthdate_not: DateTime
  birthdate_not_in: [DateTime!]
  certified: Boolean
  certified_not: Boolean
  coverPicture: String
  coverPicture_contains: String
  coverPicture_ends_with: String
  coverPicture_gt: String
  coverPicture_gte: String
  coverPicture_in: [String!]
  coverPicture_lt: String
  coverPicture_lte: String
  coverPicture_not: String
  coverPicture_not_contains: String
  coverPicture_not_ends_with: String
  coverPicture_not_in: [String!]
  coverPicture_not_starts_with: String
  coverPicture_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  crowned: Boolean
  crowned_not: Boolean
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  firstname: String
  firstname_contains: String
  firstname_ends_with: String
  firstname_gt: String
  firstname_gte: String
  firstname_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_not: String
  firstname_not_contains: String
  firstname_not_ends_with: String
  firstname_not_in: [String!]
  firstname_not_starts_with: String
  firstname_starts_with: String
  gender: Gender
  gender_in: [Gender!]
  gender_not: Gender
  gender_not_in: [Gender!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  language: Language
  language_in: [Language!]
  language_not: Language
  language_not_in: [Language!]
  lastConnected: DateTime
  lastConnected_gt: DateTime
  lastConnected_gte: DateTime
  lastConnected_in: [DateTime!]
  lastConnected_lt: DateTime
  lastConnected_lte: DateTime
  lastConnected_not: DateTime
  lastConnected_not_in: [DateTime!]
  lastname: String
  lastname_contains: String
  lastname_ends_with: String
  lastname_gt: String
  lastname_gte: String
  lastname_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_not: String
  lastname_not_contains: String
  lastname_not_ends_with: String
  lastname_not_in: [String!]
  lastname_not_starts_with: String
  lastname_starts_with: String
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  private: Boolean
  private_not: Boolean
  profilePicture: String
  profilePicture_contains: String
  profilePicture_ends_with: String
  profilePicture_gt: String
  profilePicture_gte: String
  profilePicture_in: [String!]
  profilePicture_lt: String
  profilePicture_lte: String
  profilePicture_not: String
  profilePicture_not_contains: String
  profilePicture_not_ends_with: String
  profilePicture_not_in: [String!]
  profilePicture_not_starts_with: String
  profilePicture_starts_with: String
  role: Role
  role_in: [Role!]
  role_not: Role
  role_not_in: [Role!]
  theme: Theme
  theme_in: [Theme!]
  theme_not: Theme
  theme_not_in: [Theme!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input UserUpdateDataInput {
  bio: String
  birthdate: DateTime
  blocked: UserUpdateManyWithoutBlockingInput
  blocking: UserUpdateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationUpdateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateUpdateManyWithoutOwnerInput
  debatesBlue: DebateUpdateManyWithoutOwnerBlueInput
  debatesRed: DebateUpdateManyWithoutOwnerRedInput
  email: String
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  gender: Gender
  interactions: InteractionUpdateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String
  notifications: NotificationUpdateManyWithoutWhoInput
  password: String
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyUpdateManyWithoutUserInput
}

input UserUpdateInput {
  bio: String
  birthdate: DateTime
  blocked: UserUpdateManyWithoutBlockingInput
  blocking: UserUpdateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationUpdateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateUpdateManyWithoutOwnerInput
  debatesBlue: DebateUpdateManyWithoutOwnerBlueInput
  debatesRed: DebateUpdateManyWithoutOwnerRedInput
  email: String
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  gender: Gender
  interactions: InteractionUpdateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String
  notifications: NotificationUpdateManyWithoutWhoInput
  password: String
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyUpdateManyWithoutUserInput
}

input UserUpdateManyDataInput {
  bio: String
  birthdate: DateTime
  certified: Boolean
  coverPicture: String
  crowned: Boolean
  email: String
  firstname: String
  gender: Gender
  language: Language
  lastConnected: DateTime
  lastname: String
  password: String
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
}

input UserUpdateManyInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyWithoutBlockedInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutBlockedInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutBlockedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutBlockedInput!]
}

input UserUpdateManyWithoutBlockingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutBlockingInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutBlockingInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutBlockingInput!]
}

input UserUpdateManyWithoutConversationsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutConversationsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutConversationsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutConversationsInput!]
}

input UserUpdateManyWithoutFollowersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowersInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
}

input UserUpdateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
}

input UserUpdateManyWithoutNotificationsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutNotificationsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutNotificationsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutNotificationsInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneInput {
  connect: UserWhereUniqueInput
  create: UserCreateInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredInput {
  connect: UserWhereUniqueInput
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutInteractionsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutInteractionsInput
  update: UserUpdateWithoutInteractionsDataInput
  upsert: UserUpsertWithoutInteractionsInput
}

input UserUpdateOneRequiredWithoutTrophiesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTrophiesInput
  update: UserUpdateWithoutTrophiesDataInput
  upsert: UserUpsertWithoutTrophiesInput
}

input UserUpdateOneWithoutDebatesBlueInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDebatesBlueInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutDebatesBlueDataInput
  upsert: UserUpsertWithoutDebatesBlueInput
}

input UserUpdateOneWithoutDebatesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDebatesInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutDebatesDataInput
  upsert: UserUpsertWithoutDebatesInput
}

input UserUpdateOneWithoutDebatesRedInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDebatesRedInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutDebatesRedDataInput
  upsert: UserUpsertWithoutDebatesRedInput
}

input UserUpdateWithoutBlockedDataInput {
  bio: String
  birthdate: DateTime
  blocking: UserUpdateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationUpdateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateUpdateManyWithoutOwnerInput
  debatesBlue: DebateUpdateManyWithoutOwnerBlueInput
  debatesRed: DebateUpdateManyWithoutOwnerRedInput
  email: String
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  gender: Gender
  interactions: InteractionUpdateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String
  notifications: NotificationUpdateManyWithoutWhoInput
  password: String
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyUpdateManyWithoutUserInput
}

input UserUpdateWithoutBlockingDataInput {
  bio: String
  birthdate: DateTime
  blocked: UserUpdateManyWithoutBlockingInput
  certified: Boolean
  conversations: ConversationUpdateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateUpdateManyWithoutOwnerInput
  debatesBlue: DebateUpdateManyWithoutOwnerBlueInput
  debatesRed: DebateUpdateManyWithoutOwnerRedInput
  email: String
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  gender: Gender
  interactions: InteractionUpdateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String
  notifications: NotificationUpdateManyWithoutWhoInput
  password: String
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyUpdateManyWithoutUserInput
}

input UserUpdateWithoutConversationsDataInput {
  bio: String
  birthdate: DateTime
  blocked: UserUpdateManyWithoutBlockingInput
  blocking: UserUpdateManyWithoutBlockedInput
  certified: Boolean
  coverPicture: String
  crowned: Boolean
  debates: DebateUpdateManyWithoutOwnerInput
  debatesBlue: DebateUpdateManyWithoutOwnerBlueInput
  debatesRed: DebateUpdateManyWithoutOwnerRedInput
  email: String
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  gender: Gender
  interactions: InteractionUpdateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String
  notifications: NotificationUpdateManyWithoutWhoInput
  password: String
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyUpdateManyWithoutUserInput
}

input UserUpdateWithoutDebatesBlueDataInput {
  bio: String
  birthdate: DateTime
  blocked: UserUpdateManyWithoutBlockingInput
  blocking: UserUpdateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationUpdateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateUpdateManyWithoutOwnerInput
  debatesRed: DebateUpdateManyWithoutOwnerRedInput
  email: String
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  gender: Gender
  interactions: InteractionUpdateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String
  notifications: NotificationUpdateManyWithoutWhoInput
  password: String
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyUpdateManyWithoutUserInput
}

input UserUpdateWithoutDebatesDataInput {
  bio: String
  birthdate: DateTime
  blocked: UserUpdateManyWithoutBlockingInput
  blocking: UserUpdateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationUpdateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debatesBlue: DebateUpdateManyWithoutOwnerBlueInput
  debatesRed: DebateUpdateManyWithoutOwnerRedInput
  email: String
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  gender: Gender
  interactions: InteractionUpdateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String
  notifications: NotificationUpdateManyWithoutWhoInput
  password: String
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyUpdateManyWithoutUserInput
}

input UserUpdateWithoutDebatesRedDataInput {
  bio: String
  birthdate: DateTime
  blocked: UserUpdateManyWithoutBlockingInput
  blocking: UserUpdateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationUpdateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateUpdateManyWithoutOwnerInput
  debatesBlue: DebateUpdateManyWithoutOwnerBlueInput
  email: String
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  gender: Gender
  interactions: InteractionUpdateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String
  notifications: NotificationUpdateManyWithoutWhoInput
  password: String
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyUpdateManyWithoutUserInput
}

input UserUpdateWithoutFollowersDataInput {
  bio: String
  birthdate: DateTime
  blocked: UserUpdateManyWithoutBlockingInput
  blocking: UserUpdateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationUpdateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateUpdateManyWithoutOwnerInput
  debatesBlue: DebateUpdateManyWithoutOwnerBlueInput
  debatesRed: DebateUpdateManyWithoutOwnerRedInput
  email: String
  firstname: String
  following: UserUpdateManyWithoutFollowersInput
  gender: Gender
  interactions: InteractionUpdateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String
  notifications: NotificationUpdateManyWithoutWhoInput
  password: String
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyUpdateManyWithoutUserInput
}

input UserUpdateWithoutFollowingDataInput {
  bio: String
  birthdate: DateTime
  blocked: UserUpdateManyWithoutBlockingInput
  blocking: UserUpdateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationUpdateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateUpdateManyWithoutOwnerInput
  debatesBlue: DebateUpdateManyWithoutOwnerBlueInput
  debatesRed: DebateUpdateManyWithoutOwnerRedInput
  email: String
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  gender: Gender
  interactions: InteractionUpdateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String
  notifications: NotificationUpdateManyWithoutWhoInput
  password: String
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyUpdateManyWithoutUserInput
}

input UserUpdateWithoutInteractionsDataInput {
  bio: String
  birthdate: DateTime
  blocked: UserUpdateManyWithoutBlockingInput
  blocking: UserUpdateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationUpdateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateUpdateManyWithoutOwnerInput
  debatesBlue: DebateUpdateManyWithoutOwnerBlueInput
  debatesRed: DebateUpdateManyWithoutOwnerRedInput
  email: String
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  gender: Gender
  language: Language
  lastConnected: DateTime
  lastname: String
  notifications: NotificationUpdateManyWithoutWhoInput
  password: String
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyUpdateManyWithoutUserInput
}

input UserUpdateWithoutNotificationsDataInput {
  bio: String
  birthdate: DateTime
  blocked: UserUpdateManyWithoutBlockingInput
  blocking: UserUpdateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationUpdateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateUpdateManyWithoutOwnerInput
  debatesBlue: DebateUpdateManyWithoutOwnerBlueInput
  debatesRed: DebateUpdateManyWithoutOwnerRedInput
  email: String
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  gender: Gender
  interactions: InteractionUpdateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String
  password: String
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
  trophies: TrophyUpdateManyWithoutUserInput
}

input UserUpdateWithoutTrophiesDataInput {
  bio: String
  birthdate: DateTime
  blocked: UserUpdateManyWithoutBlockingInput
  blocking: UserUpdateManyWithoutBlockedInput
  certified: Boolean
  conversations: ConversationUpdateManyWithoutSpeakersInput
  coverPicture: String
  crowned: Boolean
  debates: DebateUpdateManyWithoutOwnerInput
  debatesBlue: DebateUpdateManyWithoutOwnerBlueInput
  debatesRed: DebateUpdateManyWithoutOwnerRedInput
  email: String
  firstname: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  gender: Gender
  interactions: InteractionUpdateManyWithoutWhoInput
  language: Language
  lastConnected: DateTime
  lastname: String
  notifications: NotificationUpdateManyWithoutWhoInput
  password: String
  private: Boolean
  profilePicture: String
  role: Role
  theme: Theme
}

input UserUpdateWithWhereUniqueNestedInput {
  data: UserUpdateDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutBlockedInput {
  data: UserUpdateWithoutBlockedDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutBlockingInput {
  data: UserUpdateWithoutBlockingDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutConversationsInput {
  data: UserUpdateWithoutConversationsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  data: UserUpdateWithoutFollowersDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  data: UserUpdateWithoutFollowingDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutNotificationsInput {
  data: UserUpdateWithoutNotificationsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertNestedInput {
  create: UserCreateInput!
  update: UserUpdateDataInput!
}

input UserUpsertWithoutDebatesBlueInput {
  create: UserCreateWithoutDebatesBlueInput!
  update: UserUpdateWithoutDebatesBlueDataInput!
}

input UserUpsertWithoutDebatesInput {
  create: UserCreateWithoutDebatesInput!
  update: UserUpdateWithoutDebatesDataInput!
}

input UserUpsertWithoutDebatesRedInput {
  create: UserCreateWithoutDebatesRedInput!
  update: UserUpdateWithoutDebatesRedDataInput!
}

input UserUpsertWithoutInteractionsInput {
  create: UserCreateWithoutInteractionsInput!
  update: UserUpdateWithoutInteractionsDataInput!
}

input UserUpsertWithoutTrophiesInput {
  create: UserCreateWithoutTrophiesInput!
  update: UserUpdateWithoutTrophiesDataInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  create: UserCreateInput!
  update: UserUpdateDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutBlockedInput {
  create: UserCreateWithoutBlockedInput!
  update: UserUpdateWithoutBlockedDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutBlockingInput {
  create: UserCreateWithoutBlockingInput!
  update: UserUpdateWithoutBlockingDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutConversationsInput {
  create: UserCreateWithoutConversationsInput!
  update: UserUpdateWithoutConversationsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  create: UserCreateWithoutFollowersInput!
  update: UserUpdateWithoutFollowersDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput!
  update: UserUpdateWithoutFollowingDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput!
  update: UserUpdateWithoutNotificationsDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  bio: String
  bio_contains: String
  bio_ends_with: String
  bio_gt: String
  bio_gte: String
  bio_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_not: String
  bio_not_contains: String
  bio_not_ends_with: String
  bio_not_in: [String!]
  bio_not_starts_with: String
  bio_starts_with: String
  birthdate: DateTime
  birthdate_gt: DateTime
  birthdate_gte: DateTime
  birthdate_in: [DateTime!]
  birthdate_lt: DateTime
  birthdate_lte: DateTime
  birthdate_not: DateTime
  birthdate_not_in: [DateTime!]
  blocked_some: UserWhereInput
  blocking_some: UserWhereInput
  certified: Boolean
  certified_not: Boolean
  conversations_some: ConversationWhereInput
  coverPicture: String
  coverPicture_contains: String
  coverPicture_ends_with: String
  coverPicture_gt: String
  coverPicture_gte: String
  coverPicture_in: [String!]
  coverPicture_lt: String
  coverPicture_lte: String
  coverPicture_not: String
  coverPicture_not_contains: String
  coverPicture_not_ends_with: String
  coverPicture_not_in: [String!]
  coverPicture_not_starts_with: String
  coverPicture_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  crowned: Boolean
  crowned_not: Boolean
  debates_some: DebateWhereInput
  debatesBlue_some: DebateWhereInput
  debatesRed_some: DebateWhereInput
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  firstname: String
  firstname_contains: String
  firstname_ends_with: String
  firstname_gt: String
  firstname_gte: String
  firstname_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_not: String
  firstname_not_contains: String
  firstname_not_ends_with: String
  firstname_not_in: [String!]
  firstname_not_starts_with: String
  firstname_starts_with: String
  followers_some: UserWhereInput
  following_some: UserWhereInput
  gender: Gender
  gender_in: [Gender!]
  gender_not: Gender
  gender_not_in: [Gender!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  interactions_some: InteractionWhereInput
  language: Language
  language_in: [Language!]
  language_not: Language
  language_not_in: [Language!]
  lastConnected: DateTime
  lastConnected_gt: DateTime
  lastConnected_gte: DateTime
  lastConnected_in: [DateTime!]
  lastConnected_lt: DateTime
  lastConnected_lte: DateTime
  lastConnected_not: DateTime
  lastConnected_not_in: [DateTime!]
  lastname: String
  lastname_contains: String
  lastname_ends_with: String
  lastname_gt: String
  lastname_gte: String
  lastname_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_not: String
  lastname_not_contains: String
  lastname_not_ends_with: String
  lastname_not_in: [String!]
  lastname_not_starts_with: String
  lastname_starts_with: String
  notifications_some: NotificationWhereInput
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  private: Boolean
  private_not: Boolean
  profilePicture: String
  profilePicture_contains: String
  profilePicture_ends_with: String
  profilePicture_gt: String
  profilePicture_gte: String
  profilePicture_in: [String!]
  profilePicture_lt: String
  profilePicture_lte: String
  profilePicture_not: String
  profilePicture_not_contains: String
  profilePicture_not_ends_with: String
  profilePicture_not_in: [String!]
  profilePicture_not_starts_with: String
  profilePicture_starts_with: String
  role: Role
  role_in: [Role!]
  role_not: Role
  role_not_in: [Role!]
  theme: Theme
  theme_in: [Theme!]
  theme_not: Theme
  theme_not_in: [Theme!]
  trophies_some: TrophyWhereInput
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
