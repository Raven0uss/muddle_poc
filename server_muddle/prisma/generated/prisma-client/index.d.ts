// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  ad: (where?: AdWhereInput) => Promise<boolean>;
  adTarget: (where?: AdTargetWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  conversation: (where?: ConversationWhereInput) => Promise<boolean>;
  debate: (where?: DebateWhereInput) => Promise<boolean>;
  interaction: (where?: InteractionWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  notification: (where?: NotificationWhereInput) => Promise<boolean>;
  report: (where?: ReportWhereInput) => Promise<boolean>;
  trophy: (where?: TrophyWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  ad: (where: AdWhereUniqueInput) => AdNullablePromise;
  ads: (args?: {
    where?: AdWhereInput;
    orderBy?: AdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Ad>;
  adsConnection: (args?: {
    where?: AdWhereInput;
    orderBy?: AdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AdConnectionPromise;
  adTarget: (where: AdTargetWhereUniqueInput) => AdTargetNullablePromise;
  adTargets: (args?: {
    where?: AdTargetWhereInput;
    orderBy?: AdTargetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AdTarget>;
  adTargetsConnection: (args?: {
    where?: AdTargetWhereInput;
    orderBy?: AdTargetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AdTargetConnectionPromise;
  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  conversation: (
    where: ConversationWhereUniqueInput
  ) => ConversationNullablePromise;
  conversations: (args?: {
    where?: ConversationWhereInput;
    orderBy?: ConversationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Conversation>;
  conversationsConnection: (args?: {
    where?: ConversationWhereInput;
    orderBy?: ConversationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ConversationConnectionPromise;
  debate: (where: DebateWhereUniqueInput) => DebateNullablePromise;
  debates: (args?: {
    where?: DebateWhereInput;
    orderBy?: DebateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Debate>;
  debatesConnection: (args?: {
    where?: DebateWhereInput;
    orderBy?: DebateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DebateConnectionPromise;
  interaction: (
    where: InteractionWhereUniqueInput
  ) => InteractionNullablePromise;
  interactions: (args?: {
    where?: InteractionWhereInput;
    orderBy?: InteractionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Interaction>;
  interactionsConnection: (args?: {
    where?: InteractionWhereInput;
    orderBy?: InteractionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InteractionConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  notification: (
    where: NotificationWhereUniqueInput
  ) => NotificationNullablePromise;
  notifications: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Notification>;
  notificationsConnection: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NotificationConnectionPromise;
  report: (where: ReportWhereUniqueInput) => ReportNullablePromise;
  reports: (args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Report>;
  reportsConnection: (args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReportConnectionPromise;
  trophy: (where: TrophyWhereUniqueInput) => TrophyNullablePromise;
  trophies: (args?: {
    where?: TrophyWhereInput;
    orderBy?: TrophyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Trophy>;
  trophiesConnection: (args?: {
    where?: TrophyWhereInput;
    orderBy?: TrophyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TrophyConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAd: (data: AdCreateInput) => AdPromise;
  updateAd: (args: {
    data: AdUpdateInput;
    where: AdWhereUniqueInput;
  }) => AdPromise;
  updateManyAds: (args: {
    data: AdUpdateManyMutationInput;
    where?: AdWhereInput;
  }) => BatchPayloadPromise;
  upsertAd: (args: {
    where: AdWhereUniqueInput;
    create: AdCreateInput;
    update: AdUpdateInput;
  }) => AdPromise;
  deleteAd: (where: AdWhereUniqueInput) => AdPromise;
  deleteManyAds: (where?: AdWhereInput) => BatchPayloadPromise;
  createAdTarget: (data: AdTargetCreateInput) => AdTargetPromise;
  updateAdTarget: (args: {
    data: AdTargetUpdateInput;
    where: AdTargetWhereUniqueInput;
  }) => AdTargetPromise;
  updateManyAdTargets: (args: {
    data: AdTargetUpdateManyMutationInput;
    where?: AdTargetWhereInput;
  }) => BatchPayloadPromise;
  upsertAdTarget: (args: {
    where: AdTargetWhereUniqueInput;
    create: AdTargetCreateInput;
    update: AdTargetUpdateInput;
  }) => AdTargetPromise;
  deleteAdTarget: (where: AdTargetWhereUniqueInput) => AdTargetPromise;
  deleteManyAdTargets: (where?: AdTargetWhereInput) => BatchPayloadPromise;
  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createConversation: (data: ConversationCreateInput) => ConversationPromise;
  updateConversation: (args: {
    data: ConversationUpdateInput;
    where: ConversationWhereUniqueInput;
  }) => ConversationPromise;
  updateManyConversations: (args: {
    data: ConversationUpdateManyMutationInput;
    where?: ConversationWhereInput;
  }) => BatchPayloadPromise;
  upsertConversation: (args: {
    where: ConversationWhereUniqueInput;
    create: ConversationCreateInput;
    update: ConversationUpdateInput;
  }) => ConversationPromise;
  deleteConversation: (
    where: ConversationWhereUniqueInput
  ) => ConversationPromise;
  deleteManyConversations: (
    where?: ConversationWhereInput
  ) => BatchPayloadPromise;
  createDebate: (data: DebateCreateInput) => DebatePromise;
  updateDebate: (args: {
    data: DebateUpdateInput;
    where: DebateWhereUniqueInput;
  }) => DebatePromise;
  updateManyDebates: (args: {
    data: DebateUpdateManyMutationInput;
    where?: DebateWhereInput;
  }) => BatchPayloadPromise;
  upsertDebate: (args: {
    where: DebateWhereUniqueInput;
    create: DebateCreateInput;
    update: DebateUpdateInput;
  }) => DebatePromise;
  deleteDebate: (where: DebateWhereUniqueInput) => DebatePromise;
  deleteManyDebates: (where?: DebateWhereInput) => BatchPayloadPromise;
  createInteraction: (data: InteractionCreateInput) => InteractionPromise;
  updateInteraction: (args: {
    data: InteractionUpdateInput;
    where: InteractionWhereUniqueInput;
  }) => InteractionPromise;
  updateManyInteractions: (args: {
    data: InteractionUpdateManyMutationInput;
    where?: InteractionWhereInput;
  }) => BatchPayloadPromise;
  upsertInteraction: (args: {
    where: InteractionWhereUniqueInput;
    create: InteractionCreateInput;
    update: InteractionUpdateInput;
  }) => InteractionPromise;
  deleteInteraction: (where: InteractionWhereUniqueInput) => InteractionPromise;
  deleteManyInteractions: (
    where?: InteractionWhereInput
  ) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createNotification: (data: NotificationCreateInput) => NotificationPromise;
  updateNotification: (args: {
    data: NotificationUpdateInput;
    where: NotificationWhereUniqueInput;
  }) => NotificationPromise;
  updateManyNotifications: (args: {
    data: NotificationUpdateManyMutationInput;
    where?: NotificationWhereInput;
  }) => BatchPayloadPromise;
  upsertNotification: (args: {
    where: NotificationWhereUniqueInput;
    create: NotificationCreateInput;
    update: NotificationUpdateInput;
  }) => NotificationPromise;
  deleteNotification: (
    where: NotificationWhereUniqueInput
  ) => NotificationPromise;
  deleteManyNotifications: (
    where?: NotificationWhereInput
  ) => BatchPayloadPromise;
  createReport: (data: ReportCreateInput) => ReportPromise;
  updateReport: (args: {
    data: ReportUpdateInput;
    where: ReportWhereUniqueInput;
  }) => ReportPromise;
  updateManyReports: (args: {
    data: ReportUpdateManyMutationInput;
    where?: ReportWhereInput;
  }) => BatchPayloadPromise;
  upsertReport: (args: {
    where: ReportWhereUniqueInput;
    create: ReportCreateInput;
    update: ReportUpdateInput;
  }) => ReportPromise;
  deleteReport: (where: ReportWhereUniqueInput) => ReportPromise;
  deleteManyReports: (where?: ReportWhereInput) => BatchPayloadPromise;
  createTrophy: (data: TrophyCreateInput) => TrophyPromise;
  updateTrophy: (args: {
    data: TrophyUpdateInput;
    where: TrophyWhereUniqueInput;
  }) => TrophyPromise;
  updateManyTrophies: (args: {
    data: TrophyUpdateManyMutationInput;
    where?: TrophyWhereInput;
  }) => BatchPayloadPromise;
  upsertTrophy: (args: {
    where: TrophyWhereUniqueInput;
    create: TrophyCreateInput;
    update: TrophyUpdateInput;
  }) => TrophyPromise;
  deleteTrophy: (where: TrophyWhereUniqueInput) => TrophyPromise;
  deleteManyTrophies: (where?: TrophyWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  ad: (where?: AdSubscriptionWhereInput) => AdSubscriptionPayloadSubscription;
  adTarget: (
    where?: AdTargetSubscriptionWhereInput
  ) => AdTargetSubscriptionPayloadSubscription;
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  conversation: (
    where?: ConversationSubscriptionWhereInput
  ) => ConversationSubscriptionPayloadSubscription;
  debate: (
    where?: DebateSubscriptionWhereInput
  ) => DebateSubscriptionPayloadSubscription;
  interaction: (
    where?: InteractionSubscriptionWhereInput
  ) => InteractionSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  notification: (
    where?: NotificationSubscriptionWhereInput
  ) => NotificationSubscriptionPayloadSubscription;
  report: (
    where?: ReportSubscriptionWhereInput
  ) => ReportSubscriptionPayloadSubscription;
  trophy: (
    where?: TrophySubscriptionWhereInput
  ) => TrophySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AdOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "company_ASC"
  | "company_DESC"
  | "companyIcon_ASC"
  | "companyIcon_DESC"
  | "content_ASC"
  | "content_DESC"
  | "image_ASC"
  | "image_DESC"
  | "link_ASC"
  | "link_DESC"
  | "active_ASC"
  | "active_DESC"
  | "ratio_ASC"
  | "ratio_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GenderFilter = "MALE" | "FEMALE" | "ALL";

export type AdTargetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "birthdateMin_ASC"
  | "birthdateMin_DESC"
  | "birthdateMax_ASC"
  | "birthdateMax_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Role = "STANDARD" | "MODERATOR" | "ADMIN" | "MUDDLE";

export type Gender = "MALE" | "FEMALE" | "NO_INDICATION";

export type Language = "FR" | "EN";

export type Theme = "LIGHT" | "DARK";

export type DebateType = "STANDARD" | "DUO" | "MUDDLE";

export type ReportType = "DEBATE" | "COMMENT";

export type ReportReason =
  | "INSULT"
  | "RACISM"
  | "SEXISM"
  | "VIOLENCE"
  | "PORNOGRAPHY";

export type InteractionType =
  | "LIKE"
  | "DISLIKE"
  | "COMMENT"
  | "POSITIVE_VOTE"
  | "NEGATIVE_VOTE"
  | "BLUE_VOTE"
  | "RED_VOTE";

export type NotificationType =
  | "VOTE"
  | "INVITATION_DUO"
  | "ACCEPT_DUO"
  | "REJECT_DUO"
  | "CLOSE_DEBATE"
  | "ACCEPT_CLOSE_DEBATE"
  | "REJECT_CLOSE_DEBATE"
  | "DELETE_DEBATE"
  | "ACCEPT_DELETE_DEBATE"
  | "REJECT_DELETE_DEBATE"
  | "COMMENT"
  | "SUBCOMMENT"
  | "LIKE"
  | "DISLIKE"
  | "CROWNED";

export type NotificationStatus =
  | "ACCEPTED"
  | "DECLINED"
  | "PENDING"
  | "INFORMATION";

export type TrophyType = "DUO" | "TOP_COMMENT";

export type MailStatus = "HEALTHY" | "BLOCKED";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstname_ASC"
  | "firstname_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "birthdate_ASC"
  | "birthdate_DESC"
  | "role_ASC"
  | "role_DESC"
  | "certified_ASC"
  | "certified_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "profilePicture_ASC"
  | "profilePicture_DESC"
  | "coverPicture_ASC"
  | "coverPicture_DESC"
  | "bio_ASC"
  | "bio_DESC"
  | "language_ASC"
  | "language_DESC"
  | "theme_ASC"
  | "theme_DESC"
  | "crowned_ASC"
  | "crowned_DESC"
  | "crownedDate_ASC"
  | "crownedDate_DESC"
  | "private_ASC"
  | "private_DESC"
  | "lastConnected_ASC"
  | "lastConnected_DESC"
  | "mailStatus_ASC"
  | "mailStatus_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DebateOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "timelimit_ASC"
  | "timelimit_DESC"
  | "timelimitString_ASC"
  | "timelimitString_DESC"
  | "type_ASC"
  | "type_DESC"
  | "closed_ASC"
  | "closed_DESC"
  | "crowned_ASC"
  | "crowned_DESC"
  | "published_ASC"
  | "published_DESC"
  | "answerOne_ASC"
  | "answerOne_DESC"
  | "answerTwo_ASC"
  | "answerTwo_DESC"
  | "image_ASC"
  | "image_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "nested_ASC"
  | "nested_DESC";

export type ReportOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "reason_ASC"
  | "reason_DESC"
  | "reasonText_ASC"
  | "reasonText_DESC"
  | "treated_ASC"
  | "treated_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type InteractionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NotificationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "type_ASC"
  | "type_DESC"
  | "status_ASC"
  | "status_DESC"
  | "new_ASC"
  | "new_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TrophyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "won_ASC"
  | "won_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ConversationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "deleted_ASC"
  | "deleted_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "read_ASC"
  | "read_DESC"
  | "deleted_ASC"
  | "deleted_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AdWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface AdWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  company?: Maybe<String>;
  company_not?: Maybe<String>;
  company_in?: Maybe<String[] | String>;
  company_not_in?: Maybe<String[] | String>;
  company_lt?: Maybe<String>;
  company_lte?: Maybe<String>;
  company_gt?: Maybe<String>;
  company_gte?: Maybe<String>;
  company_contains?: Maybe<String>;
  company_not_contains?: Maybe<String>;
  company_starts_with?: Maybe<String>;
  company_not_starts_with?: Maybe<String>;
  company_ends_with?: Maybe<String>;
  company_not_ends_with?: Maybe<String>;
  companyIcon?: Maybe<String>;
  companyIcon_not?: Maybe<String>;
  companyIcon_in?: Maybe<String[] | String>;
  companyIcon_not_in?: Maybe<String[] | String>;
  companyIcon_lt?: Maybe<String>;
  companyIcon_lte?: Maybe<String>;
  companyIcon_gt?: Maybe<String>;
  companyIcon_gte?: Maybe<String>;
  companyIcon_contains?: Maybe<String>;
  companyIcon_not_contains?: Maybe<String>;
  companyIcon_starts_with?: Maybe<String>;
  companyIcon_not_starts_with?: Maybe<String>;
  companyIcon_ends_with?: Maybe<String>;
  companyIcon_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  active?: Maybe<Boolean>;
  active_not?: Maybe<Boolean>;
  ratio?: Maybe<Int>;
  ratio_not?: Maybe<Int>;
  ratio_in?: Maybe<Int[] | Int>;
  ratio_not_in?: Maybe<Int[] | Int>;
  ratio_lt?: Maybe<Int>;
  ratio_lte?: Maybe<Int>;
  ratio_gt?: Maybe<Int>;
  ratio_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AdWhereInput[] | AdWhereInput>;
}

export type AdTargetWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface AdTargetWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  gender?: Maybe<GenderFilter>;
  gender_not?: Maybe<GenderFilter>;
  gender_in?: Maybe<GenderFilter[] | GenderFilter>;
  gender_not_in?: Maybe<GenderFilter[] | GenderFilter>;
  birthdateMin?: Maybe<DateTimeInput>;
  birthdateMin_not?: Maybe<DateTimeInput>;
  birthdateMin_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdateMin_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdateMin_lt?: Maybe<DateTimeInput>;
  birthdateMin_lte?: Maybe<DateTimeInput>;
  birthdateMin_gt?: Maybe<DateTimeInput>;
  birthdateMin_gte?: Maybe<DateTimeInput>;
  birthdateMax?: Maybe<DateTimeInput>;
  birthdateMax_not?: Maybe<DateTimeInput>;
  birthdateMax_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdateMax_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdateMax_lt?: Maybe<DateTimeInput>;
  birthdateMax_lte?: Maybe<DateTimeInput>;
  birthdateMax_gt?: Maybe<DateTimeInput>;
  birthdateMax_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AdTargetWhereInput[] | AdTargetWhereInput>;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  birthdate_not?: Maybe<DateTimeInput>;
  birthdate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_lt?: Maybe<DateTimeInput>;
  birthdate_lte?: Maybe<DateTimeInput>;
  birthdate_gt?: Maybe<DateTimeInput>;
  birthdate_gte?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  certified?: Maybe<Boolean>;
  certified_not?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  gender_not?: Maybe<Gender>;
  gender_in?: Maybe<Gender[] | Gender>;
  gender_not_in?: Maybe<Gender[] | Gender>;
  profilePicture?: Maybe<String>;
  profilePicture_not?: Maybe<String>;
  profilePicture_in?: Maybe<String[] | String>;
  profilePicture_not_in?: Maybe<String[] | String>;
  profilePicture_lt?: Maybe<String>;
  profilePicture_lte?: Maybe<String>;
  profilePicture_gt?: Maybe<String>;
  profilePicture_gte?: Maybe<String>;
  profilePicture_contains?: Maybe<String>;
  profilePicture_not_contains?: Maybe<String>;
  profilePicture_starts_with?: Maybe<String>;
  profilePicture_not_starts_with?: Maybe<String>;
  profilePicture_ends_with?: Maybe<String>;
  profilePicture_not_ends_with?: Maybe<String>;
  coverPicture?: Maybe<String>;
  coverPicture_not?: Maybe<String>;
  coverPicture_in?: Maybe<String[] | String>;
  coverPicture_not_in?: Maybe<String[] | String>;
  coverPicture_lt?: Maybe<String>;
  coverPicture_lte?: Maybe<String>;
  coverPicture_gt?: Maybe<String>;
  coverPicture_gte?: Maybe<String>;
  coverPicture_contains?: Maybe<String>;
  coverPicture_not_contains?: Maybe<String>;
  coverPicture_starts_with?: Maybe<String>;
  coverPicture_not_starts_with?: Maybe<String>;
  coverPicture_ends_with?: Maybe<String>;
  coverPicture_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  language?: Maybe<Language>;
  language_not?: Maybe<Language>;
  language_in?: Maybe<Language[] | Language>;
  language_not_in?: Maybe<Language[] | Language>;
  theme?: Maybe<Theme>;
  theme_not?: Maybe<Theme>;
  theme_in?: Maybe<Theme[] | Theme>;
  theme_not_in?: Maybe<Theme[] | Theme>;
  crowned?: Maybe<Boolean>;
  crowned_not?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  crownedDate_not?: Maybe<DateTimeInput>;
  crownedDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  crownedDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  crownedDate_lt?: Maybe<DateTimeInput>;
  crownedDate_lte?: Maybe<DateTimeInput>;
  crownedDate_gt?: Maybe<DateTimeInput>;
  crownedDate_gte?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  private_not?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  lastConnected_not?: Maybe<DateTimeInput>;
  lastConnected_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastConnected_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastConnected_lt?: Maybe<DateTimeInput>;
  lastConnected_lte?: Maybe<DateTimeInput>;
  lastConnected_gt?: Maybe<DateTimeInput>;
  lastConnected_gte?: Maybe<DateTimeInput>;
  followers_some?: Maybe<UserWhereInput>;
  following_some?: Maybe<UserWhereInput>;
  blocked_some?: Maybe<UserWhereInput>;
  blocking_some?: Maybe<UserWhereInput>;
  debates_some?: Maybe<DebateWhereInput>;
  debatesBlue_some?: Maybe<DebateWhereInput>;
  debatesRed_some?: Maybe<DebateWhereInput>;
  notifications_some?: Maybe<NotificationWhereInput>;
  trophies_some?: Maybe<TrophyWhereInput>;
  conversations_some?: Maybe<ConversationWhereInput>;
  interactions_some?: Maybe<InteractionWhereInput>;
  mailStatus?: Maybe<MailStatus>;
  mailStatus_not?: Maybe<MailStatus>;
  mailStatus_in?: Maybe<MailStatus[] | MailStatus>;
  mailStatus_not_in?: Maybe<MailStatus[] | MailStatus>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface DebateWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<UserWhereInput>;
  ownerBlue?: Maybe<UserWhereInput>;
  ownerRed?: Maybe<UserWhereInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  timelimit?: Maybe<DateTimeInput>;
  timelimit_not?: Maybe<DateTimeInput>;
  timelimit_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timelimit_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timelimit_lt?: Maybe<DateTimeInput>;
  timelimit_lte?: Maybe<DateTimeInput>;
  timelimit_gt?: Maybe<DateTimeInput>;
  timelimit_gte?: Maybe<DateTimeInput>;
  timelimitString?: Maybe<String>;
  timelimitString_not?: Maybe<String>;
  timelimitString_in?: Maybe<String[] | String>;
  timelimitString_not_in?: Maybe<String[] | String>;
  timelimitString_lt?: Maybe<String>;
  timelimitString_lte?: Maybe<String>;
  timelimitString_gt?: Maybe<String>;
  timelimitString_gte?: Maybe<String>;
  timelimitString_contains?: Maybe<String>;
  timelimitString_not_contains?: Maybe<String>;
  timelimitString_starts_with?: Maybe<String>;
  timelimitString_not_starts_with?: Maybe<String>;
  timelimitString_ends_with?: Maybe<String>;
  timelimitString_not_ends_with?: Maybe<String>;
  type?: Maybe<DebateType>;
  type_not?: Maybe<DebateType>;
  type_in?: Maybe<DebateType[] | DebateType>;
  type_not_in?: Maybe<DebateType[] | DebateType>;
  comments_some?: Maybe<CommentWhereInput>;
  topComment?: Maybe<CommentWhereInput>;
  reports_some?: Maybe<ReportWhereInput>;
  positives_some?: Maybe<UserWhereInput>;
  negatives_some?: Maybe<UserWhereInput>;
  redVotes_some?: Maybe<UserWhereInput>;
  blueVotes_some?: Maybe<UserWhereInput>;
  winner?: Maybe<UserWhereInput>;
  loser?: Maybe<UserWhereInput>;
  closed?: Maybe<Boolean>;
  closed_not?: Maybe<Boolean>;
  crowned?: Maybe<Boolean>;
  crowned_not?: Maybe<Boolean>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  interactions_some?: Maybe<InteractionWhereInput>;
  answerOne?: Maybe<String>;
  answerOne_not?: Maybe<String>;
  answerOne_in?: Maybe<String[] | String>;
  answerOne_not_in?: Maybe<String[] | String>;
  answerOne_lt?: Maybe<String>;
  answerOne_lte?: Maybe<String>;
  answerOne_gt?: Maybe<String>;
  answerOne_gte?: Maybe<String>;
  answerOne_contains?: Maybe<String>;
  answerOne_not_contains?: Maybe<String>;
  answerOne_starts_with?: Maybe<String>;
  answerOne_not_starts_with?: Maybe<String>;
  answerOne_ends_with?: Maybe<String>;
  answerOne_not_ends_with?: Maybe<String>;
  answerTwo?: Maybe<String>;
  answerTwo_not?: Maybe<String>;
  answerTwo_in?: Maybe<String[] | String>;
  answerTwo_not_in?: Maybe<String[] | String>;
  answerTwo_lt?: Maybe<String>;
  answerTwo_lte?: Maybe<String>;
  answerTwo_gt?: Maybe<String>;
  answerTwo_gte?: Maybe<String>;
  answerTwo_contains?: Maybe<String>;
  answerTwo_not_contains?: Maybe<String>;
  answerTwo_starts_with?: Maybe<String>;
  answerTwo_not_starts_with?: Maybe<String>;
  answerTwo_ends_with?: Maybe<String>;
  answerTwo_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<DebateWhereInput[] | DebateWhereInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  from?: Maybe<UserWhereInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  likes_some?: Maybe<UserWhereInput>;
  dislikes_some?: Maybe<UserWhereInput>;
  reports_some?: Maybe<ReportWhereInput>;
  debate?: Maybe<DebateWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  comments_some?: Maybe<CommentWhereInput>;
  nested?: Maybe<Boolean>;
  nested_not?: Maybe<Boolean>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface ReportWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  from?: Maybe<UserWhereInput>;
  to?: Maybe<UserWhereInput>;
  type?: Maybe<ReportType>;
  type_not?: Maybe<ReportType>;
  type_in?: Maybe<ReportType[] | ReportType>;
  type_not_in?: Maybe<ReportType[] | ReportType>;
  reason?: Maybe<ReportReason>;
  reason_not?: Maybe<ReportReason>;
  reason_in?: Maybe<ReportReason[] | ReportReason>;
  reason_not_in?: Maybe<ReportReason[] | ReportReason>;
  reasonText?: Maybe<String>;
  reasonText_not?: Maybe<String>;
  reasonText_in?: Maybe<String[] | String>;
  reasonText_not_in?: Maybe<String[] | String>;
  reasonText_lt?: Maybe<String>;
  reasonText_lte?: Maybe<String>;
  reasonText_gt?: Maybe<String>;
  reasonText_gte?: Maybe<String>;
  reasonText_contains?: Maybe<String>;
  reasonText_not_contains?: Maybe<String>;
  reasonText_starts_with?: Maybe<String>;
  reasonText_not_starts_with?: Maybe<String>;
  reasonText_ends_with?: Maybe<String>;
  reasonText_not_ends_with?: Maybe<String>;
  debate?: Maybe<DebateWhereInput>;
  comment?: Maybe<CommentWhereInput>;
  treated?: Maybe<Boolean>;
  treated_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ReportWhereInput[] | ReportWhereInput>;
}

export interface InteractionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<InteractionType>;
  type_not?: Maybe<InteractionType>;
  type_in?: Maybe<InteractionType[] | InteractionType>;
  type_not_in?: Maybe<InteractionType[] | InteractionType>;
  who?: Maybe<UserWhereInput>;
  debate?: Maybe<DebateWhereInput>;
  comment?: Maybe<CommentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<InteractionWhereInput[] | InteractionWhereInput>;
}

export interface NotificationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  who_some?: Maybe<UserWhereInput>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  type?: Maybe<NotificationType>;
  type_not?: Maybe<NotificationType>;
  type_in?: Maybe<NotificationType[] | NotificationType>;
  type_not_in?: Maybe<NotificationType[] | NotificationType>;
  status?: Maybe<NotificationStatus>;
  status_not?: Maybe<NotificationStatus>;
  status_in?: Maybe<NotificationStatus[] | NotificationStatus>;
  status_not_in?: Maybe<NotificationStatus[] | NotificationStatus>;
  new?: Maybe<Boolean>;
  new_not?: Maybe<Boolean>;
  debate?: Maybe<DebateWhereInput>;
  comment?: Maybe<CommentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
}

export interface TrophyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  won?: Maybe<Boolean>;
  won_not?: Maybe<Boolean>;
  type?: Maybe<TrophyType>;
  type_not?: Maybe<TrophyType>;
  type_in?: Maybe<TrophyType[] | TrophyType>;
  type_not_in?: Maybe<TrophyType[] | TrophyType>;
  debate?: Maybe<DebateWhereInput>;
  comment?: Maybe<CommentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TrophyWhereInput[] | TrophyWhereInput>;
}

export interface ConversationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  speakers_some?: Maybe<UserWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  deleted?: Maybe<String>;
  deleted_not?: Maybe<String>;
  deleted_in?: Maybe<String[] | String>;
  deleted_not_in?: Maybe<String[] | String>;
  deleted_lt?: Maybe<String>;
  deleted_lte?: Maybe<String>;
  deleted_gt?: Maybe<String>;
  deleted_gte?: Maybe<String>;
  deleted_contains?: Maybe<String>;
  deleted_not_contains?: Maybe<String>;
  deleted_starts_with?: Maybe<String>;
  deleted_not_starts_with?: Maybe<String>;
  deleted_ends_with?: Maybe<String>;
  deleted_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ConversationWhereInput[] | ConversationWhereInput>;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  to?: Maybe<UserWhereInput>;
  from?: Maybe<UserWhereInput>;
  read?: Maybe<Boolean>;
  read_not?: Maybe<Boolean>;
  conversation?: Maybe<ConversationWhereInput>;
  deleted?: Maybe<String>;
  deleted_not?: Maybe<String>;
  deleted_in?: Maybe<String[] | String>;
  deleted_not_in?: Maybe<String[] | String>;
  deleted_lt?: Maybe<String>;
  deleted_lte?: Maybe<String>;
  deleted_gt?: Maybe<String>;
  deleted_gte?: Maybe<String>;
  deleted_contains?: Maybe<String>;
  deleted_not_contains?: Maybe<String>;
  deleted_starts_with?: Maybe<String>;
  deleted_not_starts_with?: Maybe<String>;
  deleted_ends_with?: Maybe<String>;
  deleted_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export type ConversationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type DebateWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type InteractionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type NotificationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ReportWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TrophyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface AdCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  company: String;
  companyIcon: String;
  content: String;
  image: String;
  link?: Maybe<String>;
  active?: Maybe<Boolean>;
  ratio?: Maybe<Int>;
}

export interface AdUpdateInput {
  name?: Maybe<String>;
  company?: Maybe<String>;
  companyIcon?: Maybe<String>;
  content?: Maybe<String>;
  image?: Maybe<String>;
  link?: Maybe<String>;
  active?: Maybe<Boolean>;
  ratio?: Maybe<Int>;
}

export interface AdUpdateManyMutationInput {
  name?: Maybe<String>;
  company?: Maybe<String>;
  companyIcon?: Maybe<String>;
  content?: Maybe<String>;
  image?: Maybe<String>;
  link?: Maybe<String>;
  active?: Maybe<Boolean>;
  ratio?: Maybe<Int>;
}

export interface AdTargetCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  gender?: Maybe<GenderFilter>;
  birthdateMin: DateTimeInput;
  birthdateMax: DateTimeInput;
}

export interface AdTargetUpdateInput {
  name?: Maybe<String>;
  gender?: Maybe<GenderFilter>;
  birthdateMin?: Maybe<DateTimeInput>;
  birthdateMax?: Maybe<DateTimeInput>;
}

export interface AdTargetUpdateManyMutationInput {
  name?: Maybe<String>;
  gender?: Maybe<GenderFilter>;
  birthdateMin?: Maybe<DateTimeInput>;
  birthdateMax?: Maybe<DateTimeInput>;
}

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  from: UserCreateOneInput;
  content: String;
  likes?: Maybe<UserCreateManyInput>;
  dislikes?: Maybe<UserCreateManyInput>;
  reports?: Maybe<ReportCreateManyWithoutCommentInput>;
  debate: DebateCreateOneWithoutCommentsInput;
  comments?: Maybe<CommentCreateManyInput>;
  nested?: Maybe<Boolean>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  birthdate: DateTimeInput;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  blocked?: Maybe<UserCreateManyWithoutBlockingInput>;
  blocking?: Maybe<UserCreateManyWithoutBlockedInput>;
  debates?: Maybe<DebateCreateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateCreateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateCreateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationCreateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionCreateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserCreatemailErrorsInput>;
}

export interface UserCreateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFollowingInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  birthdate: DateTimeInput;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  blocked?: Maybe<UserCreateManyWithoutBlockingInput>;
  blocking?: Maybe<UserCreateManyWithoutBlockedInput>;
  debates?: Maybe<DebateCreateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateCreateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateCreateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationCreateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionCreateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserCreatemailErrorsInput>;
}

export interface UserCreateManyWithoutBlockingInput {
  create?: Maybe<
    UserCreateWithoutBlockingInput[] | UserCreateWithoutBlockingInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutBlockingInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  birthdate: DateTimeInput;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  blocked?: Maybe<UserCreateManyWithoutBlockingInput>;
  debates?: Maybe<DebateCreateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateCreateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateCreateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationCreateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionCreateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserCreatemailErrorsInput>;
}

export interface UserCreateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFollowersInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  birthdate: DateTimeInput;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  blocked?: Maybe<UserCreateManyWithoutBlockingInput>;
  blocking?: Maybe<UserCreateManyWithoutBlockedInput>;
  debates?: Maybe<DebateCreateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateCreateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateCreateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationCreateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionCreateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserCreatemailErrorsInput>;
}

export interface UserCreateManyWithoutBlockedInput {
  create?: Maybe<
    UserCreateWithoutBlockedInput[] | UserCreateWithoutBlockedInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutBlockedInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  birthdate: DateTimeInput;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  blocking?: Maybe<UserCreateManyWithoutBlockedInput>;
  debates?: Maybe<DebateCreateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateCreateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateCreateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationCreateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionCreateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserCreatemailErrorsInput>;
}

export interface DebateCreateManyWithoutOwnerInput {
  create?: Maybe<
    DebateCreateWithoutOwnerInput[] | DebateCreateWithoutOwnerInput
  >;
  connect?: Maybe<DebateWhereUniqueInput[] | DebateWhereUniqueInput>;
}

export interface DebateCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  ownerBlue?: Maybe<UserCreateOneWithoutDebatesBlueInput>;
  ownerRed?: Maybe<UserCreateOneWithoutDebatesRedInput>;
  content: String;
  timelimit?: Maybe<DateTimeInput>;
  timelimitString?: Maybe<String>;
  type: DebateType;
  comments?: Maybe<CommentCreateManyWithoutDebateInput>;
  topComment?: Maybe<CommentCreateOneInput>;
  reports?: Maybe<ReportCreateManyWithoutDebateInput>;
  positives?: Maybe<UserCreateManyInput>;
  negatives?: Maybe<UserCreateManyInput>;
  redVotes?: Maybe<UserCreateManyInput>;
  blueVotes?: Maybe<UserCreateManyInput>;
  winner?: Maybe<UserCreateOneInput>;
  loser?: Maybe<UserCreateOneInput>;
  closed?: Maybe<Boolean>;
  crowned?: Maybe<Boolean>;
  published?: Maybe<Boolean>;
  interactions?: Maybe<InteractionCreateManyWithoutDebateInput>;
  answerOne?: Maybe<String>;
  answerTwo?: Maybe<String>;
  image?: Maybe<String>;
}

export interface UserCreateOneWithoutDebatesBlueInput {
  create?: Maybe<UserCreateWithoutDebatesBlueInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutDebatesBlueInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  birthdate: DateTimeInput;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  blocked?: Maybe<UserCreateManyWithoutBlockingInput>;
  blocking?: Maybe<UserCreateManyWithoutBlockedInput>;
  debates?: Maybe<DebateCreateManyWithoutOwnerInput>;
  debatesRed?: Maybe<DebateCreateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationCreateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionCreateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserCreatemailErrorsInput>;
}

export interface DebateCreateManyWithoutOwnerRedInput {
  create?: Maybe<
    DebateCreateWithoutOwnerRedInput[] | DebateCreateWithoutOwnerRedInput
  >;
  connect?: Maybe<DebateWhereUniqueInput[] | DebateWhereUniqueInput>;
}

export interface DebateCreateWithoutOwnerRedInput {
  id?: Maybe<ID_Input>;
  owner?: Maybe<UserCreateOneWithoutDebatesInput>;
  ownerBlue?: Maybe<UserCreateOneWithoutDebatesBlueInput>;
  content: String;
  timelimit?: Maybe<DateTimeInput>;
  timelimitString?: Maybe<String>;
  type: DebateType;
  comments?: Maybe<CommentCreateManyWithoutDebateInput>;
  topComment?: Maybe<CommentCreateOneInput>;
  reports?: Maybe<ReportCreateManyWithoutDebateInput>;
  positives?: Maybe<UserCreateManyInput>;
  negatives?: Maybe<UserCreateManyInput>;
  redVotes?: Maybe<UserCreateManyInput>;
  blueVotes?: Maybe<UserCreateManyInput>;
  winner?: Maybe<UserCreateOneInput>;
  loser?: Maybe<UserCreateOneInput>;
  closed?: Maybe<Boolean>;
  crowned?: Maybe<Boolean>;
  published?: Maybe<Boolean>;
  interactions?: Maybe<InteractionCreateManyWithoutDebateInput>;
  answerOne?: Maybe<String>;
  answerTwo?: Maybe<String>;
  image?: Maybe<String>;
}

export interface UserCreateOneWithoutDebatesInput {
  create?: Maybe<UserCreateWithoutDebatesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutDebatesInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  birthdate: DateTimeInput;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  blocked?: Maybe<UserCreateManyWithoutBlockingInput>;
  blocking?: Maybe<UserCreateManyWithoutBlockedInput>;
  debatesBlue?: Maybe<DebateCreateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateCreateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationCreateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionCreateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserCreatemailErrorsInput>;
}

export interface DebateCreateManyWithoutOwnerBlueInput {
  create?: Maybe<
    DebateCreateWithoutOwnerBlueInput[] | DebateCreateWithoutOwnerBlueInput
  >;
  connect?: Maybe<DebateWhereUniqueInput[] | DebateWhereUniqueInput>;
}

export interface DebateCreateWithoutOwnerBlueInput {
  id?: Maybe<ID_Input>;
  owner?: Maybe<UserCreateOneWithoutDebatesInput>;
  ownerRed?: Maybe<UserCreateOneWithoutDebatesRedInput>;
  content: String;
  timelimit?: Maybe<DateTimeInput>;
  timelimitString?: Maybe<String>;
  type: DebateType;
  comments?: Maybe<CommentCreateManyWithoutDebateInput>;
  topComment?: Maybe<CommentCreateOneInput>;
  reports?: Maybe<ReportCreateManyWithoutDebateInput>;
  positives?: Maybe<UserCreateManyInput>;
  negatives?: Maybe<UserCreateManyInput>;
  redVotes?: Maybe<UserCreateManyInput>;
  blueVotes?: Maybe<UserCreateManyInput>;
  winner?: Maybe<UserCreateOneInput>;
  loser?: Maybe<UserCreateOneInput>;
  closed?: Maybe<Boolean>;
  crowned?: Maybe<Boolean>;
  published?: Maybe<Boolean>;
  interactions?: Maybe<InteractionCreateManyWithoutDebateInput>;
  answerOne?: Maybe<String>;
  answerTwo?: Maybe<String>;
  image?: Maybe<String>;
}

export interface UserCreateOneWithoutDebatesRedInput {
  create?: Maybe<UserCreateWithoutDebatesRedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutDebatesRedInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  birthdate: DateTimeInput;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  blocked?: Maybe<UserCreateManyWithoutBlockingInput>;
  blocking?: Maybe<UserCreateManyWithoutBlockedInput>;
  debates?: Maybe<DebateCreateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateCreateManyWithoutOwnerBlueInput>;
  notifications?: Maybe<NotificationCreateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionCreateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserCreatemailErrorsInput>;
}

export interface NotificationCreateManyWithoutWhoInput {
  create?: Maybe<
    NotificationCreateWithoutWhoInput[] | NotificationCreateWithoutWhoInput
  >;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
}

export interface NotificationCreateWithoutWhoInput {
  id?: Maybe<ID_Input>;
  userId: String;
  type: NotificationType;
  status: NotificationStatus;
  new: Boolean;
  debate?: Maybe<DebateCreateOneInput>;
  comment?: Maybe<CommentCreateOneInput>;
}

export interface DebateCreateOneInput {
  create?: Maybe<DebateCreateInput>;
  connect?: Maybe<DebateWhereUniqueInput>;
}

export interface DebateCreateInput {
  id?: Maybe<ID_Input>;
  owner?: Maybe<UserCreateOneWithoutDebatesInput>;
  ownerBlue?: Maybe<UserCreateOneWithoutDebatesBlueInput>;
  ownerRed?: Maybe<UserCreateOneWithoutDebatesRedInput>;
  content: String;
  timelimit?: Maybe<DateTimeInput>;
  timelimitString?: Maybe<String>;
  type: DebateType;
  comments?: Maybe<CommentCreateManyWithoutDebateInput>;
  topComment?: Maybe<CommentCreateOneInput>;
  reports?: Maybe<ReportCreateManyWithoutDebateInput>;
  positives?: Maybe<UserCreateManyInput>;
  negatives?: Maybe<UserCreateManyInput>;
  redVotes?: Maybe<UserCreateManyInput>;
  blueVotes?: Maybe<UserCreateManyInput>;
  winner?: Maybe<UserCreateOneInput>;
  loser?: Maybe<UserCreateOneInput>;
  closed?: Maybe<Boolean>;
  crowned?: Maybe<Boolean>;
  published?: Maybe<Boolean>;
  interactions?: Maybe<InteractionCreateManyWithoutDebateInput>;
  answerOne?: Maybe<String>;
  answerTwo?: Maybe<String>;
  image?: Maybe<String>;
}

export interface CommentCreateManyWithoutDebateInput {
  create?: Maybe<
    CommentCreateWithoutDebateInput[] | CommentCreateWithoutDebateInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutDebateInput {
  id?: Maybe<ID_Input>;
  from: UserCreateOneInput;
  content: String;
  likes?: Maybe<UserCreateManyInput>;
  dislikes?: Maybe<UserCreateManyInput>;
  reports?: Maybe<ReportCreateManyWithoutCommentInput>;
  comments?: Maybe<CommentCreateManyInput>;
  nested?: Maybe<Boolean>;
}

export interface UserCreateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface ReportCreateManyWithoutCommentInput {
  create?: Maybe<
    ReportCreateWithoutCommentInput[] | ReportCreateWithoutCommentInput
  >;
  connect?: Maybe<ReportWhereUniqueInput[] | ReportWhereUniqueInput>;
}

export interface ReportCreateWithoutCommentInput {
  id?: Maybe<ID_Input>;
  from?: Maybe<UserCreateOneInput>;
  to?: Maybe<UserCreateOneInput>;
  type: ReportType;
  reason: ReportReason;
  reasonText?: Maybe<String>;
  debate?: Maybe<DebateCreateOneWithoutReportsInput>;
  treated?: Maybe<Boolean>;
}

export interface DebateCreateOneWithoutReportsInput {
  create?: Maybe<DebateCreateWithoutReportsInput>;
  connect?: Maybe<DebateWhereUniqueInput>;
}

export interface DebateCreateWithoutReportsInput {
  id?: Maybe<ID_Input>;
  owner?: Maybe<UserCreateOneWithoutDebatesInput>;
  ownerBlue?: Maybe<UserCreateOneWithoutDebatesBlueInput>;
  ownerRed?: Maybe<UserCreateOneWithoutDebatesRedInput>;
  content: String;
  timelimit?: Maybe<DateTimeInput>;
  timelimitString?: Maybe<String>;
  type: DebateType;
  comments?: Maybe<CommentCreateManyWithoutDebateInput>;
  topComment?: Maybe<CommentCreateOneInput>;
  positives?: Maybe<UserCreateManyInput>;
  negatives?: Maybe<UserCreateManyInput>;
  redVotes?: Maybe<UserCreateManyInput>;
  blueVotes?: Maybe<UserCreateManyInput>;
  winner?: Maybe<UserCreateOneInput>;
  loser?: Maybe<UserCreateOneInput>;
  closed?: Maybe<Boolean>;
  crowned?: Maybe<Boolean>;
  published?: Maybe<Boolean>;
  interactions?: Maybe<InteractionCreateManyWithoutDebateInput>;
  answerOne?: Maybe<String>;
  answerTwo?: Maybe<String>;
  image?: Maybe<String>;
}

export interface CommentCreateOneInput {
  create?: Maybe<CommentCreateInput>;
  connect?: Maybe<CommentWhereUniqueInput>;
}

export interface InteractionCreateManyWithoutDebateInput {
  create?: Maybe<
    InteractionCreateWithoutDebateInput[] | InteractionCreateWithoutDebateInput
  >;
  connect?: Maybe<InteractionWhereUniqueInput[] | InteractionWhereUniqueInput>;
}

export interface InteractionCreateWithoutDebateInput {
  id?: Maybe<ID_Input>;
  type: InteractionType;
  who: UserCreateOneWithoutInteractionsInput;
  comment?: Maybe<CommentCreateOneInput>;
}

export interface UserCreateOneWithoutInteractionsInput {
  create?: Maybe<UserCreateWithoutInteractionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutInteractionsInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  birthdate: DateTimeInput;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  blocked?: Maybe<UserCreateManyWithoutBlockingInput>;
  blocking?: Maybe<UserCreateManyWithoutBlockedInput>;
  debates?: Maybe<DebateCreateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateCreateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateCreateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationCreateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutSpeakersInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserCreatemailErrorsInput>;
}

export interface TrophyCreateManyWithoutUserInput {
  create?: Maybe<TrophyCreateWithoutUserInput[] | TrophyCreateWithoutUserInput>;
  connect?: Maybe<TrophyWhereUniqueInput[] | TrophyWhereUniqueInput>;
}

export interface TrophyCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  won: Boolean;
  type?: Maybe<TrophyType>;
  debate?: Maybe<DebateCreateOneInput>;
  comment?: Maybe<CommentCreateOneInput>;
}

export interface ConversationCreateManyWithoutSpeakersInput {
  create?: Maybe<
    | ConversationCreateWithoutSpeakersInput[]
    | ConversationCreateWithoutSpeakersInput
  >;
  connect?: Maybe<
    ConversationWhereUniqueInput[] | ConversationWhereUniqueInput
  >;
}

export interface ConversationCreateWithoutSpeakersInput {
  id?: Maybe<ID_Input>;
  messages?: Maybe<MessageCreateManyWithoutConversationInput>;
  deleted?: Maybe<String>;
}

export interface MessageCreateManyWithoutConversationInput {
  create?: Maybe<
    | MessageCreateWithoutConversationInput[]
    | MessageCreateWithoutConversationInput
  >;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface MessageCreateWithoutConversationInput {
  id?: Maybe<ID_Input>;
  content: String;
  to: UserCreateOneInput;
  from: UserCreateOneInput;
  read: Boolean;
  deleted?: Maybe<String>;
}

export interface UserCreatemailErrorsInput {
  set?: Maybe<Int[] | Int>;
}

export interface CommentCreateManyInput {
  create?: Maybe<CommentCreateInput[] | CommentCreateInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface ReportCreateManyWithoutDebateInput {
  create?: Maybe<
    ReportCreateWithoutDebateInput[] | ReportCreateWithoutDebateInput
  >;
  connect?: Maybe<ReportWhereUniqueInput[] | ReportWhereUniqueInput>;
}

export interface ReportCreateWithoutDebateInput {
  id?: Maybe<ID_Input>;
  from?: Maybe<UserCreateOneInput>;
  to?: Maybe<UserCreateOneInput>;
  type: ReportType;
  reason: ReportReason;
  reasonText?: Maybe<String>;
  comment?: Maybe<CommentCreateOneWithoutReportsInput>;
  treated?: Maybe<Boolean>;
}

export interface CommentCreateOneWithoutReportsInput {
  create?: Maybe<CommentCreateWithoutReportsInput>;
  connect?: Maybe<CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutReportsInput {
  id?: Maybe<ID_Input>;
  from: UserCreateOneInput;
  content: String;
  likes?: Maybe<UserCreateManyInput>;
  dislikes?: Maybe<UserCreateManyInput>;
  debate: DebateCreateOneWithoutCommentsInput;
  comments?: Maybe<CommentCreateManyInput>;
  nested?: Maybe<Boolean>;
}

export interface DebateCreateOneWithoutCommentsInput {
  create?: Maybe<DebateCreateWithoutCommentsInput>;
  connect?: Maybe<DebateWhereUniqueInput>;
}

export interface DebateCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  owner?: Maybe<UserCreateOneWithoutDebatesInput>;
  ownerBlue?: Maybe<UserCreateOneWithoutDebatesBlueInput>;
  ownerRed?: Maybe<UserCreateOneWithoutDebatesRedInput>;
  content: String;
  timelimit?: Maybe<DateTimeInput>;
  timelimitString?: Maybe<String>;
  type: DebateType;
  topComment?: Maybe<CommentCreateOneInput>;
  reports?: Maybe<ReportCreateManyWithoutDebateInput>;
  positives?: Maybe<UserCreateManyInput>;
  negatives?: Maybe<UserCreateManyInput>;
  redVotes?: Maybe<UserCreateManyInput>;
  blueVotes?: Maybe<UserCreateManyInput>;
  winner?: Maybe<UserCreateOneInput>;
  loser?: Maybe<UserCreateOneInput>;
  closed?: Maybe<Boolean>;
  crowned?: Maybe<Boolean>;
  published?: Maybe<Boolean>;
  interactions?: Maybe<InteractionCreateManyWithoutDebateInput>;
  answerOne?: Maybe<String>;
  answerTwo?: Maybe<String>;
  image?: Maybe<String>;
}

export interface InteractionCreateManyWithoutWhoInput {
  create?: Maybe<
    InteractionCreateWithoutWhoInput[] | InteractionCreateWithoutWhoInput
  >;
  connect?: Maybe<InteractionWhereUniqueInput[] | InteractionWhereUniqueInput>;
}

export interface InteractionCreateWithoutWhoInput {
  id?: Maybe<ID_Input>;
  type: InteractionType;
  debate?: Maybe<DebateCreateOneWithoutInteractionsInput>;
  comment?: Maybe<CommentCreateOneInput>;
}

export interface DebateCreateOneWithoutInteractionsInput {
  create?: Maybe<DebateCreateWithoutInteractionsInput>;
  connect?: Maybe<DebateWhereUniqueInput>;
}

export interface DebateCreateWithoutInteractionsInput {
  id?: Maybe<ID_Input>;
  owner?: Maybe<UserCreateOneWithoutDebatesInput>;
  ownerBlue?: Maybe<UserCreateOneWithoutDebatesBlueInput>;
  ownerRed?: Maybe<UserCreateOneWithoutDebatesRedInput>;
  content: String;
  timelimit?: Maybe<DateTimeInput>;
  timelimitString?: Maybe<String>;
  type: DebateType;
  comments?: Maybe<CommentCreateManyWithoutDebateInput>;
  topComment?: Maybe<CommentCreateOneInput>;
  reports?: Maybe<ReportCreateManyWithoutDebateInput>;
  positives?: Maybe<UserCreateManyInput>;
  negatives?: Maybe<UserCreateManyInput>;
  redVotes?: Maybe<UserCreateManyInput>;
  blueVotes?: Maybe<UserCreateManyInput>;
  winner?: Maybe<UserCreateOneInput>;
  loser?: Maybe<UserCreateOneInput>;
  closed?: Maybe<Boolean>;
  crowned?: Maybe<Boolean>;
  published?: Maybe<Boolean>;
  answerOne?: Maybe<String>;
  answerTwo?: Maybe<String>;
  image?: Maybe<String>;
}

export interface CommentUpdateInput {
  from?: Maybe<UserUpdateOneRequiredInput>;
  content?: Maybe<String>;
  likes?: Maybe<UserUpdateManyInput>;
  dislikes?: Maybe<UserUpdateManyInput>;
  reports?: Maybe<ReportUpdateManyWithoutCommentInput>;
  debate?: Maybe<DebateUpdateOneRequiredWithoutCommentsInput>;
  comments?: Maybe<CommentUpdateManyInput>;
  nested?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  blocked?: Maybe<UserUpdateManyWithoutBlockingInput>;
  blocking?: Maybe<UserUpdateManyWithoutBlockedInput>;
  debates?: Maybe<DebateUpdateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateUpdateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateUpdateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionUpdateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserUpdatemailErrorsInput>;
}

export interface UserUpdateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowingInput[]
    | UserUpdateWithWhereUniqueWithoutFollowingInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowingInput[]
    | UserUpsertWithWhereUniqueWithoutFollowingInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowingDataInput;
}

export interface UserUpdateWithoutFollowingDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  blocked?: Maybe<UserUpdateManyWithoutBlockingInput>;
  blocking?: Maybe<UserUpdateManyWithoutBlockedInput>;
  debates?: Maybe<DebateUpdateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateUpdateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateUpdateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionUpdateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserUpdatemailErrorsInput>;
}

export interface UserUpdateManyWithoutBlockingInput {
  create?: Maybe<
    UserCreateWithoutBlockingInput[] | UserCreateWithoutBlockingInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutBlockingInput[]
    | UserUpdateWithWhereUniqueWithoutBlockingInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutBlockingInput[]
    | UserUpsertWithWhereUniqueWithoutBlockingInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutBlockingInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutBlockingDataInput;
}

export interface UserUpdateWithoutBlockingDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  blocked?: Maybe<UserUpdateManyWithoutBlockingInput>;
  debates?: Maybe<DebateUpdateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateUpdateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateUpdateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionUpdateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserUpdatemailErrorsInput>;
}

export interface UserUpdateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowersInput[]
    | UserUpdateWithWhereUniqueWithoutFollowersInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowersInput[]
    | UserUpsertWithWhereUniqueWithoutFollowersInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowersDataInput;
}

export interface UserUpdateWithoutFollowersDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  blocked?: Maybe<UserUpdateManyWithoutBlockingInput>;
  blocking?: Maybe<UserUpdateManyWithoutBlockedInput>;
  debates?: Maybe<DebateUpdateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateUpdateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateUpdateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionUpdateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserUpdatemailErrorsInput>;
}

export interface UserUpdateManyWithoutBlockedInput {
  create?: Maybe<
    UserCreateWithoutBlockedInput[] | UserCreateWithoutBlockedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutBlockedInput[]
    | UserUpdateWithWhereUniqueWithoutBlockedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutBlockedInput[]
    | UserUpsertWithWhereUniqueWithoutBlockedInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutBlockedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutBlockedDataInput;
}

export interface UserUpdateWithoutBlockedDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  blocking?: Maybe<UserUpdateManyWithoutBlockedInput>;
  debates?: Maybe<DebateUpdateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateUpdateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateUpdateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionUpdateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserUpdatemailErrorsInput>;
}

export interface DebateUpdateManyWithoutOwnerInput {
  create?: Maybe<
    DebateCreateWithoutOwnerInput[] | DebateCreateWithoutOwnerInput
  >;
  delete?: Maybe<DebateWhereUniqueInput[] | DebateWhereUniqueInput>;
  connect?: Maybe<DebateWhereUniqueInput[] | DebateWhereUniqueInput>;
  set?: Maybe<DebateWhereUniqueInput[] | DebateWhereUniqueInput>;
  disconnect?: Maybe<DebateWhereUniqueInput[] | DebateWhereUniqueInput>;
  update?: Maybe<
    | DebateUpdateWithWhereUniqueWithoutOwnerInput[]
    | DebateUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | DebateUpsertWithWhereUniqueWithoutOwnerInput[]
    | DebateUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<DebateScalarWhereInput[] | DebateScalarWhereInput>;
  updateMany?: Maybe<
    | DebateUpdateManyWithWhereNestedInput[]
    | DebateUpdateManyWithWhereNestedInput
  >;
}

export interface DebateUpdateWithWhereUniqueWithoutOwnerInput {
  where: DebateWhereUniqueInput;
  data: DebateUpdateWithoutOwnerDataInput;
}

export interface DebateUpdateWithoutOwnerDataInput {
  ownerBlue?: Maybe<UserUpdateOneWithoutDebatesBlueInput>;
  ownerRed?: Maybe<UserUpdateOneWithoutDebatesRedInput>;
  content?: Maybe<String>;
  timelimit?: Maybe<DateTimeInput>;
  timelimitString?: Maybe<String>;
  type?: Maybe<DebateType>;
  comments?: Maybe<CommentUpdateManyWithoutDebateInput>;
  topComment?: Maybe<CommentUpdateOneInput>;
  reports?: Maybe<ReportUpdateManyWithoutDebateInput>;
  positives?: Maybe<UserUpdateManyInput>;
  negatives?: Maybe<UserUpdateManyInput>;
  redVotes?: Maybe<UserUpdateManyInput>;
  blueVotes?: Maybe<UserUpdateManyInput>;
  winner?: Maybe<UserUpdateOneInput>;
  loser?: Maybe<UserUpdateOneInput>;
  closed?: Maybe<Boolean>;
  crowned?: Maybe<Boolean>;
  published?: Maybe<Boolean>;
  interactions?: Maybe<InteractionUpdateManyWithoutDebateInput>;
  answerOne?: Maybe<String>;
  answerTwo?: Maybe<String>;
  image?: Maybe<String>;
}

export interface UserUpdateOneWithoutDebatesBlueInput {
  create?: Maybe<UserCreateWithoutDebatesBlueInput>;
  update?: Maybe<UserUpdateWithoutDebatesBlueDataInput>;
  upsert?: Maybe<UserUpsertWithoutDebatesBlueInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutDebatesBlueDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  blocked?: Maybe<UserUpdateManyWithoutBlockingInput>;
  blocking?: Maybe<UserUpdateManyWithoutBlockedInput>;
  debates?: Maybe<DebateUpdateManyWithoutOwnerInput>;
  debatesRed?: Maybe<DebateUpdateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionUpdateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserUpdatemailErrorsInput>;
}

export interface DebateUpdateManyWithoutOwnerRedInput {
  create?: Maybe<
    DebateCreateWithoutOwnerRedInput[] | DebateCreateWithoutOwnerRedInput
  >;
  delete?: Maybe<DebateWhereUniqueInput[] | DebateWhereUniqueInput>;
  connect?: Maybe<DebateWhereUniqueInput[] | DebateWhereUniqueInput>;
  set?: Maybe<DebateWhereUniqueInput[] | DebateWhereUniqueInput>;
  disconnect?: Maybe<DebateWhereUniqueInput[] | DebateWhereUniqueInput>;
  update?: Maybe<
    | DebateUpdateWithWhereUniqueWithoutOwnerRedInput[]
    | DebateUpdateWithWhereUniqueWithoutOwnerRedInput
  >;
  upsert?: Maybe<
    | DebateUpsertWithWhereUniqueWithoutOwnerRedInput[]
    | DebateUpsertWithWhereUniqueWithoutOwnerRedInput
  >;
  deleteMany?: Maybe<DebateScalarWhereInput[] | DebateScalarWhereInput>;
  updateMany?: Maybe<
    | DebateUpdateManyWithWhereNestedInput[]
    | DebateUpdateManyWithWhereNestedInput
  >;
}

export interface DebateUpdateWithWhereUniqueWithoutOwnerRedInput {
  where: DebateWhereUniqueInput;
  data: DebateUpdateWithoutOwnerRedDataInput;
}

export interface DebateUpdateWithoutOwnerRedDataInput {
  owner?: Maybe<UserUpdateOneWithoutDebatesInput>;
  ownerBlue?: Maybe<UserUpdateOneWithoutDebatesBlueInput>;
  content?: Maybe<String>;
  timelimit?: Maybe<DateTimeInput>;
  timelimitString?: Maybe<String>;
  type?: Maybe<DebateType>;
  comments?: Maybe<CommentUpdateManyWithoutDebateInput>;
  topComment?: Maybe<CommentUpdateOneInput>;
  reports?: Maybe<ReportUpdateManyWithoutDebateInput>;
  positives?: Maybe<UserUpdateManyInput>;
  negatives?: Maybe<UserUpdateManyInput>;
  redVotes?: Maybe<UserUpdateManyInput>;
  blueVotes?: Maybe<UserUpdateManyInput>;
  winner?: Maybe<UserUpdateOneInput>;
  loser?: Maybe<UserUpdateOneInput>;
  closed?: Maybe<Boolean>;
  crowned?: Maybe<Boolean>;
  published?: Maybe<Boolean>;
  interactions?: Maybe<InteractionUpdateManyWithoutDebateInput>;
  answerOne?: Maybe<String>;
  answerTwo?: Maybe<String>;
  image?: Maybe<String>;
}

export interface UserUpdateOneWithoutDebatesInput {
  create?: Maybe<UserCreateWithoutDebatesInput>;
  update?: Maybe<UserUpdateWithoutDebatesDataInput>;
  upsert?: Maybe<UserUpsertWithoutDebatesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutDebatesDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  blocked?: Maybe<UserUpdateManyWithoutBlockingInput>;
  blocking?: Maybe<UserUpdateManyWithoutBlockedInput>;
  debatesBlue?: Maybe<DebateUpdateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateUpdateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionUpdateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserUpdatemailErrorsInput>;
}

export interface DebateUpdateManyWithoutOwnerBlueInput {
  create?: Maybe<
    DebateCreateWithoutOwnerBlueInput[] | DebateCreateWithoutOwnerBlueInput
  >;
  delete?: Maybe<DebateWhereUniqueInput[] | DebateWhereUniqueInput>;
  connect?: Maybe<DebateWhereUniqueInput[] | DebateWhereUniqueInput>;
  set?: Maybe<DebateWhereUniqueInput[] | DebateWhereUniqueInput>;
  disconnect?: Maybe<DebateWhereUniqueInput[] | DebateWhereUniqueInput>;
  update?: Maybe<
    | DebateUpdateWithWhereUniqueWithoutOwnerBlueInput[]
    | DebateUpdateWithWhereUniqueWithoutOwnerBlueInput
  >;
  upsert?: Maybe<
    | DebateUpsertWithWhereUniqueWithoutOwnerBlueInput[]
    | DebateUpsertWithWhereUniqueWithoutOwnerBlueInput
  >;
  deleteMany?: Maybe<DebateScalarWhereInput[] | DebateScalarWhereInput>;
  updateMany?: Maybe<
    | DebateUpdateManyWithWhereNestedInput[]
    | DebateUpdateManyWithWhereNestedInput
  >;
}

export interface DebateUpdateWithWhereUniqueWithoutOwnerBlueInput {
  where: DebateWhereUniqueInput;
  data: DebateUpdateWithoutOwnerBlueDataInput;
}

export interface DebateUpdateWithoutOwnerBlueDataInput {
  owner?: Maybe<UserUpdateOneWithoutDebatesInput>;
  ownerRed?: Maybe<UserUpdateOneWithoutDebatesRedInput>;
  content?: Maybe<String>;
  timelimit?: Maybe<DateTimeInput>;
  timelimitString?: Maybe<String>;
  type?: Maybe<DebateType>;
  comments?: Maybe<CommentUpdateManyWithoutDebateInput>;
  topComment?: Maybe<CommentUpdateOneInput>;
  reports?: Maybe<ReportUpdateManyWithoutDebateInput>;
  positives?: Maybe<UserUpdateManyInput>;
  negatives?: Maybe<UserUpdateManyInput>;
  redVotes?: Maybe<UserUpdateManyInput>;
  blueVotes?: Maybe<UserUpdateManyInput>;
  winner?: Maybe<UserUpdateOneInput>;
  loser?: Maybe<UserUpdateOneInput>;
  closed?: Maybe<Boolean>;
  crowned?: Maybe<Boolean>;
  published?: Maybe<Boolean>;
  interactions?: Maybe<InteractionUpdateManyWithoutDebateInput>;
  answerOne?: Maybe<String>;
  answerTwo?: Maybe<String>;
  image?: Maybe<String>;
}

export interface UserUpdateOneWithoutDebatesRedInput {
  create?: Maybe<UserCreateWithoutDebatesRedInput>;
  update?: Maybe<UserUpdateWithoutDebatesRedDataInput>;
  upsert?: Maybe<UserUpsertWithoutDebatesRedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutDebatesRedDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  blocked?: Maybe<UserUpdateManyWithoutBlockingInput>;
  blocking?: Maybe<UserUpdateManyWithoutBlockedInput>;
  debates?: Maybe<DebateUpdateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateUpdateManyWithoutOwnerBlueInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionUpdateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserUpdatemailErrorsInput>;
}

export interface NotificationUpdateManyWithoutWhoInput {
  create?: Maybe<
    NotificationCreateWithoutWhoInput[] | NotificationCreateWithoutWhoInput
  >;
  delete?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  set?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  disconnect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  update?: Maybe<
    | NotificationUpdateWithWhereUniqueWithoutWhoInput[]
    | NotificationUpdateWithWhereUniqueWithoutWhoInput
  >;
  upsert?: Maybe<
    | NotificationUpsertWithWhereUniqueWithoutWhoInput[]
    | NotificationUpsertWithWhereUniqueWithoutWhoInput
  >;
  deleteMany?: Maybe<
    NotificationScalarWhereInput[] | NotificationScalarWhereInput
  >;
  updateMany?: Maybe<
    | NotificationUpdateManyWithWhereNestedInput[]
    | NotificationUpdateManyWithWhereNestedInput
  >;
}

export interface NotificationUpdateWithWhereUniqueWithoutWhoInput {
  where: NotificationWhereUniqueInput;
  data: NotificationUpdateWithoutWhoDataInput;
}

export interface NotificationUpdateWithoutWhoDataInput {
  userId?: Maybe<String>;
  type?: Maybe<NotificationType>;
  status?: Maybe<NotificationStatus>;
  new?: Maybe<Boolean>;
  debate?: Maybe<DebateUpdateOneInput>;
  comment?: Maybe<CommentUpdateOneInput>;
}

export interface DebateUpdateOneInput {
  create?: Maybe<DebateCreateInput>;
  update?: Maybe<DebateUpdateDataInput>;
  upsert?: Maybe<DebateUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<DebateWhereUniqueInput>;
}

export interface DebateUpdateDataInput {
  owner?: Maybe<UserUpdateOneWithoutDebatesInput>;
  ownerBlue?: Maybe<UserUpdateOneWithoutDebatesBlueInput>;
  ownerRed?: Maybe<UserUpdateOneWithoutDebatesRedInput>;
  content?: Maybe<String>;
  timelimit?: Maybe<DateTimeInput>;
  timelimitString?: Maybe<String>;
  type?: Maybe<DebateType>;
  comments?: Maybe<CommentUpdateManyWithoutDebateInput>;
  topComment?: Maybe<CommentUpdateOneInput>;
  reports?: Maybe<ReportUpdateManyWithoutDebateInput>;
  positives?: Maybe<UserUpdateManyInput>;
  negatives?: Maybe<UserUpdateManyInput>;
  redVotes?: Maybe<UserUpdateManyInput>;
  blueVotes?: Maybe<UserUpdateManyInput>;
  winner?: Maybe<UserUpdateOneInput>;
  loser?: Maybe<UserUpdateOneInput>;
  closed?: Maybe<Boolean>;
  crowned?: Maybe<Boolean>;
  published?: Maybe<Boolean>;
  interactions?: Maybe<InteractionUpdateManyWithoutDebateInput>;
  answerOne?: Maybe<String>;
  answerTwo?: Maybe<String>;
  image?: Maybe<String>;
}

export interface CommentUpdateManyWithoutDebateInput {
  create?: Maybe<
    CommentCreateWithoutDebateInput[] | CommentCreateWithoutDebateInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutDebateInput[]
    | CommentUpdateWithWhereUniqueWithoutDebateInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutDebateInput[]
    | CommentUpsertWithWhereUniqueWithoutDebateInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutDebateInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutDebateDataInput;
}

export interface CommentUpdateWithoutDebateDataInput {
  from?: Maybe<UserUpdateOneRequiredInput>;
  content?: Maybe<String>;
  likes?: Maybe<UserUpdateManyInput>;
  dislikes?: Maybe<UserUpdateManyInput>;
  reports?: Maybe<ReportUpdateManyWithoutCommentInput>;
  comments?: Maybe<CommentUpdateManyInput>;
  nested?: Maybe<Boolean>;
}

export interface UserUpdateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  birthdate_not?: Maybe<DateTimeInput>;
  birthdate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthdate_lt?: Maybe<DateTimeInput>;
  birthdate_lte?: Maybe<DateTimeInput>;
  birthdate_gt?: Maybe<DateTimeInput>;
  birthdate_gte?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  certified?: Maybe<Boolean>;
  certified_not?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  gender_not?: Maybe<Gender>;
  gender_in?: Maybe<Gender[] | Gender>;
  gender_not_in?: Maybe<Gender[] | Gender>;
  profilePicture?: Maybe<String>;
  profilePicture_not?: Maybe<String>;
  profilePicture_in?: Maybe<String[] | String>;
  profilePicture_not_in?: Maybe<String[] | String>;
  profilePicture_lt?: Maybe<String>;
  profilePicture_lte?: Maybe<String>;
  profilePicture_gt?: Maybe<String>;
  profilePicture_gte?: Maybe<String>;
  profilePicture_contains?: Maybe<String>;
  profilePicture_not_contains?: Maybe<String>;
  profilePicture_starts_with?: Maybe<String>;
  profilePicture_not_starts_with?: Maybe<String>;
  profilePicture_ends_with?: Maybe<String>;
  profilePicture_not_ends_with?: Maybe<String>;
  coverPicture?: Maybe<String>;
  coverPicture_not?: Maybe<String>;
  coverPicture_in?: Maybe<String[] | String>;
  coverPicture_not_in?: Maybe<String[] | String>;
  coverPicture_lt?: Maybe<String>;
  coverPicture_lte?: Maybe<String>;
  coverPicture_gt?: Maybe<String>;
  coverPicture_gte?: Maybe<String>;
  coverPicture_contains?: Maybe<String>;
  coverPicture_not_contains?: Maybe<String>;
  coverPicture_starts_with?: Maybe<String>;
  coverPicture_not_starts_with?: Maybe<String>;
  coverPicture_ends_with?: Maybe<String>;
  coverPicture_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  language?: Maybe<Language>;
  language_not?: Maybe<Language>;
  language_in?: Maybe<Language[] | Language>;
  language_not_in?: Maybe<Language[] | Language>;
  theme?: Maybe<Theme>;
  theme_not?: Maybe<Theme>;
  theme_in?: Maybe<Theme[] | Theme>;
  theme_not_in?: Maybe<Theme[] | Theme>;
  crowned?: Maybe<Boolean>;
  crowned_not?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  crownedDate_not?: Maybe<DateTimeInput>;
  crownedDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  crownedDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  crownedDate_lt?: Maybe<DateTimeInput>;
  crownedDate_lte?: Maybe<DateTimeInput>;
  crownedDate_gt?: Maybe<DateTimeInput>;
  crownedDate_gte?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  private_not?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  lastConnected_not?: Maybe<DateTimeInput>;
  lastConnected_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastConnected_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  lastConnected_lt?: Maybe<DateTimeInput>;
  lastConnected_lte?: Maybe<DateTimeInput>;
  lastConnected_gt?: Maybe<DateTimeInput>;
  lastConnected_gte?: Maybe<DateTimeInput>;
  mailStatus?: Maybe<MailStatus>;
  mailStatus_not?: Maybe<MailStatus>;
  mailStatus_in?: Maybe<MailStatus[] | MailStatus>;
  mailStatus_not_in?: Maybe<MailStatus[] | MailStatus>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserUpdatemailErrorsInput>;
}

export interface UserUpdatemailErrorsInput {
  set?: Maybe<Int[] | Int>;
}

export interface ReportUpdateManyWithoutCommentInput {
  create?: Maybe<
    ReportCreateWithoutCommentInput[] | ReportCreateWithoutCommentInput
  >;
  delete?: Maybe<ReportWhereUniqueInput[] | ReportWhereUniqueInput>;
  connect?: Maybe<ReportWhereUniqueInput[] | ReportWhereUniqueInput>;
  set?: Maybe<ReportWhereUniqueInput[] | ReportWhereUniqueInput>;
  disconnect?: Maybe<ReportWhereUniqueInput[] | ReportWhereUniqueInput>;
  update?: Maybe<
    | ReportUpdateWithWhereUniqueWithoutCommentInput[]
    | ReportUpdateWithWhereUniqueWithoutCommentInput
  >;
  upsert?: Maybe<
    | ReportUpsertWithWhereUniqueWithoutCommentInput[]
    | ReportUpsertWithWhereUniqueWithoutCommentInput
  >;
  deleteMany?: Maybe<ReportScalarWhereInput[] | ReportScalarWhereInput>;
  updateMany?: Maybe<
    | ReportUpdateManyWithWhereNestedInput[]
    | ReportUpdateManyWithWhereNestedInput
  >;
}

export interface ReportUpdateWithWhereUniqueWithoutCommentInput {
  where: ReportWhereUniqueInput;
  data: ReportUpdateWithoutCommentDataInput;
}

export interface ReportUpdateWithoutCommentDataInput {
  from?: Maybe<UserUpdateOneInput>;
  to?: Maybe<UserUpdateOneInput>;
  type?: Maybe<ReportType>;
  reason?: Maybe<ReportReason>;
  reasonText?: Maybe<String>;
  debate?: Maybe<DebateUpdateOneWithoutReportsInput>;
  treated?: Maybe<Boolean>;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface DebateUpdateOneWithoutReportsInput {
  create?: Maybe<DebateCreateWithoutReportsInput>;
  update?: Maybe<DebateUpdateWithoutReportsDataInput>;
  upsert?: Maybe<DebateUpsertWithoutReportsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<DebateWhereUniqueInput>;
}

export interface DebateUpdateWithoutReportsDataInput {
  owner?: Maybe<UserUpdateOneWithoutDebatesInput>;
  ownerBlue?: Maybe<UserUpdateOneWithoutDebatesBlueInput>;
  ownerRed?: Maybe<UserUpdateOneWithoutDebatesRedInput>;
  content?: Maybe<String>;
  timelimit?: Maybe<DateTimeInput>;
  timelimitString?: Maybe<String>;
  type?: Maybe<DebateType>;
  comments?: Maybe<CommentUpdateManyWithoutDebateInput>;
  topComment?: Maybe<CommentUpdateOneInput>;
  positives?: Maybe<UserUpdateManyInput>;
  negatives?: Maybe<UserUpdateManyInput>;
  redVotes?: Maybe<UserUpdateManyInput>;
  blueVotes?: Maybe<UserUpdateManyInput>;
  winner?: Maybe<UserUpdateOneInput>;
  loser?: Maybe<UserUpdateOneInput>;
  closed?: Maybe<Boolean>;
  crowned?: Maybe<Boolean>;
  published?: Maybe<Boolean>;
  interactions?: Maybe<InteractionUpdateManyWithoutDebateInput>;
  answerOne?: Maybe<String>;
  answerTwo?: Maybe<String>;
  image?: Maybe<String>;
}

export interface CommentUpdateOneInput {
  create?: Maybe<CommentCreateInput>;
  update?: Maybe<CommentUpdateDataInput>;
  upsert?: Maybe<CommentUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CommentWhereUniqueInput>;
}

export interface CommentUpdateDataInput {
  from?: Maybe<UserUpdateOneRequiredInput>;
  content?: Maybe<String>;
  likes?: Maybe<UserUpdateManyInput>;
  dislikes?: Maybe<UserUpdateManyInput>;
  reports?: Maybe<ReportUpdateManyWithoutCommentInput>;
  debate?: Maybe<DebateUpdateOneRequiredWithoutCommentsInput>;
  comments?: Maybe<CommentUpdateManyInput>;
  nested?: Maybe<Boolean>;
}

export interface DebateUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<DebateCreateWithoutCommentsInput>;
  update?: Maybe<DebateUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<DebateUpsertWithoutCommentsInput>;
  connect?: Maybe<DebateWhereUniqueInput>;
}

export interface DebateUpdateWithoutCommentsDataInput {
  owner?: Maybe<UserUpdateOneWithoutDebatesInput>;
  ownerBlue?: Maybe<UserUpdateOneWithoutDebatesBlueInput>;
  ownerRed?: Maybe<UserUpdateOneWithoutDebatesRedInput>;
  content?: Maybe<String>;
  timelimit?: Maybe<DateTimeInput>;
  timelimitString?: Maybe<String>;
  type?: Maybe<DebateType>;
  topComment?: Maybe<CommentUpdateOneInput>;
  reports?: Maybe<ReportUpdateManyWithoutDebateInput>;
  positives?: Maybe<UserUpdateManyInput>;
  negatives?: Maybe<UserUpdateManyInput>;
  redVotes?: Maybe<UserUpdateManyInput>;
  blueVotes?: Maybe<UserUpdateManyInput>;
  winner?: Maybe<UserUpdateOneInput>;
  loser?: Maybe<UserUpdateOneInput>;
  closed?: Maybe<Boolean>;
  crowned?: Maybe<Boolean>;
  published?: Maybe<Boolean>;
  interactions?: Maybe<InteractionUpdateManyWithoutDebateInput>;
  answerOne?: Maybe<String>;
  answerTwo?: Maybe<String>;
  image?: Maybe<String>;
}

export interface ReportUpdateManyWithoutDebateInput {
  create?: Maybe<
    ReportCreateWithoutDebateInput[] | ReportCreateWithoutDebateInput
  >;
  delete?: Maybe<ReportWhereUniqueInput[] | ReportWhereUniqueInput>;
  connect?: Maybe<ReportWhereUniqueInput[] | ReportWhereUniqueInput>;
  set?: Maybe<ReportWhereUniqueInput[] | ReportWhereUniqueInput>;
  disconnect?: Maybe<ReportWhereUniqueInput[] | ReportWhereUniqueInput>;
  update?: Maybe<
    | ReportUpdateWithWhereUniqueWithoutDebateInput[]
    | ReportUpdateWithWhereUniqueWithoutDebateInput
  >;
  upsert?: Maybe<
    | ReportUpsertWithWhereUniqueWithoutDebateInput[]
    | ReportUpsertWithWhereUniqueWithoutDebateInput
  >;
  deleteMany?: Maybe<ReportScalarWhereInput[] | ReportScalarWhereInput>;
  updateMany?: Maybe<
    | ReportUpdateManyWithWhereNestedInput[]
    | ReportUpdateManyWithWhereNestedInput
  >;
}

export interface ReportUpdateWithWhereUniqueWithoutDebateInput {
  where: ReportWhereUniqueInput;
  data: ReportUpdateWithoutDebateDataInput;
}

export interface ReportUpdateWithoutDebateDataInput {
  from?: Maybe<UserUpdateOneInput>;
  to?: Maybe<UserUpdateOneInput>;
  type?: Maybe<ReportType>;
  reason?: Maybe<ReportReason>;
  reasonText?: Maybe<String>;
  comment?: Maybe<CommentUpdateOneWithoutReportsInput>;
  treated?: Maybe<Boolean>;
}

export interface CommentUpdateOneWithoutReportsInput {
  create?: Maybe<CommentCreateWithoutReportsInput>;
  update?: Maybe<CommentUpdateWithoutReportsDataInput>;
  upsert?: Maybe<CommentUpsertWithoutReportsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CommentWhereUniqueInput>;
}

export interface CommentUpdateWithoutReportsDataInput {
  from?: Maybe<UserUpdateOneRequiredInput>;
  content?: Maybe<String>;
  likes?: Maybe<UserUpdateManyInput>;
  dislikes?: Maybe<UserUpdateManyInput>;
  debate?: Maybe<DebateUpdateOneRequiredWithoutCommentsInput>;
  comments?: Maybe<CommentUpdateManyInput>;
  nested?: Maybe<Boolean>;
}

export interface CommentUpdateManyInput {
  create?: Maybe<CommentCreateInput[] | CommentCreateInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueNestedInput[]
    | CommentUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueNestedInput[]
    | CommentUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateDataInput;
}

export interface CommentUpsertWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateDataInput;
  create: CommentCreateInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  nested?: Maybe<Boolean>;
  nested_not?: Maybe<Boolean>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  content?: Maybe<String>;
  nested?: Maybe<Boolean>;
}

export interface CommentUpsertWithoutReportsInput {
  update: CommentUpdateWithoutReportsDataInput;
  create: CommentCreateWithoutReportsInput;
}

export interface ReportUpsertWithWhereUniqueWithoutDebateInput {
  where: ReportWhereUniqueInput;
  update: ReportUpdateWithoutDebateDataInput;
  create: ReportCreateWithoutDebateInput;
}

export interface ReportScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<ReportType>;
  type_not?: Maybe<ReportType>;
  type_in?: Maybe<ReportType[] | ReportType>;
  type_not_in?: Maybe<ReportType[] | ReportType>;
  reason?: Maybe<ReportReason>;
  reason_not?: Maybe<ReportReason>;
  reason_in?: Maybe<ReportReason[] | ReportReason>;
  reason_not_in?: Maybe<ReportReason[] | ReportReason>;
  reasonText?: Maybe<String>;
  reasonText_not?: Maybe<String>;
  reasonText_in?: Maybe<String[] | String>;
  reasonText_not_in?: Maybe<String[] | String>;
  reasonText_lt?: Maybe<String>;
  reasonText_lte?: Maybe<String>;
  reasonText_gt?: Maybe<String>;
  reasonText_gte?: Maybe<String>;
  reasonText_contains?: Maybe<String>;
  reasonText_not_contains?: Maybe<String>;
  reasonText_starts_with?: Maybe<String>;
  reasonText_not_starts_with?: Maybe<String>;
  reasonText_ends_with?: Maybe<String>;
  reasonText_not_ends_with?: Maybe<String>;
  treated?: Maybe<Boolean>;
  treated_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ReportScalarWhereInput[] | ReportScalarWhereInput>;
  OR?: Maybe<ReportScalarWhereInput[] | ReportScalarWhereInput>;
  NOT?: Maybe<ReportScalarWhereInput[] | ReportScalarWhereInput>;
}

export interface ReportUpdateManyWithWhereNestedInput {
  where: ReportScalarWhereInput;
  data: ReportUpdateManyDataInput;
}

export interface ReportUpdateManyDataInput {
  type?: Maybe<ReportType>;
  reason?: Maybe<ReportReason>;
  reasonText?: Maybe<String>;
  treated?: Maybe<Boolean>;
}

export interface InteractionUpdateManyWithoutDebateInput {
  create?: Maybe<
    InteractionCreateWithoutDebateInput[] | InteractionCreateWithoutDebateInput
  >;
  delete?: Maybe<InteractionWhereUniqueInput[] | InteractionWhereUniqueInput>;
  connect?: Maybe<InteractionWhereUniqueInput[] | InteractionWhereUniqueInput>;
  set?: Maybe<InteractionWhereUniqueInput[] | InteractionWhereUniqueInput>;
  disconnect?: Maybe<
    InteractionWhereUniqueInput[] | InteractionWhereUniqueInput
  >;
  update?: Maybe<
    | InteractionUpdateWithWhereUniqueWithoutDebateInput[]
    | InteractionUpdateWithWhereUniqueWithoutDebateInput
  >;
  upsert?: Maybe<
    | InteractionUpsertWithWhereUniqueWithoutDebateInput[]
    | InteractionUpsertWithWhereUniqueWithoutDebateInput
  >;
  deleteMany?: Maybe<
    InteractionScalarWhereInput[] | InteractionScalarWhereInput
  >;
  updateMany?: Maybe<
    | InteractionUpdateManyWithWhereNestedInput[]
    | InteractionUpdateManyWithWhereNestedInput
  >;
}

export interface InteractionUpdateWithWhereUniqueWithoutDebateInput {
  where: InteractionWhereUniqueInput;
  data: InteractionUpdateWithoutDebateDataInput;
}

export interface InteractionUpdateWithoutDebateDataInput {
  type?: Maybe<InteractionType>;
  who?: Maybe<UserUpdateOneRequiredWithoutInteractionsInput>;
  comment?: Maybe<CommentUpdateOneInput>;
}

export interface UserUpdateOneRequiredWithoutInteractionsInput {
  create?: Maybe<UserCreateWithoutInteractionsInput>;
  update?: Maybe<UserUpdateWithoutInteractionsDataInput>;
  upsert?: Maybe<UserUpsertWithoutInteractionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutInteractionsDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  blocked?: Maybe<UserUpdateManyWithoutBlockingInput>;
  blocking?: Maybe<UserUpdateManyWithoutBlockedInput>;
  debates?: Maybe<DebateUpdateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateUpdateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateUpdateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutSpeakersInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserUpdatemailErrorsInput>;
}

export interface TrophyUpdateManyWithoutUserInput {
  create?: Maybe<TrophyCreateWithoutUserInput[] | TrophyCreateWithoutUserInput>;
  delete?: Maybe<TrophyWhereUniqueInput[] | TrophyWhereUniqueInput>;
  connect?: Maybe<TrophyWhereUniqueInput[] | TrophyWhereUniqueInput>;
  set?: Maybe<TrophyWhereUniqueInput[] | TrophyWhereUniqueInput>;
  disconnect?: Maybe<TrophyWhereUniqueInput[] | TrophyWhereUniqueInput>;
  update?: Maybe<
    | TrophyUpdateWithWhereUniqueWithoutUserInput[]
    | TrophyUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | TrophyUpsertWithWhereUniqueWithoutUserInput[]
    | TrophyUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<TrophyScalarWhereInput[] | TrophyScalarWhereInput>;
  updateMany?: Maybe<
    | TrophyUpdateManyWithWhereNestedInput[]
    | TrophyUpdateManyWithWhereNestedInput
  >;
}

export interface TrophyUpdateWithWhereUniqueWithoutUserInput {
  where: TrophyWhereUniqueInput;
  data: TrophyUpdateWithoutUserDataInput;
}

export interface TrophyUpdateWithoutUserDataInput {
  won?: Maybe<Boolean>;
  type?: Maybe<TrophyType>;
  debate?: Maybe<DebateUpdateOneInput>;
  comment?: Maybe<CommentUpdateOneInput>;
}

export interface TrophyUpsertWithWhereUniqueWithoutUserInput {
  where: TrophyWhereUniqueInput;
  update: TrophyUpdateWithoutUserDataInput;
  create: TrophyCreateWithoutUserInput;
}

export interface TrophyScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  won?: Maybe<Boolean>;
  won_not?: Maybe<Boolean>;
  type?: Maybe<TrophyType>;
  type_not?: Maybe<TrophyType>;
  type_in?: Maybe<TrophyType[] | TrophyType>;
  type_not_in?: Maybe<TrophyType[] | TrophyType>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TrophyScalarWhereInput[] | TrophyScalarWhereInput>;
  OR?: Maybe<TrophyScalarWhereInput[] | TrophyScalarWhereInput>;
  NOT?: Maybe<TrophyScalarWhereInput[] | TrophyScalarWhereInput>;
}

export interface TrophyUpdateManyWithWhereNestedInput {
  where: TrophyScalarWhereInput;
  data: TrophyUpdateManyDataInput;
}

export interface TrophyUpdateManyDataInput {
  won?: Maybe<Boolean>;
  type?: Maybe<TrophyType>;
}

export interface ConversationUpdateManyWithoutSpeakersInput {
  create?: Maybe<
    | ConversationCreateWithoutSpeakersInput[]
    | ConversationCreateWithoutSpeakersInput
  >;
  delete?: Maybe<ConversationWhereUniqueInput[] | ConversationWhereUniqueInput>;
  connect?: Maybe<
    ConversationWhereUniqueInput[] | ConversationWhereUniqueInput
  >;
  set?: Maybe<ConversationWhereUniqueInput[] | ConversationWhereUniqueInput>;
  disconnect?: Maybe<
    ConversationWhereUniqueInput[] | ConversationWhereUniqueInput
  >;
  update?: Maybe<
    | ConversationUpdateWithWhereUniqueWithoutSpeakersInput[]
    | ConversationUpdateWithWhereUniqueWithoutSpeakersInput
  >;
  upsert?: Maybe<
    | ConversationUpsertWithWhereUniqueWithoutSpeakersInput[]
    | ConversationUpsertWithWhereUniqueWithoutSpeakersInput
  >;
  deleteMany?: Maybe<
    ConversationScalarWhereInput[] | ConversationScalarWhereInput
  >;
  updateMany?: Maybe<
    | ConversationUpdateManyWithWhereNestedInput[]
    | ConversationUpdateManyWithWhereNestedInput
  >;
}

export interface ConversationUpdateWithWhereUniqueWithoutSpeakersInput {
  where: ConversationWhereUniqueInput;
  data: ConversationUpdateWithoutSpeakersDataInput;
}

export interface ConversationUpdateWithoutSpeakersDataInput {
  messages?: Maybe<MessageUpdateManyWithoutConversationInput>;
  deleted?: Maybe<String>;
}

export interface MessageUpdateManyWithoutConversationInput {
  create?: Maybe<
    | MessageCreateWithoutConversationInput[]
    | MessageCreateWithoutConversationInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutConversationInput[]
    | MessageUpdateWithWhereUniqueWithoutConversationInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutConversationInput[]
    | MessageUpsertWithWhereUniqueWithoutConversationInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface MessageUpdateWithWhereUniqueWithoutConversationInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutConversationDataInput;
}

export interface MessageUpdateWithoutConversationDataInput {
  content?: Maybe<String>;
  to?: Maybe<UserUpdateOneRequiredInput>;
  from?: Maybe<UserUpdateOneRequiredInput>;
  read?: Maybe<Boolean>;
  deleted?: Maybe<String>;
}

export interface MessageUpsertWithWhereUniqueWithoutConversationInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutConversationDataInput;
  create: MessageCreateWithoutConversationInput;
}

export interface MessageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  read?: Maybe<Boolean>;
  read_not?: Maybe<Boolean>;
  deleted?: Maybe<String>;
  deleted_not?: Maybe<String>;
  deleted_in?: Maybe<String[] | String>;
  deleted_not_in?: Maybe<String[] | String>;
  deleted_lt?: Maybe<String>;
  deleted_lte?: Maybe<String>;
  deleted_gt?: Maybe<String>;
  deleted_gte?: Maybe<String>;
  deleted_contains?: Maybe<String>;
  deleted_not_contains?: Maybe<String>;
  deleted_starts_with?: Maybe<String>;
  deleted_not_starts_with?: Maybe<String>;
  deleted_ends_with?: Maybe<String>;
  deleted_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  OR?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  NOT?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface MessageUpdateManyDataInput {
  content?: Maybe<String>;
  read?: Maybe<Boolean>;
  deleted?: Maybe<String>;
}

export interface ConversationUpsertWithWhereUniqueWithoutSpeakersInput {
  where: ConversationWhereUniqueInput;
  update: ConversationUpdateWithoutSpeakersDataInput;
  create: ConversationCreateWithoutSpeakersInput;
}

export interface ConversationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  deleted?: Maybe<String>;
  deleted_not?: Maybe<String>;
  deleted_in?: Maybe<String[] | String>;
  deleted_not_in?: Maybe<String[] | String>;
  deleted_lt?: Maybe<String>;
  deleted_lte?: Maybe<String>;
  deleted_gt?: Maybe<String>;
  deleted_gte?: Maybe<String>;
  deleted_contains?: Maybe<String>;
  deleted_not_contains?: Maybe<String>;
  deleted_starts_with?: Maybe<String>;
  deleted_not_starts_with?: Maybe<String>;
  deleted_ends_with?: Maybe<String>;
  deleted_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ConversationScalarWhereInput[] | ConversationScalarWhereInput>;
  OR?: Maybe<ConversationScalarWhereInput[] | ConversationScalarWhereInput>;
  NOT?: Maybe<ConversationScalarWhereInput[] | ConversationScalarWhereInput>;
}

export interface ConversationUpdateManyWithWhereNestedInput {
  where: ConversationScalarWhereInput;
  data: ConversationUpdateManyDataInput;
}

export interface ConversationUpdateManyDataInput {
  deleted?: Maybe<String>;
}

export interface UserUpsertWithoutInteractionsInput {
  update: UserUpdateWithoutInteractionsDataInput;
  create: UserCreateWithoutInteractionsInput;
}

export interface InteractionUpsertWithWhereUniqueWithoutDebateInput {
  where: InteractionWhereUniqueInput;
  update: InteractionUpdateWithoutDebateDataInput;
  create: InteractionCreateWithoutDebateInput;
}

export interface InteractionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<InteractionType>;
  type_not?: Maybe<InteractionType>;
  type_in?: Maybe<InteractionType[] | InteractionType>;
  type_not_in?: Maybe<InteractionType[] | InteractionType>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<InteractionScalarWhereInput[] | InteractionScalarWhereInput>;
  OR?: Maybe<InteractionScalarWhereInput[] | InteractionScalarWhereInput>;
  NOT?: Maybe<InteractionScalarWhereInput[] | InteractionScalarWhereInput>;
}

export interface InteractionUpdateManyWithWhereNestedInput {
  where: InteractionScalarWhereInput;
  data: InteractionUpdateManyDataInput;
}

export interface InteractionUpdateManyDataInput {
  type?: Maybe<InteractionType>;
}

export interface DebateUpsertWithoutCommentsInput {
  update: DebateUpdateWithoutCommentsDataInput;
  create: DebateCreateWithoutCommentsInput;
}

export interface CommentUpsertNestedInput {
  update: CommentUpdateDataInput;
  create: CommentCreateInput;
}

export interface DebateUpsertWithoutReportsInput {
  update: DebateUpdateWithoutReportsDataInput;
  create: DebateCreateWithoutReportsInput;
}

export interface ReportUpsertWithWhereUniqueWithoutCommentInput {
  where: ReportWhereUniqueInput;
  update: ReportUpdateWithoutCommentDataInput;
  create: ReportCreateWithoutCommentInput;
}

export interface CommentUpsertWithWhereUniqueWithoutDebateInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutDebateDataInput;
  create: CommentCreateWithoutDebateInput;
}

export interface DebateUpsertNestedInput {
  update: DebateUpdateDataInput;
  create: DebateCreateInput;
}

export interface NotificationUpsertWithWhereUniqueWithoutWhoInput {
  where: NotificationWhereUniqueInput;
  update: NotificationUpdateWithoutWhoDataInput;
  create: NotificationCreateWithoutWhoInput;
}

export interface NotificationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  type?: Maybe<NotificationType>;
  type_not?: Maybe<NotificationType>;
  type_in?: Maybe<NotificationType[] | NotificationType>;
  type_not_in?: Maybe<NotificationType[] | NotificationType>;
  status?: Maybe<NotificationStatus>;
  status_not?: Maybe<NotificationStatus>;
  status_in?: Maybe<NotificationStatus[] | NotificationStatus>;
  status_not_in?: Maybe<NotificationStatus[] | NotificationStatus>;
  new?: Maybe<Boolean>;
  new_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  OR?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  NOT?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
}

export interface NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput;
  data: NotificationUpdateManyDataInput;
}

export interface NotificationUpdateManyDataInput {
  userId?: Maybe<String>;
  type?: Maybe<NotificationType>;
  status?: Maybe<NotificationStatus>;
  new?: Maybe<Boolean>;
}

export interface InteractionUpdateManyWithoutWhoInput {
  create?: Maybe<
    InteractionCreateWithoutWhoInput[] | InteractionCreateWithoutWhoInput
  >;
  delete?: Maybe<InteractionWhereUniqueInput[] | InteractionWhereUniqueInput>;
  connect?: Maybe<InteractionWhereUniqueInput[] | InteractionWhereUniqueInput>;
  set?: Maybe<InteractionWhereUniqueInput[] | InteractionWhereUniqueInput>;
  disconnect?: Maybe<
    InteractionWhereUniqueInput[] | InteractionWhereUniqueInput
  >;
  update?: Maybe<
    | InteractionUpdateWithWhereUniqueWithoutWhoInput[]
    | InteractionUpdateWithWhereUniqueWithoutWhoInput
  >;
  upsert?: Maybe<
    | InteractionUpsertWithWhereUniqueWithoutWhoInput[]
    | InteractionUpsertWithWhereUniqueWithoutWhoInput
  >;
  deleteMany?: Maybe<
    InteractionScalarWhereInput[] | InteractionScalarWhereInput
  >;
  updateMany?: Maybe<
    | InteractionUpdateManyWithWhereNestedInput[]
    | InteractionUpdateManyWithWhereNestedInput
  >;
}

export interface InteractionUpdateWithWhereUniqueWithoutWhoInput {
  where: InteractionWhereUniqueInput;
  data: InteractionUpdateWithoutWhoDataInput;
}

export interface InteractionUpdateWithoutWhoDataInput {
  type?: Maybe<InteractionType>;
  debate?: Maybe<DebateUpdateOneWithoutInteractionsInput>;
  comment?: Maybe<CommentUpdateOneInput>;
}

export interface DebateUpdateOneWithoutInteractionsInput {
  create?: Maybe<DebateCreateWithoutInteractionsInput>;
  update?: Maybe<DebateUpdateWithoutInteractionsDataInput>;
  upsert?: Maybe<DebateUpsertWithoutInteractionsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<DebateWhereUniqueInput>;
}

export interface DebateUpdateWithoutInteractionsDataInput {
  owner?: Maybe<UserUpdateOneWithoutDebatesInput>;
  ownerBlue?: Maybe<UserUpdateOneWithoutDebatesBlueInput>;
  ownerRed?: Maybe<UserUpdateOneWithoutDebatesRedInput>;
  content?: Maybe<String>;
  timelimit?: Maybe<DateTimeInput>;
  timelimitString?: Maybe<String>;
  type?: Maybe<DebateType>;
  comments?: Maybe<CommentUpdateManyWithoutDebateInput>;
  topComment?: Maybe<CommentUpdateOneInput>;
  reports?: Maybe<ReportUpdateManyWithoutDebateInput>;
  positives?: Maybe<UserUpdateManyInput>;
  negatives?: Maybe<UserUpdateManyInput>;
  redVotes?: Maybe<UserUpdateManyInput>;
  blueVotes?: Maybe<UserUpdateManyInput>;
  winner?: Maybe<UserUpdateOneInput>;
  loser?: Maybe<UserUpdateOneInput>;
  closed?: Maybe<Boolean>;
  crowned?: Maybe<Boolean>;
  published?: Maybe<Boolean>;
  answerOne?: Maybe<String>;
  answerTwo?: Maybe<String>;
  image?: Maybe<String>;
}

export interface DebateUpsertWithoutInteractionsInput {
  update: DebateUpdateWithoutInteractionsDataInput;
  create: DebateCreateWithoutInteractionsInput;
}

export interface InteractionUpsertWithWhereUniqueWithoutWhoInput {
  where: InteractionWhereUniqueInput;
  update: InteractionUpdateWithoutWhoDataInput;
  create: InteractionCreateWithoutWhoInput;
}

export interface UserUpsertWithoutDebatesRedInput {
  update: UserUpdateWithoutDebatesRedDataInput;
  create: UserCreateWithoutDebatesRedInput;
}

export interface DebateUpsertWithWhereUniqueWithoutOwnerBlueInput {
  where: DebateWhereUniqueInput;
  update: DebateUpdateWithoutOwnerBlueDataInput;
  create: DebateCreateWithoutOwnerBlueInput;
}

export interface DebateScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  timelimit?: Maybe<DateTimeInput>;
  timelimit_not?: Maybe<DateTimeInput>;
  timelimit_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timelimit_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  timelimit_lt?: Maybe<DateTimeInput>;
  timelimit_lte?: Maybe<DateTimeInput>;
  timelimit_gt?: Maybe<DateTimeInput>;
  timelimit_gte?: Maybe<DateTimeInput>;
  timelimitString?: Maybe<String>;
  timelimitString_not?: Maybe<String>;
  timelimitString_in?: Maybe<String[] | String>;
  timelimitString_not_in?: Maybe<String[] | String>;
  timelimitString_lt?: Maybe<String>;
  timelimitString_lte?: Maybe<String>;
  timelimitString_gt?: Maybe<String>;
  timelimitString_gte?: Maybe<String>;
  timelimitString_contains?: Maybe<String>;
  timelimitString_not_contains?: Maybe<String>;
  timelimitString_starts_with?: Maybe<String>;
  timelimitString_not_starts_with?: Maybe<String>;
  timelimitString_ends_with?: Maybe<String>;
  timelimitString_not_ends_with?: Maybe<String>;
  type?: Maybe<DebateType>;
  type_not?: Maybe<DebateType>;
  type_in?: Maybe<DebateType[] | DebateType>;
  type_not_in?: Maybe<DebateType[] | DebateType>;
  closed?: Maybe<Boolean>;
  closed_not?: Maybe<Boolean>;
  crowned?: Maybe<Boolean>;
  crowned_not?: Maybe<Boolean>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  answerOne?: Maybe<String>;
  answerOne_not?: Maybe<String>;
  answerOne_in?: Maybe<String[] | String>;
  answerOne_not_in?: Maybe<String[] | String>;
  answerOne_lt?: Maybe<String>;
  answerOne_lte?: Maybe<String>;
  answerOne_gt?: Maybe<String>;
  answerOne_gte?: Maybe<String>;
  answerOne_contains?: Maybe<String>;
  answerOne_not_contains?: Maybe<String>;
  answerOne_starts_with?: Maybe<String>;
  answerOne_not_starts_with?: Maybe<String>;
  answerOne_ends_with?: Maybe<String>;
  answerOne_not_ends_with?: Maybe<String>;
  answerTwo?: Maybe<String>;
  answerTwo_not?: Maybe<String>;
  answerTwo_in?: Maybe<String[] | String>;
  answerTwo_not_in?: Maybe<String[] | String>;
  answerTwo_lt?: Maybe<String>;
  answerTwo_lte?: Maybe<String>;
  answerTwo_gt?: Maybe<String>;
  answerTwo_gte?: Maybe<String>;
  answerTwo_contains?: Maybe<String>;
  answerTwo_not_contains?: Maybe<String>;
  answerTwo_starts_with?: Maybe<String>;
  answerTwo_not_starts_with?: Maybe<String>;
  answerTwo_ends_with?: Maybe<String>;
  answerTwo_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<DebateScalarWhereInput[] | DebateScalarWhereInput>;
  OR?: Maybe<DebateScalarWhereInput[] | DebateScalarWhereInput>;
  NOT?: Maybe<DebateScalarWhereInput[] | DebateScalarWhereInput>;
}

export interface DebateUpdateManyWithWhereNestedInput {
  where: DebateScalarWhereInput;
  data: DebateUpdateManyDataInput;
}

export interface DebateUpdateManyDataInput {
  content?: Maybe<String>;
  timelimit?: Maybe<DateTimeInput>;
  timelimitString?: Maybe<String>;
  type?: Maybe<DebateType>;
  closed?: Maybe<Boolean>;
  crowned?: Maybe<Boolean>;
  published?: Maybe<Boolean>;
  answerOne?: Maybe<String>;
  answerTwo?: Maybe<String>;
  image?: Maybe<String>;
}

export interface UserUpsertWithoutDebatesInput {
  update: UserUpdateWithoutDebatesDataInput;
  create: UserCreateWithoutDebatesInput;
}

export interface DebateUpsertWithWhereUniqueWithoutOwnerRedInput {
  where: DebateWhereUniqueInput;
  update: DebateUpdateWithoutOwnerRedDataInput;
  create: DebateCreateWithoutOwnerRedInput;
}

export interface UserUpsertWithoutDebatesBlueInput {
  update: UserUpdateWithoutDebatesBlueDataInput;
  create: UserCreateWithoutDebatesBlueInput;
}

export interface DebateUpsertWithWhereUniqueWithoutOwnerInput {
  where: DebateWhereUniqueInput;
  update: DebateUpdateWithoutOwnerDataInput;
  create: DebateCreateWithoutOwnerInput;
}

export interface UserUpsertWithWhereUniqueWithoutBlockedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutBlockedDataInput;
  create: UserCreateWithoutBlockedInput;
}

export interface UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowersDataInput;
  create: UserCreateWithoutFollowersInput;
}

export interface UserUpsertWithWhereUniqueWithoutBlockingInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutBlockingDataInput;
  create: UserCreateWithoutBlockingInput;
}

export interface UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowingDataInput;
  create: UserCreateWithoutFollowingInput;
}

export interface CommentUpdateManyMutationInput {
  content?: Maybe<String>;
  nested?: Maybe<Boolean>;
}

export interface ConversationCreateInput {
  id?: Maybe<ID_Input>;
  speakers?: Maybe<UserCreateManyWithoutConversationsInput>;
  messages?: Maybe<MessageCreateManyWithoutConversationInput>;
  deleted?: Maybe<String>;
}

export interface UserCreateManyWithoutConversationsInput {
  create?: Maybe<
    UserCreateWithoutConversationsInput[] | UserCreateWithoutConversationsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutConversationsInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  birthdate: DateTimeInput;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  blocked?: Maybe<UserCreateManyWithoutBlockingInput>;
  blocking?: Maybe<UserCreateManyWithoutBlockedInput>;
  debates?: Maybe<DebateCreateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateCreateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateCreateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationCreateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyCreateManyWithoutUserInput>;
  interactions?: Maybe<InteractionCreateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserCreatemailErrorsInput>;
}

export interface ConversationUpdateInput {
  speakers?: Maybe<UserUpdateManyWithoutConversationsInput>;
  messages?: Maybe<MessageUpdateManyWithoutConversationInput>;
  deleted?: Maybe<String>;
}

export interface UserUpdateManyWithoutConversationsInput {
  create?: Maybe<
    UserCreateWithoutConversationsInput[] | UserCreateWithoutConversationsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutConversationsInput[]
    | UserUpdateWithWhereUniqueWithoutConversationsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutConversationsInput[]
    | UserUpsertWithWhereUniqueWithoutConversationsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutConversationsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutConversationsDataInput;
}

export interface UserUpdateWithoutConversationsDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  blocked?: Maybe<UserUpdateManyWithoutBlockingInput>;
  blocking?: Maybe<UserUpdateManyWithoutBlockedInput>;
  debates?: Maybe<DebateUpdateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateUpdateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateUpdateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyUpdateManyWithoutUserInput>;
  interactions?: Maybe<InteractionUpdateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserUpdatemailErrorsInput>;
}

export interface UserUpsertWithWhereUniqueWithoutConversationsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutConversationsDataInput;
  create: UserCreateWithoutConversationsInput;
}

export interface ConversationUpdateManyMutationInput {
  deleted?: Maybe<String>;
}

export interface DebateUpdateInput {
  owner?: Maybe<UserUpdateOneWithoutDebatesInput>;
  ownerBlue?: Maybe<UserUpdateOneWithoutDebatesBlueInput>;
  ownerRed?: Maybe<UserUpdateOneWithoutDebatesRedInput>;
  content?: Maybe<String>;
  timelimit?: Maybe<DateTimeInput>;
  timelimitString?: Maybe<String>;
  type?: Maybe<DebateType>;
  comments?: Maybe<CommentUpdateManyWithoutDebateInput>;
  topComment?: Maybe<CommentUpdateOneInput>;
  reports?: Maybe<ReportUpdateManyWithoutDebateInput>;
  positives?: Maybe<UserUpdateManyInput>;
  negatives?: Maybe<UserUpdateManyInput>;
  redVotes?: Maybe<UserUpdateManyInput>;
  blueVotes?: Maybe<UserUpdateManyInput>;
  winner?: Maybe<UserUpdateOneInput>;
  loser?: Maybe<UserUpdateOneInput>;
  closed?: Maybe<Boolean>;
  crowned?: Maybe<Boolean>;
  published?: Maybe<Boolean>;
  interactions?: Maybe<InteractionUpdateManyWithoutDebateInput>;
  answerOne?: Maybe<String>;
  answerTwo?: Maybe<String>;
  image?: Maybe<String>;
}

export interface DebateUpdateManyMutationInput {
  content?: Maybe<String>;
  timelimit?: Maybe<DateTimeInput>;
  timelimitString?: Maybe<String>;
  type?: Maybe<DebateType>;
  closed?: Maybe<Boolean>;
  crowned?: Maybe<Boolean>;
  published?: Maybe<Boolean>;
  answerOne?: Maybe<String>;
  answerTwo?: Maybe<String>;
  image?: Maybe<String>;
}

export interface InteractionCreateInput {
  id?: Maybe<ID_Input>;
  type: InteractionType;
  who: UserCreateOneWithoutInteractionsInput;
  debate?: Maybe<DebateCreateOneWithoutInteractionsInput>;
  comment?: Maybe<CommentCreateOneInput>;
}

export interface InteractionUpdateInput {
  type?: Maybe<InteractionType>;
  who?: Maybe<UserUpdateOneRequiredWithoutInteractionsInput>;
  debate?: Maybe<DebateUpdateOneWithoutInteractionsInput>;
  comment?: Maybe<CommentUpdateOneInput>;
}

export interface InteractionUpdateManyMutationInput {
  type?: Maybe<InteractionType>;
}

export interface MessageCreateInput {
  id?: Maybe<ID_Input>;
  content: String;
  to: UserCreateOneInput;
  from: UserCreateOneInput;
  read: Boolean;
  conversation: ConversationCreateOneWithoutMessagesInput;
  deleted?: Maybe<String>;
}

export interface ConversationCreateOneWithoutMessagesInput {
  create?: Maybe<ConversationCreateWithoutMessagesInput>;
  connect?: Maybe<ConversationWhereUniqueInput>;
}

export interface ConversationCreateWithoutMessagesInput {
  id?: Maybe<ID_Input>;
  speakers?: Maybe<UserCreateManyWithoutConversationsInput>;
  deleted?: Maybe<String>;
}

export interface MessageUpdateInput {
  content?: Maybe<String>;
  to?: Maybe<UserUpdateOneRequiredInput>;
  from?: Maybe<UserUpdateOneRequiredInput>;
  read?: Maybe<Boolean>;
  conversation?: Maybe<ConversationUpdateOneRequiredWithoutMessagesInput>;
  deleted?: Maybe<String>;
}

export interface ConversationUpdateOneRequiredWithoutMessagesInput {
  create?: Maybe<ConversationCreateWithoutMessagesInput>;
  update?: Maybe<ConversationUpdateWithoutMessagesDataInput>;
  upsert?: Maybe<ConversationUpsertWithoutMessagesInput>;
  connect?: Maybe<ConversationWhereUniqueInput>;
}

export interface ConversationUpdateWithoutMessagesDataInput {
  speakers?: Maybe<UserUpdateManyWithoutConversationsInput>;
  deleted?: Maybe<String>;
}

export interface ConversationUpsertWithoutMessagesInput {
  update: ConversationUpdateWithoutMessagesDataInput;
  create: ConversationCreateWithoutMessagesInput;
}

export interface MessageUpdateManyMutationInput {
  content?: Maybe<String>;
  read?: Maybe<Boolean>;
  deleted?: Maybe<String>;
}

export interface NotificationCreateInput {
  id?: Maybe<ID_Input>;
  who?: Maybe<UserCreateManyWithoutNotificationsInput>;
  userId: String;
  type: NotificationType;
  status: NotificationStatus;
  new: Boolean;
  debate?: Maybe<DebateCreateOneInput>;
  comment?: Maybe<CommentCreateOneInput>;
}

export interface UserCreateManyWithoutNotificationsInput {
  create?: Maybe<
    UserCreateWithoutNotificationsInput[] | UserCreateWithoutNotificationsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutNotificationsInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  birthdate: DateTimeInput;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  blocked?: Maybe<UserCreateManyWithoutBlockingInput>;
  blocking?: Maybe<UserCreateManyWithoutBlockedInput>;
  debates?: Maybe<DebateCreateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateCreateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateCreateManyWithoutOwnerRedInput>;
  trophies?: Maybe<TrophyCreateManyWithoutUserInput>;
  conversations?: Maybe<ConversationCreateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionCreateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserCreatemailErrorsInput>;
}

export interface NotificationUpdateInput {
  who?: Maybe<UserUpdateManyWithoutNotificationsInput>;
  userId?: Maybe<String>;
  type?: Maybe<NotificationType>;
  status?: Maybe<NotificationStatus>;
  new?: Maybe<Boolean>;
  debate?: Maybe<DebateUpdateOneInput>;
  comment?: Maybe<CommentUpdateOneInput>;
}

export interface UserUpdateManyWithoutNotificationsInput {
  create?: Maybe<
    UserCreateWithoutNotificationsInput[] | UserCreateWithoutNotificationsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutNotificationsInput[]
    | UserUpdateWithWhereUniqueWithoutNotificationsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutNotificationsInput[]
    | UserUpsertWithWhereUniqueWithoutNotificationsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutNotificationsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutNotificationsDataInput;
}

export interface UserUpdateWithoutNotificationsDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  blocked?: Maybe<UserUpdateManyWithoutBlockingInput>;
  blocking?: Maybe<UserUpdateManyWithoutBlockedInput>;
  debates?: Maybe<DebateUpdateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateUpdateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateUpdateManyWithoutOwnerRedInput>;
  trophies?: Maybe<TrophyUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionUpdateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserUpdatemailErrorsInput>;
}

export interface UserUpsertWithWhereUniqueWithoutNotificationsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutNotificationsDataInput;
  create: UserCreateWithoutNotificationsInput;
}

export interface NotificationUpdateManyMutationInput {
  userId?: Maybe<String>;
  type?: Maybe<NotificationType>;
  status?: Maybe<NotificationStatus>;
  new?: Maybe<Boolean>;
}

export interface ReportCreateInput {
  id?: Maybe<ID_Input>;
  from?: Maybe<UserCreateOneInput>;
  to?: Maybe<UserCreateOneInput>;
  type: ReportType;
  reason: ReportReason;
  reasonText?: Maybe<String>;
  debate?: Maybe<DebateCreateOneWithoutReportsInput>;
  comment?: Maybe<CommentCreateOneWithoutReportsInput>;
  treated?: Maybe<Boolean>;
}

export interface ReportUpdateInput {
  from?: Maybe<UserUpdateOneInput>;
  to?: Maybe<UserUpdateOneInput>;
  type?: Maybe<ReportType>;
  reason?: Maybe<ReportReason>;
  reasonText?: Maybe<String>;
  debate?: Maybe<DebateUpdateOneWithoutReportsInput>;
  comment?: Maybe<CommentUpdateOneWithoutReportsInput>;
  treated?: Maybe<Boolean>;
}

export interface ReportUpdateManyMutationInput {
  type?: Maybe<ReportType>;
  reason?: Maybe<ReportReason>;
  reasonText?: Maybe<String>;
  treated?: Maybe<Boolean>;
}

export interface TrophyCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutTrophiesInput;
  won: Boolean;
  type?: Maybe<TrophyType>;
  debate?: Maybe<DebateCreateOneInput>;
  comment?: Maybe<CommentCreateOneInput>;
}

export interface UserCreateOneWithoutTrophiesInput {
  create?: Maybe<UserCreateWithoutTrophiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutTrophiesInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  birthdate: DateTimeInput;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  blocked?: Maybe<UserCreateManyWithoutBlockingInput>;
  blocking?: Maybe<UserCreateManyWithoutBlockedInput>;
  debates?: Maybe<DebateCreateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateCreateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateCreateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationCreateManyWithoutWhoInput>;
  conversations?: Maybe<ConversationCreateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionCreateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserCreatemailErrorsInput>;
}

export interface TrophyUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutTrophiesInput>;
  won?: Maybe<Boolean>;
  type?: Maybe<TrophyType>;
  debate?: Maybe<DebateUpdateOneInput>;
  comment?: Maybe<CommentUpdateOneInput>;
}

export interface UserUpdateOneRequiredWithoutTrophiesInput {
  create?: Maybe<UserCreateWithoutTrophiesInput>;
  update?: Maybe<UserUpdateWithoutTrophiesDataInput>;
  upsert?: Maybe<UserUpsertWithoutTrophiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutTrophiesDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  blocked?: Maybe<UserUpdateManyWithoutBlockingInput>;
  blocking?: Maybe<UserUpdateManyWithoutBlockedInput>;
  debates?: Maybe<DebateUpdateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateUpdateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateUpdateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutWhoInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionUpdateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserUpdatemailErrorsInput>;
}

export interface UserUpsertWithoutTrophiesInput {
  update: UserUpdateWithoutTrophiesDataInput;
  create: UserCreateWithoutTrophiesInput;
}

export interface TrophyUpdateManyMutationInput {
  won?: Maybe<Boolean>;
  type?: Maybe<TrophyType>;
}

export interface UserUpdateInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  blocked?: Maybe<UserUpdateManyWithoutBlockingInput>;
  blocking?: Maybe<UserUpdateManyWithoutBlockedInput>;
  debates?: Maybe<DebateUpdateManyWithoutOwnerInput>;
  debatesBlue?: Maybe<DebateUpdateManyWithoutOwnerBlueInput>;
  debatesRed?: Maybe<DebateUpdateManyWithoutOwnerRedInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutWhoInput>;
  trophies?: Maybe<TrophyUpdateManyWithoutUserInput>;
  conversations?: Maybe<ConversationUpdateManyWithoutSpeakersInput>;
  interactions?: Maybe<InteractionUpdateManyWithoutWhoInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserUpdatemailErrorsInput>;
}

export interface UserUpdateManyMutationInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  birthdate?: Maybe<DateTimeInput>;
  role?: Maybe<Role>;
  certified?: Maybe<Boolean>;
  gender?: Maybe<Gender>;
  profilePicture?: Maybe<String>;
  coverPicture?: Maybe<String>;
  bio?: Maybe<String>;
  language?: Maybe<Language>;
  theme?: Maybe<Theme>;
  crowned?: Maybe<Boolean>;
  crownedDate?: Maybe<DateTimeInput>;
  private?: Maybe<Boolean>;
  lastConnected?: Maybe<DateTimeInput>;
  mailStatus?: Maybe<MailStatus>;
  mailErrors?: Maybe<UserUpdatemailErrorsInput>;
}

export interface AdSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AdWhereInput>;
  AND?: Maybe<AdSubscriptionWhereInput[] | AdSubscriptionWhereInput>;
}

export interface AdTargetSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AdTargetWhereInput>;
  AND?: Maybe<
    AdTargetSubscriptionWhereInput[] | AdTargetSubscriptionWhereInput
  >;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface ConversationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ConversationWhereInput>;
  AND?: Maybe<
    ConversationSubscriptionWhereInput[] | ConversationSubscriptionWhereInput
  >;
}

export interface DebateSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DebateWhereInput>;
  AND?: Maybe<DebateSubscriptionWhereInput[] | DebateSubscriptionWhereInput>;
}

export interface InteractionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InteractionWhereInput>;
  AND?: Maybe<
    InteractionSubscriptionWhereInput[] | InteractionSubscriptionWhereInput
  >;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface NotificationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NotificationWhereInput>;
  AND?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
}

export interface ReportSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReportWhereInput>;
  AND?: Maybe<ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput>;
}

export interface TrophySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TrophyWhereInput>;
  AND?: Maybe<TrophySubscriptionWhereInput[] | TrophySubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Ad {
  id: ID_Output;
  name: String;
  company: String;
  companyIcon: String;
  content: String;
  image: String;
  link?: String;
  active: Boolean;
  ratio: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AdPromise extends Promise<Ad>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  company: () => Promise<String>;
  companyIcon: () => Promise<String>;
  content: () => Promise<String>;
  image: () => Promise<String>;
  link: () => Promise<String>;
  active: () => Promise<Boolean>;
  ratio: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AdSubscription
  extends Promise<AsyncIterator<Ad>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  company: () => Promise<AsyncIterator<String>>;
  companyIcon: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  link: () => Promise<AsyncIterator<String>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  ratio: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AdNullablePromise extends Promise<Ad | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  company: () => Promise<String>;
  companyIcon: () => Promise<String>;
  content: () => Promise<String>;
  image: () => Promise<String>;
  link: () => Promise<String>;
  active: () => Promise<Boolean>;
  ratio: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AdConnection {
  pageInfo: PageInfo;
  edges: AdEdge[];
}

export interface AdConnectionPromise
  extends Promise<AdConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AdEdge>>() => T;
  aggregate: <T = AggregateAdPromise>() => T;
}

export interface AdConnectionSubscription
  extends Promise<AsyncIterator<AdConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AdEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAdSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AdEdge {
  node: Ad;
  cursor: String;
}

export interface AdEdgePromise extends Promise<AdEdge>, Fragmentable {
  node: <T = AdPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AdEdgeSubscription
  extends Promise<AsyncIterator<AdEdge>>,
    Fragmentable {
  node: <T = AdSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAd {
  count: Int;
}

export interface AggregateAdPromise extends Promise<AggregateAd>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAdSubscription
  extends Promise<AsyncIterator<AggregateAd>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AdTarget {
  id: ID_Output;
  name: String;
  gender: GenderFilter;
  birthdateMin: DateTimeOutput;
  birthdateMax: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AdTargetPromise extends Promise<AdTarget>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  gender: () => Promise<GenderFilter>;
  birthdateMin: () => Promise<DateTimeOutput>;
  birthdateMax: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AdTargetSubscription
  extends Promise<AsyncIterator<AdTarget>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<GenderFilter>>;
  birthdateMin: () => Promise<AsyncIterator<DateTimeOutput>>;
  birthdateMax: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AdTargetNullablePromise
  extends Promise<AdTarget | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  gender: () => Promise<GenderFilter>;
  birthdateMin: () => Promise<DateTimeOutput>;
  birthdateMax: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AdTargetConnection {
  pageInfo: PageInfo;
  edges: AdTargetEdge[];
}

export interface AdTargetConnectionPromise
  extends Promise<AdTargetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AdTargetEdge>>() => T;
  aggregate: <T = AggregateAdTargetPromise>() => T;
}

export interface AdTargetConnectionSubscription
  extends Promise<AsyncIterator<AdTargetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AdTargetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAdTargetSubscription>() => T;
}

export interface AdTargetEdge {
  node: AdTarget;
  cursor: String;
}

export interface AdTargetEdgePromise
  extends Promise<AdTargetEdge>,
    Fragmentable {
  node: <T = AdTargetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AdTargetEdgeSubscription
  extends Promise<AsyncIterator<AdTargetEdge>>,
    Fragmentable {
  node: <T = AdTargetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAdTarget {
  count: Int;
}

export interface AggregateAdTargetPromise
  extends Promise<AggregateAdTarget>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAdTargetSubscription
  extends Promise<AsyncIterator<AggregateAdTarget>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Comment {
  id: ID_Output;
  content: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  nested: Boolean;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  from: <T = UserPromise>() => T;
  content: () => Promise<String>;
  likes: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  dislikes: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reports: <T = FragmentableArray<Report>>(args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  debate: <T = DebatePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  nested: () => Promise<Boolean>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  from: <T = UserSubscription>() => T;
  content: () => Promise<AsyncIterator<String>>;
  likes: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  dislikes: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reports: <T = Promise<AsyncIterator<ReportSubscription>>>(args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  debate: <T = DebateSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  nested: () => Promise<AsyncIterator<Boolean>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  from: <T = UserPromise>() => T;
  content: () => Promise<String>;
  likes: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  dislikes: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reports: <T = FragmentableArray<Report>>(args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  debate: <T = DebatePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  nested: () => Promise<Boolean>;
}

export interface User {
  id: ID_Output;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  birthdate: DateTimeOutput;
  role: Role;
  certified: Boolean;
  gender: Gender;
  profilePicture?: String;
  coverPicture?: String;
  bio?: String;
  language: Language;
  theme: Theme;
  crowned: Boolean;
  crownedDate?: DateTimeOutput;
  private: Boolean;
  lastConnected?: DateTimeOutput;
  mailStatus: MailStatus;
  mailErrors: Int[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  birthdate: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
  certified: () => Promise<Boolean>;
  gender: () => Promise<Gender>;
  profilePicture: () => Promise<String>;
  coverPicture: () => Promise<String>;
  bio: () => Promise<String>;
  language: () => Promise<Language>;
  theme: () => Promise<Theme>;
  crowned: () => Promise<Boolean>;
  crownedDate: () => Promise<DateTimeOutput>;
  private: () => Promise<Boolean>;
  lastConnected: () => Promise<DateTimeOutput>;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blocked: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blocking: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  debates: <T = FragmentableArray<Debate>>(args?: {
    where?: DebateWhereInput;
    orderBy?: DebateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  debatesBlue: <T = FragmentableArray<Debate>>(args?: {
    where?: DebateWhereInput;
    orderBy?: DebateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  debatesRed: <T = FragmentableArray<Debate>>(args?: {
    where?: DebateWhereInput;
    orderBy?: DebateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  trophies: <T = FragmentableArray<Trophy>>(args?: {
    where?: TrophyWhereInput;
    orderBy?: TrophyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conversations: <T = FragmentableArray<Conversation>>(args?: {
    where?: ConversationWhereInput;
    orderBy?: ConversationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  interactions: <T = FragmentableArray<Interaction>>(args?: {
    where?: InteractionWhereInput;
    orderBy?: InteractionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mailStatus: () => Promise<MailStatus>;
  mailErrors: () => Promise<Int[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  birthdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  role: () => Promise<AsyncIterator<Role>>;
  certified: () => Promise<AsyncIterator<Boolean>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  profilePicture: () => Promise<AsyncIterator<String>>;
  coverPicture: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  language: () => Promise<AsyncIterator<Language>>;
  theme: () => Promise<AsyncIterator<Theme>>;
  crowned: () => Promise<AsyncIterator<Boolean>>;
  crownedDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  private: () => Promise<AsyncIterator<Boolean>>;
  lastConnected: () => Promise<AsyncIterator<DateTimeOutput>>;
  followers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blocked: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blocking: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  debates: <T = Promise<AsyncIterator<DebateSubscription>>>(args?: {
    where?: DebateWhereInput;
    orderBy?: DebateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  debatesBlue: <T = Promise<AsyncIterator<DebateSubscription>>>(args?: {
    where?: DebateWhereInput;
    orderBy?: DebateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  debatesRed: <T = Promise<AsyncIterator<DebateSubscription>>>(args?: {
    where?: DebateWhereInput;
    orderBy?: DebateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = Promise<AsyncIterator<NotificationSubscription>>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  trophies: <T = Promise<AsyncIterator<TrophySubscription>>>(args?: {
    where?: TrophyWhereInput;
    orderBy?: TrophyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conversations: <T = Promise<AsyncIterator<ConversationSubscription>>>(args?: {
    where?: ConversationWhereInput;
    orderBy?: ConversationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  interactions: <T = Promise<AsyncIterator<InteractionSubscription>>>(args?: {
    where?: InteractionWhereInput;
    orderBy?: InteractionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mailStatus: () => Promise<AsyncIterator<MailStatus>>;
  mailErrors: () => Promise<AsyncIterator<Int[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  birthdate: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
  certified: () => Promise<Boolean>;
  gender: () => Promise<Gender>;
  profilePicture: () => Promise<String>;
  coverPicture: () => Promise<String>;
  bio: () => Promise<String>;
  language: () => Promise<Language>;
  theme: () => Promise<Theme>;
  crowned: () => Promise<Boolean>;
  crownedDate: () => Promise<DateTimeOutput>;
  private: () => Promise<Boolean>;
  lastConnected: () => Promise<DateTimeOutput>;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blocked: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blocking: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  debates: <T = FragmentableArray<Debate>>(args?: {
    where?: DebateWhereInput;
    orderBy?: DebateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  debatesBlue: <T = FragmentableArray<Debate>>(args?: {
    where?: DebateWhereInput;
    orderBy?: DebateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  debatesRed: <T = FragmentableArray<Debate>>(args?: {
    where?: DebateWhereInput;
    orderBy?: DebateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  trophies: <T = FragmentableArray<Trophy>>(args?: {
    where?: TrophyWhereInput;
    orderBy?: TrophyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conversations: <T = FragmentableArray<Conversation>>(args?: {
    where?: ConversationWhereInput;
    orderBy?: ConversationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  interactions: <T = FragmentableArray<Interaction>>(args?: {
    where?: InteractionWhereInput;
    orderBy?: InteractionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mailStatus: () => Promise<MailStatus>;
  mailErrors: () => Promise<Int[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Debate {
  id: ID_Output;
  content: String;
  timelimit?: DateTimeOutput;
  timelimitString?: String;
  type: DebateType;
  closed: Boolean;
  crowned: Boolean;
  published: Boolean;
  answerOne?: String;
  answerTwo?: String;
  image?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DebatePromise extends Promise<Debate>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  ownerBlue: <T = UserPromise>() => T;
  ownerRed: <T = UserPromise>() => T;
  content: () => Promise<String>;
  timelimit: () => Promise<DateTimeOutput>;
  timelimitString: () => Promise<String>;
  type: () => Promise<DebateType>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topComment: <T = CommentPromise>() => T;
  reports: <T = FragmentableArray<Report>>(args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  positives: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  negatives: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  redVotes: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blueVotes: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  winner: <T = UserPromise>() => T;
  loser: <T = UserPromise>() => T;
  closed: () => Promise<Boolean>;
  crowned: () => Promise<Boolean>;
  published: () => Promise<Boolean>;
  interactions: <T = FragmentableArray<Interaction>>(args?: {
    where?: InteractionWhereInput;
    orderBy?: InteractionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  answerOne: () => Promise<String>;
  answerTwo: () => Promise<String>;
  image: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DebateSubscription
  extends Promise<AsyncIterator<Debate>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  ownerBlue: <T = UserSubscription>() => T;
  ownerRed: <T = UserSubscription>() => T;
  content: () => Promise<AsyncIterator<String>>;
  timelimit: () => Promise<AsyncIterator<DateTimeOutput>>;
  timelimitString: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<DebateType>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topComment: <T = CommentSubscription>() => T;
  reports: <T = Promise<AsyncIterator<ReportSubscription>>>(args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  positives: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  negatives: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  redVotes: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blueVotes: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  winner: <T = UserSubscription>() => T;
  loser: <T = UserSubscription>() => T;
  closed: () => Promise<AsyncIterator<Boolean>>;
  crowned: () => Promise<AsyncIterator<Boolean>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  interactions: <T = Promise<AsyncIterator<InteractionSubscription>>>(args?: {
    where?: InteractionWhereInput;
    orderBy?: InteractionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  answerOne: () => Promise<AsyncIterator<String>>;
  answerTwo: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DebateNullablePromise
  extends Promise<Debate | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  ownerBlue: <T = UserPromise>() => T;
  ownerRed: <T = UserPromise>() => T;
  content: () => Promise<String>;
  timelimit: () => Promise<DateTimeOutput>;
  timelimitString: () => Promise<String>;
  type: () => Promise<DebateType>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  topComment: <T = CommentPromise>() => T;
  reports: <T = FragmentableArray<Report>>(args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  positives: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  negatives: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  redVotes: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blueVotes: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  winner: <T = UserPromise>() => T;
  loser: <T = UserPromise>() => T;
  closed: () => Promise<Boolean>;
  crowned: () => Promise<Boolean>;
  published: () => Promise<Boolean>;
  interactions: <T = FragmentableArray<Interaction>>(args?: {
    where?: InteractionWhereInput;
    orderBy?: InteractionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  answerOne: () => Promise<String>;
  answerTwo: () => Promise<String>;
  image: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Report {
  id: ID_Output;
  type: ReportType;
  reason: ReportReason;
  reasonText?: String;
  treated: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ReportPromise extends Promise<Report>, Fragmentable {
  id: () => Promise<ID_Output>;
  from: <T = UserPromise>() => T;
  to: <T = UserPromise>() => T;
  type: () => Promise<ReportType>;
  reason: () => Promise<ReportReason>;
  reasonText: () => Promise<String>;
  debate: <T = DebatePromise>() => T;
  comment: <T = CommentPromise>() => T;
  treated: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ReportSubscription
  extends Promise<AsyncIterator<Report>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  from: <T = UserSubscription>() => T;
  to: <T = UserSubscription>() => T;
  type: () => Promise<AsyncIterator<ReportType>>;
  reason: () => Promise<AsyncIterator<ReportReason>>;
  reasonText: () => Promise<AsyncIterator<String>>;
  debate: <T = DebateSubscription>() => T;
  comment: <T = CommentSubscription>() => T;
  treated: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ReportNullablePromise
  extends Promise<Report | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  from: <T = UserPromise>() => T;
  to: <T = UserPromise>() => T;
  type: () => Promise<ReportType>;
  reason: () => Promise<ReportReason>;
  reasonText: () => Promise<String>;
  debate: <T = DebatePromise>() => T;
  comment: <T = CommentPromise>() => T;
  treated: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Interaction {
  id: ID_Output;
  type: InteractionType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface InteractionPromise extends Promise<Interaction>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<InteractionType>;
  who: <T = UserPromise>() => T;
  debate: <T = DebatePromise>() => T;
  comment: <T = CommentPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface InteractionSubscription
  extends Promise<AsyncIterator<Interaction>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<InteractionType>>;
  who: <T = UserSubscription>() => T;
  debate: <T = DebateSubscription>() => T;
  comment: <T = CommentSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface InteractionNullablePromise
  extends Promise<Interaction | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<InteractionType>;
  who: <T = UserPromise>() => T;
  debate: <T = DebatePromise>() => T;
  comment: <T = CommentPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Notification {
  id: ID_Output;
  userId: String;
  type: NotificationType;
  status: NotificationStatus;
  new: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface NotificationPromise
  extends Promise<Notification>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  who: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  userId: () => Promise<String>;
  type: () => Promise<NotificationType>;
  status: () => Promise<NotificationStatus>;
  new: () => Promise<Boolean>;
  debate: <T = DebatePromise>() => T;
  comment: <T = CommentPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface NotificationSubscription
  extends Promise<AsyncIterator<Notification>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  who: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  userId: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<NotificationType>>;
  status: () => Promise<AsyncIterator<NotificationStatus>>;
  new: () => Promise<AsyncIterator<Boolean>>;
  debate: <T = DebateSubscription>() => T;
  comment: <T = CommentSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface NotificationNullablePromise
  extends Promise<Notification | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  who: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  userId: () => Promise<String>;
  type: () => Promise<NotificationType>;
  status: () => Promise<NotificationStatus>;
  new: () => Promise<Boolean>;
  debate: <T = DebatePromise>() => T;
  comment: <T = CommentPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Trophy {
  id: ID_Output;
  won: Boolean;
  type?: TrophyType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TrophyPromise extends Promise<Trophy>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  won: () => Promise<Boolean>;
  type: () => Promise<TrophyType>;
  debate: <T = DebatePromise>() => T;
  comment: <T = CommentPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TrophySubscription
  extends Promise<AsyncIterator<Trophy>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  won: () => Promise<AsyncIterator<Boolean>>;
  type: () => Promise<AsyncIterator<TrophyType>>;
  debate: <T = DebateSubscription>() => T;
  comment: <T = CommentSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TrophyNullablePromise
  extends Promise<Trophy | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  won: () => Promise<Boolean>;
  type: () => Promise<TrophyType>;
  debate: <T = DebatePromise>() => T;
  comment: <T = CommentPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Conversation {
  id: ID_Output;
  deleted?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ConversationPromise
  extends Promise<Conversation>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  speakers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  deleted: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ConversationSubscription
  extends Promise<AsyncIterator<Conversation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  speakers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  deleted: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ConversationNullablePromise
  extends Promise<Conversation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  speakers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  deleted: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Message {
  id: ID_Output;
  content: String;
  read: Boolean;
  deleted?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  to: <T = UserPromise>() => T;
  from: <T = UserPromise>() => T;
  read: () => Promise<Boolean>;
  conversation: <T = ConversationPromise>() => T;
  deleted: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  to: <T = UserSubscription>() => T;
  from: <T = UserSubscription>() => T;
  read: () => Promise<AsyncIterator<Boolean>>;
  conversation: <T = ConversationSubscription>() => T;
  deleted: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  to: <T = UserPromise>() => T;
  from: <T = UserPromise>() => T;
  read: () => Promise<Boolean>;
  conversation: <T = ConversationPromise>() => T;
  deleted: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ConversationConnection {
  pageInfo: PageInfo;
  edges: ConversationEdge[];
}

export interface ConversationConnectionPromise
  extends Promise<ConversationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ConversationEdge>>() => T;
  aggregate: <T = AggregateConversationPromise>() => T;
}

export interface ConversationConnectionSubscription
  extends Promise<AsyncIterator<ConversationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConversationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConversationSubscription>() => T;
}

export interface ConversationEdge {
  node: Conversation;
  cursor: String;
}

export interface ConversationEdgePromise
  extends Promise<ConversationEdge>,
    Fragmentable {
  node: <T = ConversationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ConversationEdgeSubscription
  extends Promise<AsyncIterator<ConversationEdge>>,
    Fragmentable {
  node: <T = ConversationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateConversation {
  count: Int;
}

export interface AggregateConversationPromise
  extends Promise<AggregateConversation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConversationSubscription
  extends Promise<AsyncIterator<AggregateConversation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DebateConnection {
  pageInfo: PageInfo;
  edges: DebateEdge[];
}

export interface DebateConnectionPromise
  extends Promise<DebateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DebateEdge>>() => T;
  aggregate: <T = AggregateDebatePromise>() => T;
}

export interface DebateConnectionSubscription
  extends Promise<AsyncIterator<DebateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DebateEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDebateSubscription>() => T;
}

export interface DebateEdge {
  node: Debate;
  cursor: String;
}

export interface DebateEdgePromise extends Promise<DebateEdge>, Fragmentable {
  node: <T = DebatePromise>() => T;
  cursor: () => Promise<String>;
}

export interface DebateEdgeSubscription
  extends Promise<AsyncIterator<DebateEdge>>,
    Fragmentable {
  node: <T = DebateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDebate {
  count: Int;
}

export interface AggregateDebatePromise
  extends Promise<AggregateDebate>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDebateSubscription
  extends Promise<AsyncIterator<AggregateDebate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InteractionConnection {
  pageInfo: PageInfo;
  edges: InteractionEdge[];
}

export interface InteractionConnectionPromise
  extends Promise<InteractionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InteractionEdge>>() => T;
  aggregate: <T = AggregateInteractionPromise>() => T;
}

export interface InteractionConnectionSubscription
  extends Promise<AsyncIterator<InteractionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InteractionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInteractionSubscription>() => T;
}

export interface InteractionEdge {
  node: Interaction;
  cursor: String;
}

export interface InteractionEdgePromise
  extends Promise<InteractionEdge>,
    Fragmentable {
  node: <T = InteractionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InteractionEdgeSubscription
  extends Promise<AsyncIterator<InteractionEdge>>,
    Fragmentable {
  node: <T = InteractionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInteraction {
  count: Int;
}

export interface AggregateInteractionPromise
  extends Promise<AggregateInteraction>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInteractionSubscription
  extends Promise<AsyncIterator<AggregateInteraction>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NotificationConnection {
  pageInfo: PageInfo;
  edges: NotificationEdge[];
}

export interface NotificationConnectionPromise
  extends Promise<NotificationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NotificationEdge>>() => T;
  aggregate: <T = AggregateNotificationPromise>() => T;
}

export interface NotificationConnectionSubscription
  extends Promise<AsyncIterator<NotificationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NotificationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNotificationSubscription>() => T;
}

export interface NotificationEdge {
  node: Notification;
  cursor: String;
}

export interface NotificationEdgePromise
  extends Promise<NotificationEdge>,
    Fragmentable {
  node: <T = NotificationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NotificationEdgeSubscription
  extends Promise<AsyncIterator<NotificationEdge>>,
    Fragmentable {
  node: <T = NotificationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNotification {
  count: Int;
}

export interface AggregateNotificationPromise
  extends Promise<AggregateNotification>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNotificationSubscription
  extends Promise<AsyncIterator<AggregateNotification>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReportConnection {
  pageInfo: PageInfo;
  edges: ReportEdge[];
}

export interface ReportConnectionPromise
  extends Promise<ReportConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReportEdge>>() => T;
  aggregate: <T = AggregateReportPromise>() => T;
}

export interface ReportConnectionSubscription
  extends Promise<AsyncIterator<ReportConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReportEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReportSubscription>() => T;
}

export interface ReportEdge {
  node: Report;
  cursor: String;
}

export interface ReportEdgePromise extends Promise<ReportEdge>, Fragmentable {
  node: <T = ReportPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReportEdgeSubscription
  extends Promise<AsyncIterator<ReportEdge>>,
    Fragmentable {
  node: <T = ReportSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReport {
  count: Int;
}

export interface AggregateReportPromise
  extends Promise<AggregateReport>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReportSubscription
  extends Promise<AsyncIterator<AggregateReport>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TrophyConnection {
  pageInfo: PageInfo;
  edges: TrophyEdge[];
}

export interface TrophyConnectionPromise
  extends Promise<TrophyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TrophyEdge>>() => T;
  aggregate: <T = AggregateTrophyPromise>() => T;
}

export interface TrophyConnectionSubscription
  extends Promise<AsyncIterator<TrophyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TrophyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTrophySubscription>() => T;
}

export interface TrophyEdge {
  node: Trophy;
  cursor: String;
}

export interface TrophyEdgePromise extends Promise<TrophyEdge>, Fragmentable {
  node: <T = TrophyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TrophyEdgeSubscription
  extends Promise<AsyncIterator<TrophyEdge>>,
    Fragmentable {
  node: <T = TrophySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTrophy {
  count: Int;
}

export interface AggregateTrophyPromise
  extends Promise<AggregateTrophy>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTrophySubscription
  extends Promise<AsyncIterator<AggregateTrophy>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AdSubscriptionPayload {
  mutation: MutationType;
  node: Ad;
  updatedFields: String[];
  previousValues: AdPreviousValues;
}

export interface AdSubscriptionPayloadPromise
  extends Promise<AdSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AdPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AdPreviousValuesPromise>() => T;
}

export interface AdSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AdSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AdSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AdPreviousValuesSubscription>() => T;
}

export interface AdPreviousValues {
  id: ID_Output;
  name: String;
  company: String;
  companyIcon: String;
  content: String;
  image: String;
  link?: String;
  active: Boolean;
  ratio: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AdPreviousValuesPromise
  extends Promise<AdPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  company: () => Promise<String>;
  companyIcon: () => Promise<String>;
  content: () => Promise<String>;
  image: () => Promise<String>;
  link: () => Promise<String>;
  active: () => Promise<Boolean>;
  ratio: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AdPreviousValuesSubscription
  extends Promise<AsyncIterator<AdPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  company: () => Promise<AsyncIterator<String>>;
  companyIcon: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  link: () => Promise<AsyncIterator<String>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  ratio: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AdTargetSubscriptionPayload {
  mutation: MutationType;
  node: AdTarget;
  updatedFields: String[];
  previousValues: AdTargetPreviousValues;
}

export interface AdTargetSubscriptionPayloadPromise
  extends Promise<AdTargetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AdTargetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AdTargetPreviousValuesPromise>() => T;
}

export interface AdTargetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AdTargetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AdTargetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AdTargetPreviousValuesSubscription>() => T;
}

export interface AdTargetPreviousValues {
  id: ID_Output;
  name: String;
  gender: GenderFilter;
  birthdateMin: DateTimeOutput;
  birthdateMax: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AdTargetPreviousValuesPromise
  extends Promise<AdTargetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  gender: () => Promise<GenderFilter>;
  birthdateMin: () => Promise<DateTimeOutput>;
  birthdateMax: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AdTargetPreviousValuesSubscription
  extends Promise<AsyncIterator<AdTargetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<GenderFilter>>;
  birthdateMin: () => Promise<AsyncIterator<DateTimeOutput>>;
  birthdateMax: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  content: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  nested: Boolean;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  nested: () => Promise<Boolean>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  nested: () => Promise<AsyncIterator<Boolean>>;
}

export interface ConversationSubscriptionPayload {
  mutation: MutationType;
  node: Conversation;
  updatedFields: String[];
  previousValues: ConversationPreviousValues;
}

export interface ConversationSubscriptionPayloadPromise
  extends Promise<ConversationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ConversationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConversationPreviousValuesPromise>() => T;
}

export interface ConversationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConversationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConversationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConversationPreviousValuesSubscription>() => T;
}

export interface ConversationPreviousValues {
  id: ID_Output;
  deleted?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ConversationPreviousValuesPromise
  extends Promise<ConversationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  deleted: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ConversationPreviousValuesSubscription
  extends Promise<AsyncIterator<ConversationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  deleted: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DebateSubscriptionPayload {
  mutation: MutationType;
  node: Debate;
  updatedFields: String[];
  previousValues: DebatePreviousValues;
}

export interface DebateSubscriptionPayloadPromise
  extends Promise<DebateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DebatePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DebatePreviousValuesPromise>() => T;
}

export interface DebateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DebateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DebateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DebatePreviousValuesSubscription>() => T;
}

export interface DebatePreviousValues {
  id: ID_Output;
  content: String;
  timelimit?: DateTimeOutput;
  timelimitString?: String;
  type: DebateType;
  closed: Boolean;
  crowned: Boolean;
  published: Boolean;
  answerOne?: String;
  answerTwo?: String;
  image?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DebatePreviousValuesPromise
  extends Promise<DebatePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  timelimit: () => Promise<DateTimeOutput>;
  timelimitString: () => Promise<String>;
  type: () => Promise<DebateType>;
  closed: () => Promise<Boolean>;
  crowned: () => Promise<Boolean>;
  published: () => Promise<Boolean>;
  answerOne: () => Promise<String>;
  answerTwo: () => Promise<String>;
  image: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DebatePreviousValuesSubscription
  extends Promise<AsyncIterator<DebatePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  timelimit: () => Promise<AsyncIterator<DateTimeOutput>>;
  timelimitString: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<DebateType>>;
  closed: () => Promise<AsyncIterator<Boolean>>;
  crowned: () => Promise<AsyncIterator<Boolean>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  answerOne: () => Promise<AsyncIterator<String>>;
  answerTwo: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface InteractionSubscriptionPayload {
  mutation: MutationType;
  node: Interaction;
  updatedFields: String[];
  previousValues: InteractionPreviousValues;
}

export interface InteractionSubscriptionPayloadPromise
  extends Promise<InteractionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InteractionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InteractionPreviousValuesPromise>() => T;
}

export interface InteractionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InteractionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InteractionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InteractionPreviousValuesSubscription>() => T;
}

export interface InteractionPreviousValues {
  id: ID_Output;
  type: InteractionType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface InteractionPreviousValuesPromise
  extends Promise<InteractionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<InteractionType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface InteractionPreviousValuesSubscription
  extends Promise<AsyncIterator<InteractionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<InteractionType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  content: String;
  read: Boolean;
  deleted?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  read: () => Promise<Boolean>;
  deleted: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  read: () => Promise<AsyncIterator<Boolean>>;
  deleted: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface NotificationSubscriptionPayload {
  mutation: MutationType;
  node: Notification;
  updatedFields: String[];
  previousValues: NotificationPreviousValues;
}

export interface NotificationSubscriptionPayloadPromise
  extends Promise<NotificationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotificationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotificationPreviousValuesPromise>() => T;
}

export interface NotificationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NotificationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NotificationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotificationPreviousValuesSubscription>() => T;
}

export interface NotificationPreviousValues {
  id: ID_Output;
  userId: String;
  type: NotificationType;
  status: NotificationStatus;
  new: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface NotificationPreviousValuesPromise
  extends Promise<NotificationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<String>;
  type: () => Promise<NotificationType>;
  status: () => Promise<NotificationStatus>;
  new: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface NotificationPreviousValuesSubscription
  extends Promise<AsyncIterator<NotificationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<NotificationType>>;
  status: () => Promise<AsyncIterator<NotificationStatus>>;
  new: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ReportSubscriptionPayload {
  mutation: MutationType;
  node: Report;
  updatedFields: String[];
  previousValues: ReportPreviousValues;
}

export interface ReportSubscriptionPayloadPromise
  extends Promise<ReportSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReportPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReportPreviousValuesPromise>() => T;
}

export interface ReportSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReportSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReportSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReportPreviousValuesSubscription>() => T;
}

export interface ReportPreviousValues {
  id: ID_Output;
  type: ReportType;
  reason: ReportReason;
  reasonText?: String;
  treated: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ReportPreviousValuesPromise
  extends Promise<ReportPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<ReportType>;
  reason: () => Promise<ReportReason>;
  reasonText: () => Promise<String>;
  treated: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ReportPreviousValuesSubscription
  extends Promise<AsyncIterator<ReportPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<ReportType>>;
  reason: () => Promise<AsyncIterator<ReportReason>>;
  reasonText: () => Promise<AsyncIterator<String>>;
  treated: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TrophySubscriptionPayload {
  mutation: MutationType;
  node: Trophy;
  updatedFields: String[];
  previousValues: TrophyPreviousValues;
}

export interface TrophySubscriptionPayloadPromise
  extends Promise<TrophySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TrophyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TrophyPreviousValuesPromise>() => T;
}

export interface TrophySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TrophySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TrophySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TrophyPreviousValuesSubscription>() => T;
}

export interface TrophyPreviousValues {
  id: ID_Output;
  won: Boolean;
  type?: TrophyType;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TrophyPreviousValuesPromise
  extends Promise<TrophyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  won: () => Promise<Boolean>;
  type: () => Promise<TrophyType>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TrophyPreviousValuesSubscription
  extends Promise<AsyncIterator<TrophyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  won: () => Promise<AsyncIterator<Boolean>>;
  type: () => Promise<AsyncIterator<TrophyType>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstname: String;
  lastname: String;
  email: String;
  password: String;
  birthdate: DateTimeOutput;
  role: Role;
  certified: Boolean;
  gender: Gender;
  profilePicture?: String;
  coverPicture?: String;
  bio?: String;
  language: Language;
  theme: Theme;
  crowned: Boolean;
  crownedDate?: DateTimeOutput;
  private: Boolean;
  lastConnected?: DateTimeOutput;
  mailStatus: MailStatus;
  mailErrors: Int[];
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  birthdate: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
  certified: () => Promise<Boolean>;
  gender: () => Promise<Gender>;
  profilePicture: () => Promise<String>;
  coverPicture: () => Promise<String>;
  bio: () => Promise<String>;
  language: () => Promise<Language>;
  theme: () => Promise<Theme>;
  crowned: () => Promise<Boolean>;
  crownedDate: () => Promise<DateTimeOutput>;
  private: () => Promise<Boolean>;
  lastConnected: () => Promise<DateTimeOutput>;
  mailStatus: () => Promise<MailStatus>;
  mailErrors: () => Promise<Int[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  birthdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  role: () => Promise<AsyncIterator<Role>>;
  certified: () => Promise<AsyncIterator<Boolean>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  profilePicture: () => Promise<AsyncIterator<String>>;
  coverPicture: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  language: () => Promise<AsyncIterator<Language>>;
  theme: () => Promise<AsyncIterator<Theme>>;
  crowned: () => Promise<AsyncIterator<Boolean>>;
  crownedDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  private: () => Promise<AsyncIterator<Boolean>>;
  lastConnected: () => Promise<AsyncIterator<DateTimeOutput>>;
  mailStatus: () => Promise<AsyncIterator<MailStatus>>;
  mailErrors: () => Promise<AsyncIterator<Int[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Ad",
    embedded: false
  },
  {
    name: "GenderFilter",
    embedded: false
  },
  {
    name: "AdTarget",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Conversation",
    embedded: false
  },
  {
    name: "DebateType",
    embedded: false
  },
  {
    name: "Debate",
    embedded: false
  },
  {
    name: "InteractionType",
    embedded: false
  },
  {
    name: "Interaction",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "NotificationType",
    embedded: false
  },
  {
    name: "NotificationStatus",
    embedded: false
  },
  {
    name: "Notification",
    embedded: false
  },
  {
    name: "ReportType",
    embedded: false
  },
  {
    name: "ReportReason",
    embedded: false
  },
  {
    name: "Report",
    embedded: false
  },
  {
    name: "TrophyType",
    embedded: false
  },
  {
    name: "Trophy",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Gender",
    embedded: false
  },
  {
    name: "Theme",
    embedded: false
  },
  {
    name: "Language",
    embedded: false
  },
  {
    name: "MailStatus",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
